{
    "version": "https://jsonfeed.org/version/1",
    "title": "三千羊毛",
    "subtitle": "以己为剑 斩尽诸险",
    "icon": "https://to-ywz.github.io/images/favicon.ico",
    "description": "笔记&分享",
    "home_page_url": "https://to-ywz.github.io",
    "items": [
        {
            "id": "https://to-ywz.github.io/Education/E333/6-23/",
            "url": "https://to-ywz.github.io/Education/E333/6-23/",
            "title": "E333抽背",
            "date_published": "2023-06-23T05:27:27.000Z",
            "content_html": "<h2 id=\"秦汉教育\"><a class=\"anchor\" href=\"#秦汉教育\">#</a> 秦汉教育</h2>\n<h3 id=\"名词解释\"><a class=\"anchor\" href=\"#名词解释\">#</a> 名词解释</h3>\n<h4 id=\"太学\"><a class=\"anchor\" href=\"#太学\">#</a> 太学</h4>\n<ol>\n<li class=\"quiz fill\">\n<p>简介<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>太学是汉武帝时期在董仲舒的建议下，为推行 “独尊儒术” 的文教政策而创立的中央官学.<br />\n 五经博士置弟子标志着太学正式成立<br />\n标志着以经学教育为基本内容的中国封建教育制度正式确立</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>特点:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>太学以为国家培养 “经明行修” 的官吏作为教育宗旨；</p>\n<p>在教学内容上，制定统一的教材主要学习 “五经”;</p>\n<p>太学中有个别、小组教学、“大都授” 集体上课以及次第相传的教学形式；</p>\n<p>太学以 “设科射策” 的形式进行考试；太学把教师称作博士，把学生称作 “博士弟子” 或 “太学生”</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>评价:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>太学是我国第一所有完备规划、史实详尽可考的学校太学最早利用学校教育来强化官方意识形态；</p>\n<p>太学掀开了反抗宦官政治的中国学生运动史上的第一页。</p>\n<p>但由于太学在教学中存在排除异己学说、空谈义理的现象，严重束缚了教育思想和学术研究的发展</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"简答题\"><a class=\"anchor\" href=\"#简答题\">#</a> 简答题</h3>\n<h4 id=\"简述汉武帝董-汉代独术三大文教政策\"><a class=\"anchor\" href=\"#简述汉武帝董-汉代独术三大文教政策\">#</a> 简述 (汉武帝 / 董 / 汉代)“独术”(三大) 文教政策</h4>\n<ol>\n<li class=\"quiz fill\">\n<p>简介:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>汉武在董仲舒的建议下，实行 “独术” 的文教政策。</p>\n<p>董仲舒提出的 “独尊儒术” 等三大建议，称为汉代三大文教政策</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>含义:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>国家政策和文化教育皆以儒术为本，儒学成为统一的指导思想，</p>\n<p>以儒家经典为教育内容，</p>\n<p>用严格的师法代替自由讲学书本知识在教学中占主要地位，</p>\n<p>长句古训代替了对现实问题的探讨</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>三大文教政策:<span class=\"gap\">“推明孔氏，抑黜百家”</span>、<span class=\"gap\">兴太学以养士</span>、<span class=\"gap\">重视选举，任贤使能</span>。</p>\n<blockquote>\n<p>“推明孔氏，抑黜百家”。</p>\n<p>这是文教政策的总纲领。</p>\n<p>董仲舒论证了儒学在封建统治中独一无二的地位，汉代虽主张其他各家学说也可以发展，但其他学说处于从属地位，不可取代儒学的官方地位</p>\n<p>兴太学以养士。</p>\n<p>为了保证封建国家在统治思想上的高度统一，也为了改变统治人才短缺的局面，董仲舒提出 “兴太学以养士” 的建议。</p>\n<p>实际上，通过兴办太学，政府直接操纵教育大权，决定人才的培养目标.</p>\n<p>这是落实 “独尊儒术” 教育政策的重要手段之一。</p>\n<p>重视选举，任贤使能。</p>\n<p>针对汉初人才选拔和使用中的弊病，董仲舒提出加强选举合理任用人才的主他提出 “量材而授官录德而定位” 的用人思想。</p>\n<p>这些主张对促进儒学取得独尊地位有重要作用。</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>评价:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>总的来看 “独术” 使学在社会政治和社会生活中的地位空前提高，</p>\n<p>使学在教育观念和教育实施方面都处于主导和支配地位，基本上符合儒家构建的模式并以此全方位地影响着社会政治文化的发展走向，作用极为深远</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "教育学",
                "E333",
                "E333"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8FSTM32MP157/",
            "url": "https://to-ywz.github.io/Embedded/STM32/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8FSTM32MP157/",
            "title": "第一个程序STM32MP157",
            "date_published": "2023-06-18T16:33:52.000Z",
            "content_html": "<h1 id=\"第一个程序\"><a class=\"anchor\" href=\"#第一个程序\">#</a> 第一个程序</h1>\n<p>与 hello world 类似，嵌入式第一个程序为点亮 LED, 在 STM 32MP157 上点亮 LED.</p>\n<h2 id=\"如何点亮一个-led\"><a class=\"anchor\" href=\"#如何点亮一个-led\">#</a> 如何点亮一个 LED</h2>\n<ol>\n<li>看原理图，找到相关引脚</li>\n<li>看主芯片的数据手册，如何配置控制引脚</li>\n<li>写程序</li>\n</ol>\n<h3 id=\"看原理图\"><a class=\"anchor\" href=\"#看原理图\">#</a> 看原理图</h3>\n<p>对于 百问网 的这块板子来说，LED 部分的原理图如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3q216km4y1s0.jpg\" alt=\"image\" /><br />\n 以 LED2 为例子，从图中可以看出 这个 LED 正极接入了 3.3V, 负极接到了 主控的 PA10 上.<br />\n 由初中物理可知，电路的导通是因为电子的定向移动，电子的定向移动是因为存在电势差<br />\n所以要想点亮 LED, 就要形成电势差，而 LED 的正极接入的 3.3v 的电源，所以只能通过 改变 PA10 输出的电压来形成电势差<br />\n显然，PA10 输出高电平时 电势差为 0, LED 熄灭；PA10 输出低电平时 电势差为 3.3v, LED 点亮</p>\n<h4 id=\"驱动能力不足的情况\"><a class=\"anchor\" href=\"#驱动能力不足的情况\">#</a> 驱动能力不足的情况</h4>\n<p>对于 MP1 来说，IO 能输出 3.3v 的电压所以采用当前的电路<br />\n有有些 驱动能力较弱的 主控 可能只能输出 1.2v 那么他们的原理图电路可能如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.mtzsdl9cu5s.jpg\" alt=\"image\" /></p>\n<p>当 电路设计如上时，<br />\nGPIO 输出 1.2v 时，三极管导通，3.3v 和 GND 形成通路 LED 被点亮<br />\n GPIO 输出 0v 时，三极管截至，无法形成通路，LED 熄灭</p>\n<p>也有可能如下设计<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.e7tyxd3a41c.jpg\" alt=\"image\" /><br />\n 当 电路设计如上时，<br />\nGPIO 输出 1.2v 时，第一个三极管导通，三极管集电极处电压几乎为 0, 第二个三极管不导通，LED 熄灭<br />\n GPIO 输出 0 v 时，第一个三极管截至，集电极处存在电压，第二个三极管导通，LED 点亮</p>\n<p><strong>PS: 其实无论，输出的电压是多少，如果外围电路没有错误，对我们编程来说，只有 0 或者 1, 输出的只有高低电平</strong></p>\n<h3 id=\"操作相关引脚逻辑性推导\"><a class=\"anchor\" href=\"#操作相关引脚逻辑性推导\">#</a> 操作相关引脚 (逻辑性推导)</h3>\n<p>GPIO: General-purpose input/output</p>\n<p>回顾上面，需要 GPIO 输出电平，我们就需要操作 GPIO, 可是  GPIO 输出高电平有很多可能<br />\n例如 通用输入输出，ADC, DAC, UART .... 这就涉及到了 GPIO 的多路复用，GPIO_MUX 多路选择器部分，通过这个选择器来选择 GPIO 的工作模式<br />\n这一部分比 STM32 上 体现为 GPIO 的模式选择，NXP 的 RT 系列的单片机就有一个专门的用于控制 IOMUXC 寄存器，用于选择 复用</p>\n<p>所有 ARM 架构的芯片为了省电 默认所有的 模块都是 被关闭 的需要手动打开，GPIO 也是如此，在使用之前需要 ENABLE 相应的时钟</p>\n<p>咱们 控制 LED 亮灭就是简单的 GPIO 基本输入输出，不用复用成其他模块<br />\n GPIO 有 I 也有 O, 就会存在一个方向控制器<br />\n上面分析的就是 LED 操作就是 GPIO 电平输出，所以 咱需要 把 GPIO 的方向配置成输出<br />\n刚刚分析 MP1 的 LED 电路 为低电平点亮，所以将 输出寄存器 配置为高电平</p>\n<p>PS: 操作寄存器时，不要影响其他位，先读出寄存器原本的值，再写入寄存器中.(大部分芯片都采用这种协议 (set and clear protocol))</p>\n<p>小结一下:</p>\n<ol>\n<li>有多组 GPIO, 每组有多个 GPIO</li>\n<li>使能：电源 / 时钟</li>\n<li>模式 (Mode): 引脚可用于 GPIO 或其他功能</li>\n<li>方向：引脚 Mode 设置为 GPIO 时，可以继续设置它是输出引脚，还是输入引脚</li>\n<li>数值：对于输出引脚，可以设置寄存器让它输出高、低电平<br />\n对于输入引脚，可以读取寄存器得到引脚的当前电平</li>\n</ol>\n<h3 id=\"stm32mp157-操作-点亮-led-的寄存器\"><a class=\"anchor\" href=\"#stm32mp157-操作-点亮-led-的寄存器\">#</a> STM32MP157 操作 点亮 LED 的寄存器</h3>\n<h4 id=\"时钟配置\"><a class=\"anchor\" href=\"#时钟配置\">#</a> 时钟配置</h4>\n<p>上面咱们说过 点亮 LED 需要，先使能 对应的 电源总线进行使能，<br />\n 这一部分就需要查看数据手册对应的寄存器操作，这里涉及到 RCC 模块，RCC 是管理复位 和 时钟控制的模块<br />\n在手册的 10.2 章节中找到看见一张 RCC 模块的功能框图，这里直观的表示出了 RCC 个中功能<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5zihk7u9e2w0.jpg\" alt=\"image\" /><br />\n 在图的下面，可以看见 PLLx 的功能，咱们的要使用的 PLL4 右侧很明显有  <code>per_clk</code> , GPIO 是一种最基本的外设，所以咱们找对 PLL 了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4fm6fxyf0480.jpg\" alt=\"image\" /><br />\n 让咱们继续向下找一找，在数据手册的 522 页，RCC 的 10.4 章节，功能描述部分，有着这么一段话</p>\n<blockquote>\n<p>The RCC provides up to 4 PLLs, each of them can be configured with integer or fractional<br />\nratios.<br />\n• The PLL1 is dedicated to the MPU clocking<br />\n• The PLL2 provides:<br />\n– The clocks for the AXI-SS (including APB4, APB5, AHB5 and AHB6 bridges)<br />\n– The clocks for the DDR interface<br />\n– The clocks for the GPU<br />\n• The PLL3 provides:<br />\n– The clocks for the MCU, and its bus matrix (including the APB1, APB2, APB3,<br />\nAHB1, AHB2, AHB3 and AHB4)<br />\n– The kernel clocks for peripherals<br />\n• The PLL4 is dedicated to the generation of the kernel clocks for various peripherals</p>\n</blockquote>\n<p>可以看到，原文中表示 PLL4 是专门用于 生成各种外设时钟的内核时钟，还用了  <code>dedicated to</code>  来表示专门，说明肯定没找错 PLL<br />\n 再往下也能看到更详细的关于 RCC 模块的框图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4669sb2k6uy.jpg\" alt=\"image\" /></p>\n<p>这时候就该去找 RCC 的寄存器啦，当然和 PLL4 相关的手册肯定会有很多，这时候当然是找 类似于 CR 寄存器，而且大概率是 RCC_CR<br />\n 至于为什么，CR 是  <code>Control Register</code>  的缩写，而 PLL4 归属于 RCC 那么一定要先在 RCC 中使能，使能是一种中控制操作，那必然就是 CR 寄存器啦<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3mcbh2qugls0.jpg\" alt=\"image\" /><br />\n 很显然，猜错名字了，差了个 PLL4, 不过大差不差.<br />\n 从下面的文字中可以看出 0 bit 位是使能位，只要把这一位置 1 即可使能 PLL4<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4pj7jg02kpw0.jpg\" alt=\"image\" /></p>\n<p>由寄存器表可知 RCC_PLL4CR, 为控制 外设的时钟线，使能只需要拉高第一位，在不影响其他位的情况下<br />\n咱们可以这么写  <code>RCC_PLL4CR |= (1 &lt;&lt; 0)</code> <br />\n PLL4 的使能并不是瞬间的，所以在操作之前需要等待，PLL4 准备好，即等待 RCC_PLL4CR 的  <code>PLL4REDY</code>  位复位，才算启动成功<br />\n这里咱可以这样写  <code>RCC_PLL4CR &amp; (1 &lt;&lt; 1)</code>  来检测 PLL4 是否使能</p>\n<p>对于 ARM 架构的芯片来说，大部分外设都是关闭的，所以要配置一个外设之前必须要做的事情是，使能对应的外设时钟<br />\n一般来说，外设时钟的使能都是  <code>AxBx_ENSETR</code> , 但是这里有一个很大的问题，如何确定这些外设到底归属于哪些总线管理？<br />\n 其实在文档中有一章节叫做  <code>Memory and bus architecture</code>  这里介绍了内存分布和总线架构<br />\n在 2.1.2 Memory Map Organization 中有一节 Peripherals clusters 的内容，第一段就涉及到了 GPIO 外设</p>\n<blockquote>\n<p>AHB4/APB3<br />\nThis cluster groups important system functions as clock and power control, system<br />\nconfiguration, most GPIOs control, plus some additional timers and low-speed<br />\ncommunication interfaces</p>\n</blockquote>\n<p>这里大致意思就是 AHB3 和 AHB4, 管理系统配置、电源、时钟和 GPIO 以及一部分定时器和低速通信接口<br />\n那这就很明确了，直接去寻找 AHB3 和 AHB4 相关的寄存器，直接查找会好一些<br />\n这里可以需要注意一下因为用的 A7 内核，所以要找 Enable for MPU 的<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.71ao3rrjvn80.png\" alt=\"image\" /></p>\n<h4 id=\"gpio-配置\"><a class=\"anchor\" href=\"#gpio-配置\">#</a> gpio 配置</h4>\n<p>和一般的 A 系列 或 M 系列 的 ARM 不同，157 的引脚被 和功能被不同的模块复用，有些 M4 专用，有些 A7 专用，还有些二者复用<br />\n但是不管是 A 系列还是 M 系列，引脚配置的思路应该大差不差，具体的配置方式参考 文档的第 13 章的 Table 81, 以及 13.3.10 小结<br />\n这部分对 GPIO 的配置有专门的讲解<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5w9pjj2uj8o0.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6v92b3xqers0.jpg\" alt=\"image\" /></p>\n<p>这里我就直接通过寄存器表来查看相关配置啦</p>\n<p>首先配置 GPIO 的工作模式，文章开始说过，现在的 GPIO 都是身兼数职，所以需要先指定它工作在哪个职责上<br />\n这个就涉及 GPIO_MODER 寄存器<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1uns4ldco4o0.jpg\" alt=\"image\" /><br />\n 从图中可以看到 GPIO 输出模式需要将对应的位配置为 01<br />\n 伪代码可以这样实现  <code>GPIOA_MODER &amp;= ~(3 &lt;&lt; 20); GPIOA_MODER |= (1 &lt;&lt; 20)</code> ;</p>\n<p>接下去就先不配置上下拉，输出速度之类的，只先看一下输出类型默认方式，是推挽 还是开漏的模式了 (因为默认推挽)<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2l4tbhj1qie0.jpg\" alt=\"image\" /><br />\n 直接快进到 输出<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.59rxw8n915c0.jpg\" alt=\"image\" /><br />\n 从图中可知，要想输出对应电平只需要，将电平写入对应位即可，即  <code>GPIOA_ODR |= (1 &lt;&lt; 10); GPIOA_ODR &amp;= (1 &lt;&lt; 10);</code></p>\n<p>到此，整个逻辑层就捋出来了<br />\n至于代码实现就就按着这个逻辑即可，这里贴一份我的代码</p>\n<h5 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USE_A7</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> ntime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ntime<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 使能 PLL4 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x894</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 等待时钟稳定</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/* 使能 GPIOA */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">USE_A7</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xA28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">USE_M4</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xAA8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/* 设置 GPIO10 为输出模式 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50002000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 指向 (GPIOA_ODR)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50002000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 执行任务 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/* 设置 LED 电平变化 */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动文件</p>\n<pre><code class=\"language-ASM\">.text\n.global  _start\n_start: \t\t\t\n\n\t/* 设置sp */\n\tldr sp, =0xc0000000 + 0x100000\n\n\t/* 调用main函数 */\n\tbl main\n</code></pre>\n<p>makefile</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PREFIX<span class=\"token operator\">=</span>arm-linux-gnueabihf-</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CC<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>gcc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LD<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>ld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>AR<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>ar</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>OBJCOPY<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>objcopy</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>OBJDUMP<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>objdump</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token target symbol\">led.img</span> <span class=\"token punctuation\">:</span> start.S main.c</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -nostdlib -g -c -o start.o start.S</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -nostdlib -g -c -o main.o main.c</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>LD<span class=\"token punctuation\">)</span> -T stm32mp157.lds -g start.o main.o -o led.elf </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJCOPY<span class=\"token punctuation\">)</span> -O binary -S led.elf  led.bin</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJDUMP<span class=\"token punctuation\">)</span> -D -m arm  led.elf  > led.dis</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tmkimage -A arm -T firmware -C none -O u-boot -a 0xC0100000 -e 0 -d led.bin led.img </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmkimage -T stm32image -a 0xC0100000 -e 0xC0100000 -d led.bin led.stm32 </pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token target symbol\">clean</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\trm -f led.dis  led.bin led.elf led.img *.o *.log</pre></td></tr></table></figure><h2 id=\"其它注意\"><a class=\"anchor\" href=\"#其它注意\">#</a> 其它注意</h2>\n<p>烧录的话目前我没有研究明白，暂时跟着韦东山老师的课程来，走 USB 下载，烧入到 RAM 中<br />\n要注意的是，需要修改一下  <code>led.stm32</code>  的地址<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5hub87mcflc0.jpg\" alt=\"image\" /></p>\n<h2 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h2>\n<p>[1] Linux 完全开发手册。韦东山<br />\n [2] STM32MP157 数据手册<br />\n [3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTAwYXNrLm5ldC9wL3RfcGMvY291cnNlX3BjX2RldGFpbC9jb2x1bW4vcF81Zjg1NzkxZWU0YjA2YWZmMWEwM2Q2MTQ/Y29udGVudF9hcHBfaWQ9\">https://www.100ask.net/p/t_pc/course_pc_detail/column/p_5f85791ee4b06aff1a03d614?content_app_id=</span></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "STM32"
            ]
        },
        {
            "id": "https://to-ywz.github.io/blog/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://to-ywz.github.io/blog/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "hexo博客使用问题记录",
            "date_published": "2023-06-17T10:38:47.000Z",
            "content_html": "<h1 id=\"hexo-blog-使用bug问题记录\"><a class=\"anchor\" href=\"#hexo-blog-使用bug问题记录\">#</a> hexo blog 使用 bug 问题记录</h1>\n<h2 id=\"hexo-d-出现warning-lf\"><a class=\"anchor\" href=\"#hexo-d-出现warning-lf\">#</a> hexo d 出现 &quot;warning: LF&quot;</h2>\n<p>先说结论，出现如下的警告，其实是可以直接忽视的，不会影响编译后的结果<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6krjwmiaz080.webp\" alt=\"image\" /><br />\n 网上能 Google 到一大堆解决方案都是千篇一律的，将  <code>core.autocrlf</code>  设置为  <code>false</code> .<br />\n 这样可以直接解决警告提示，但是很显然，全局化的处理必然会带来更多的隐性问题<br />\n所以，还是很有必要去弄清楚为什么，然后再找出合理的方案解决这个问题</p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>这和个问题的本质源头和  <code>git add</code>  出现 &quot;LF&quot; 警告是一致的<br />\n在 Windows 中使用 CRLF ( <code>\\r\\n</code> ) 做作为行尾符，而在 Linux 系统中则使用 LF ( <code>\\n</code> )<br />\n CRLF 即 Carriage-Return Line-Feed 的缩写<br />\n Git 不修改文件内容，但默认会将入库的文件的行尾符设置为 LF, 会将检出的文件的行尾符设置为 CRLF, 在执行时出现上面的警告<br />\n工作目录中的文件的行尾是 LF, 但是这里在即将入 Git 库之前会将 LF 转换为 CRLF, 所以给出  <code>LF will be replaced by CRLF in &lt;file-name&gt;</code>  的警告<br />\n其实其目的是在告诉我们，源文件不会被修改，但是在 git 仓库中的文件 LF 会被设置为 CRLF.<br />\n 因此在  <code>&quot;LF will be replaced by CRLF in &lt;file-name&gt;</code>  警告后面往往会有一句  <code>&quot;The file will have its original line endings in your working directory.&quot;</code> <br />\n 所以  <code>core.autocrlf</code>  的配置是用于检测跨平台的，如果将其设置为  <code>false</code>  则可能出现一些很难发现的 bug<br />\n 例如，我在做 ftp 开发时，ftp server 是运行在 linux 上的，而从机 MCU 开发是在 windows 上实现的，在新建文件夹命令中多出了一个空格，使用 windows 的 ftp 客户端去查看时跟本无法辨别，而在 linux 上会显示出一个  <code>\\ </code> 的空格，这个 bug 查了半天</p>\n<p>而现将  <code>core.autocrlf</code>  的检测关闭，最直接会导致:</p>\n<ol>\n<li>pull linux 文件到自己的 windows 环境下用记事本看的话会出现黑点</li>\n<li>Windows 里的文件在 Mac 下打开的话，在每行的结尾可能会多出一个 ^M 符号 (未验证，穷鬼没有 Mac, 据说 Mac 投奔了 Unix)</li>\n</ol>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h3>\n<p>由上面可知，暴力的全局更改为不检测并不可取，那么有没有什么合理的方法呢？<br />\n 很遗憾，当必须跨平台处理协作的时候就不能关闭<br />\n一般来说 git 的 Windows 客户端会默认设置  <code>core.autocrlf=true</code>  (可通过  <code>git config core.autocrlf</code>  命令查询是否默认 true. 如不是 true, 通过  <code>config --global core.autocrlf true</code>  命令设置该属性为 true)<br />\n 而  <code>core.autocrlf=true</code>  有以下 3 个功能来避免我们出现我们前面分析时所述的问题:</p>\n<ol>\n<li>在把  <code>modified</code>  修改过的文件  <code>git add</code>  到暂存区 stage” 时，Git 自动把 LF 转换成 CRLF, 并给出那条警告 &quot;LF will be replaced by CRLF&quot;</li>\n<li>在把  <code>modified</code>  修改过的文件由暂存区 (stage) 提交 (commit) 到版本库 / 仓库 (repository) 时，Git 自动把 CRLF 转换成 LF</li>\n<li>在用  <code>check/git checkout</code>  切换到指定分支 或  <code>git clone</code>  克隆远程版本库” 来加载代码时，Git 自动把 LF 转换成 CRLF<br />\n 我们博客属于第一种</li>\n</ol>\n<p>不过对于我们只写博客不进行跨平台处理的情况的话，还是有一个建议可以在使用编辑器的时候，将编辑器的换行标识符进行默认设置<br />\n这里介绍 vscode 的解决方法</p>\n<ol>\n<li>vsocode 的的右下角设置为 CRLF<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6y86xuenw300.webp\" alt=\"image\" /></li>\n<li>每次都手动设置就非常的不合理，所以可以去工作区的设置中设置默认的文件换行方法，这样就可以避免出现需要警告了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2mnd2tv5ls00.webp\" alt=\"image\" /></li>\n<li>当让也可以在  <code>.vscode</code>  文件夹中的  <code>setting.json</code>  文件中添加  <code>&quot;files.eol&quot;:&quot;\\r\\n&quot;</code></li>\n</ol>\n<h3 id=\"知识大爆炸\"><a class=\"anchor\" href=\"#知识大爆炸\">#</a> 知识大爆炸</h3>\n<h4 id=\"cr-lf-和-lf-区别\"><a class=\"anchor\" href=\"#cr-lf-和-lf-区别\">#</a> CR-LF 和 LF 区别</h4>\n<p>LF: Line Feed 换行<br />\n CRLF: Carriage Return Line Feed 回车换行</p>\n<p>早期的机械打字机上个名为 **「字车」<strong>(Typewriter carriage) 的部件，类似于现在的光标，打一个字符，字车前进一格.<br />\n 而打完一行后，则需要让字车回到起始位置，这就是</strong> Carriage Return** 键最早的作用，因而被直接翻译为 **「回车」**<br />\n 虽然回车键的功能已经不止 &quot;倒回字车&quot; 了 (例如，泄愤的大回车键，狗头), 但这个译名保留了下来</p>\n<h4 id=\"r与n的起源\"><a class=\"anchor\" href=\"#r与n的起源\">#</a> '\\r' 与 '\\n' 的起源</h4>\n<p>这最早起源于电传打字机，这是一种远距离信息传送器械，通常由键盘、收发报器和印字机构等组发报时，按下某一字符键，就能将该字符的电码信号自动发送到信道；收报时，能自动接收来自信道的电码信号，并打印出相应的字符.<br />\n 大概是这个样子，经常出现在二战时期为背景的电影中的打字机是他的祖先辈份<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1py4lg46v8w0.webp\" alt=\"image\" /><br />\n 这种打字机有一个打印头和滚轮，滚轮用于调整纸的纵向移动。每当打印头打印完当前行后需要将打印头移到最左边，滚轮需要把纸向下移动一行。由于这两个操作需要的时间远大于电信号传输的时间，可能会导致在操作过程中电信号的丢失。而解决这个问题的方案是物理补偿，要求每行都加上  <code>\\r\\n</code>  这两个字符，用于补偿物理设备操作的时间<br />\n <code>\\r</code>  代表打印头左移对应 CR, 而  <code>\\n</code>  滚轮滚动操作对应 LF.</p>\n<h4 id=\"那么为什么要分成两个字符\"><a class=\"anchor\" href=\"#那么为什么要分成两个字符\">#</a> 那么为什么要分成两个字符？</h4>\n<p>其实理由很简单，因为测试出来的结果是一个字符输入后，CRLF 的操作并没有完成，进而导致移动到一半的时候打印出错位的文字。所以干错设计为两个字符来避免这个问题.<br />\n 虽然这个理由很无厘头，但这就是最节省成本的解决方式</p>\n<h4 id=\"为什么不是-nr呢\"><a class=\"anchor\" href=\"#为什么不是-nr呢\">#</a> 为什么不是  <code>\\n\\r</code>  呢？</h4>\n<p>因为  <code>\\r</code>  所消耗的时间会更长，保证在两个字符输入完成前实现 CR-LF 的操作，要不然也会出现一个字符设计版本的问题</p>\n<h2 id=\"nodejs-14-accessing-non-existent-property问题\"><a class=\"anchor\" href=\"#nodejs-14-accessing-non-existent-property问题\">#</a> Node.js 14 Accessing non-existent property 问题</h2>\n<p>-------------------20230617---------------------------</p>\n<p>今天早更新主题一不小心把  <code>_config.yml</code>  文件覆盖了，/(ㄒ o ㄒ)/~~</p>\n<p>之前环境配置也存在一些问题，所以干脆重新搭建一遍环境</p>\n<p>结果在编译的时候出现了这个警告，本着不放过任何一个警告的精神，我去 google 了一下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4gexhvdisp00.webp\" alt=\"image\" /></p>\n<p>结果，但部分都说是无关紧要的警告，是因为 Node Js 的版本过高，可以忽略或者强制降低警告优先级</p>\n<p>目前暂时没有找到更好的解决方案，而且还有一大堆 bug 没修，所以暂时搁置一下</p>\n<h4 id=\"本文参考来源\"><a class=\"anchor\" href=\"#本文参考来源\">#</a> 本文参考来源</h4>\n<p><strong>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yYm9uZTExL2FydGljbGUvZGV0YWlscy8xMDQwNTIxMzc=\">https://blog.csdn.net/mrbone11/article/details/104052137</span></strong><br />\n<strong>[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmluY2xpcC5jb20vbmV3cy9mLzExNjc4Lmh0bWw=\">https://www.finclip.com/news/f/11678.html</span></strong><br />\n<strong>[3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmV3bGluZQ==\">https://en.wikipedia.org/wiki/Newline</span></strong></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "blog",
                "blog"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/ARM%E6%9E%B6%E6%9E%84/",
            "url": "https://to-ywz.github.io/Embedded/STM32/ARM%E6%9E%B6%E6%9E%84/",
            "title": "ARM架构",
            "date_published": "2023-06-16T14:20:07.000Z",
            "content_html": "<h1 id=\"arm-架构\"><a class=\"anchor\" href=\"#arm-架构\">#</a> ARM 架构</h1>\n<p>随着对 STM 的逐步了解，就会发现一些特别的地方，例如，为什么 ARM 可以像访问内存一样访问外设？</p>\n<h2 id=\"为什么arm可以像访问内存一样访问外设\"><a class=\"anchor\" href=\"#为什么arm可以像访问内存一样访问外设\">#</a> 为什么 ARM 可以像访问内存一样访问外设？</h2>\n<p>不要觉得这是理所当然的<br />\n在 x86 上驱动程序需要有对应的驱动文件，驱动文件需要通过库函数或是内联汇编才能实现<br />\n虽然 ST 也需要驱动文件，但是底层的实现就很有意思，但 ST 系列的单片机可以使用 C 语言像访问内存一样来访问外设</p>\n<p>从汇编的层面来看 ARM 架构下的处理器可以通过 <code>ldr</code>  来操作任意的内存和外设，而  <code>x86</code>  不同<br />\n他是通过 <code>IN</code>  指令和 <code>MOV</code>  指令分别实现对外设和内存的操作</p>\n<p>其实本质是架构不同，形成的指令集不同，对于 ARM 架构来说，地址和内存统一编址，而 x86 则是将外设分别进行编址<br />\n CPU 依靠地址总线来访问对应的地址，32 位的单片机有 32 根地址线，有 4G 的寻址空间，ROM、RAM 和外设分布在 0~4G 的寻址空间之内<br />\n ARM 架构的内存分布大致如下图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.28ed6cywyu68.jpg\" alt=\"image\" /></p>\n<p>只要是在 0~4G 之外的地址，CPU 想要访问就会和 x86 类似的方式来实现访问<br />\n例如，要访问 EEPROM, 那么对于处理器啊来说，会检查访问 eeprom 的驱动，然后再按 eeprom 的内部地址</p>\n<h2 id=\"risc-cisc\"><a class=\"anchor\" href=\"#risc-cisc\">#</a> RISC &amp; CISC</h2>\n<p>既然说到了架构，那就不得不说一下 两种指令集 CISC 和 RISC<br />\n 由于个人能力有限，所以可能会出现错误和纰漏，就大致介绍一下两大指令集</p>\n<ol>\n<li>CISC<br />\nComplex Instruction Set Computing, 其所用指令较为复杂，而复杂的指令采用 &quot;微程序&quot; 实现<br />\n &quot;微程序&quot; 不代表会高效，该执行的步骤一部都不少，<br />\n 例如: call 和 ret 指令用于实现函数调用和返回，其事实上也是在调用的之前将 pc 或标签地址存入 LR 寄存器，然后在执行到 RET 语句时读取出来<br />\n尽管逻辑一致</li>\n<li>RISC<br />\nReduced Instruction Set Computing, 其所用指令较为简单，特点如下:</li>\n<li>对内存只有读、写指令</li>\n<li>对于数据的运算是在 CPU 内部实现</li>\n<li>使用 RISC 指令的 CPU 复杂度小一点，，易于设计</li>\n</ol>\n<h3 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h3>\n<ol>\n<li>CISC 的指令能力强，但多数指令使用率低却增加了 CPU 的复杂度，指令是可变长格式</li>\n<li>RISC 的指令大部分为单周期指令，指令长度固定，操作寄存器，对于内存只有 Load/Store 操作</li>\n<li>CISC 支持多种寻址方式；RISC 支持的寻址方式</li>\n<li>CISC 通过微程序控制技术实现；</li>\n<li>RISC 增加了通用寄存器，硬布线逻辑控制为主，采用流水线</li>\n<li>CISC 的研制周期长</li>\n<li>RISC 优化编译，有效支持高级语言</li>\n</ol>\n<h2 id=\"arm的cpu内部寄存器\"><a class=\"anchor\" href=\"#arm的cpu内部寄存器\">#</a> ARM 的 CPU 内部寄存器</h2>\n<p>解决了一个问题，又出现了新的问题～～(我那该死的探索欲啊)~~<br />\nARM 架构的 CPU 的内部寄存器有哪些，具体代表什么作用</p>\n<p>ARM 内部有 17 个寄存器，R0~R15 和一个 PSR 寄存器，大致如下图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.dtnj6p5voaw.jpg\" alt=\"image\" /><br />\n 其中 R0~R12 是通用寄存器<br />\n R13 是 SP 寄存器，SP 寄存器又分为 <code>sp_process</code>  和 <code>sp_main</code> , 分别用于 <code>main</code>  的主栈和子函数的 <code>sp_process</code>  过程栈，启动文件中设置的 <code>sp</code>  就是这个文件<br />\n这里的两个寄存器在 keil 是可见的<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.31psuz72bc00.jpg\" alt=\"image\" /><br />\nR14 是 LR 寄存器，用来保存返回地址，函数调用，例如，在使用 BL 之前需要将地址存入到 LR 中<br />\n R15 是 PC 寄存器，程序寄存器，表示当前执行指令的下一条指令。例如，当前执行到 0x12 地址上的  <code>mov R0, #8</code> , 那么 PC 的值则为 0x1A<br />\nPSR 寄存器的情况又有些不同，要分为 cortex-M3/M4 内核和 A7 核</p>\n<h3 id=\"m核\"><a class=\"anchor\" href=\"#m核\">#</a> M 核</h3>\n<p>PSR 实际上是 xPSR<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3jtxfp5tvs20.jpg\" alt=\"image\" /><br />\nxPSR 等价于三个寄存器</p>\n<ul>\n<li>IPSR: 中断 PSR</li>\n<li>EPSR: 执行 PSR</li>\n<li>APSR: 应用 PSR</li>\n</ul>\n<p>这三个寄存器可以一起访问也可以分开访问</p>\n<pre><code class=\"language-ASM\">MRS R0, APSR  ; 读取APSR\nMSR APSR, R0  ; 写入APSR\nMRS R0, PSR   ;写入组合程序状态\nMSR PSR, R0   ;写组合程序状态\n</code></pre>\n<h4 id=\"xpsr各个寄存器控制的位\"><a class=\"anchor\" href=\"#xpsr各个寄存器控制的位\">#</a> xPSR 各个寄存器控制的位</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4n144w85e3o0.jpg\" alt=\"image\" /><br />\n 其在 keil 中视图如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2z4k0x924600.jpg\" alt=\"image\" /></p>\n<p>APSR 各个位的含义<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.63sl0usm6y80.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4zx9vd9o3c40.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5380s8s84qc0.jpg\" alt=\"image\" /></p>\n<h3 id=\"a核\"><a class=\"anchor\" href=\"#a核\">#</a> A 核</h3>\n<p>PSR 实际上是 CPSR,Current Program Status Register<br />\nA7 充分的利用了每一位，每一位的 bit 都有自己的含义<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3ak1ce85wgu0.jpg\" alt=\"image\" /><br />\nA7 内部还有更多寄存器类型，例如 FIQ、IRQ、ABT 之类的， 更多的可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb2N1bWVudGF0aW9uL2RkaTA0MDYvbGF0ZXN0Lw==\">官方文档</span> B1-1145<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.36pautl6uz80.jpg\" alt=\"image\" /></p>\n<h3 id=\"一些想法\"><a class=\"anchor\" href=\"#一些想法\">#</a> 一些想法</h3>\n<p>CPU 的内部的寄存器只有这些，而像 IIC, GPIO 等一系列的外设属于外设的寄存器，仅仅是因为他们在 CPU 的寻址范围内，所以可以实现像内存一样的控制</p>\n<p>其实只有汇编层面上的寄存器才和 CPU 相关，C 语言层面的寄存器更多的是一个内存地址，转化到汇编就是将地址存入十二个寄存器之后进行操作而已</p>\n<h2 id=\"arm的汇编到底是啥\"><a class=\"anchor\" href=\"#arm的汇编到底是啥\">#</a> ARM 的汇编到底是啥</h2>\n<p>说起这个问题，汇编的名字是  <code>ASM</code> , 但是很有意思，会发现  <code>ATT</code>  和  <code>Intel</code>  的汇编都是 ASM, 但是差距还是很大的<br />\n前面也说了，RISC 和 CISC 的指令集不一样，而且 ARM 官方给出了推出了几次指令集，ARM、Thumb、Thumb2， 以及 UAL.</p>\n<p>最开始的时候 ARM 公司只推出了 Thumb 和 ARM 两种汇编语言，两种指令都可以在 MCU 中执行，例如 STM32F103 系列<br />\n Thumb 是 16 位的指令集合，节省空间；而 ARM 是 32 位的指令集合，高效但浪费空间</p>\n<h3 id=\"如何区别两种指令集\"><a class=\"anchor\" href=\"#如何区别两种指令集\">#</a> 如何区别两种指令集</h3>\n<p>ARM 公司给出了两个两个关键字 <code>CODE16</code>  和  <code>CODE32</code> <br />\n 当用 CODE16, 表示下面的代码工作于 Thumb 指令集<br />\n用 CODE32, 表示下面的代码工作于 ARM 指令集</p>\n<p>指令集会影响到 CPU 的取指译码一连串的操作，所以 CPU 也必须实时的知道<br />\n所以在 PSR 寄存器中设有一个 T 标志位，用于区分当前处于哪一个指令集<br />\n为 0 的时候是 ARM 指令集，为 1 时时 Thumb 指令集</p>\n<h3 id=\"cpu如何调用函数\"><a class=\"anchor\" href=\"#cpu如何调用函数\">#</a> CPU 如何调用函数</h3>\n<p>试想一个问题，函数 A 使用 Thumb 指令写的，函数 B 是使用 ARM 指令集编写，如何调用 A/B</p>\n<p>事实上，可以直接将 A/B 的地址写入 PC 寄存器，来实现这个功能</p>\n<p>但是再细想一下，如何让 CPU 运行再 Thumb 模式下运行 A, 而再运行 B 的时候处于 ARM 模式<br />\n做个手脚:<br />\n 调用函数 A 时，让 PC 寄存器的 BITO 等于 1，即: PC = 函数 A 地址 +(1&lt;&lt;0);<br />\n 调用函数 B 时，让 PC 寄存器的 BITO 等于 0:，即：PC = 函数 B 地址</p>\n<p>再进一步，如何再执行 A 时调用 ARM 指令的函数 B, 在执行完毕后回到 Thumb 指令函数 A</p>\n<pre><code class=\"language-asm\">Bx B_Addr\nBx A_Addr +1(+1之后会使能Bit0位)\n</code></pre>\n<p>但是这样子还是存在问题。例如，同一个程序中，有些地方需要高效的 ARM 指令集，而有些则需要 Thumb 低空间<br />\n为了解决这麻烦的问题，ARM 公司推出了 Thumb2 指令集，支持 CODE16 和 CODE32 混合编程</p>\n<p>ARM, Thumb, Thumb2, 每一种汇编都有自己的语言风格，尽管相似，但是会有不同的特性，这样子就增加了程序员的学习成本<br />\n因此 ARM 公司就推出了统一的汇编语言 UAL, UAL 支持 CODE32,CODE16,Thumb 三种风格的语言，这样 ARM 的汇编语言的发展就算是基本成型了</p>\n<h2 id=\"基本的ual汇编语法\"><a class=\"anchor\" href=\"#基本的ual汇编语法\">#</a> 基本的 UAL 汇编语法</h2>\n<p>汇编语言本身大差不差，大致会分为，内存操作指令，输出处理指令 以及 转跳指令三大类</p>\n<h3 id=\"内存操作指令\"><a class=\"anchor\" href=\"#内存操作指令\">#</a> 内存操作指令</h3>\n<h4 id=\"单寄存器操作\"><a class=\"anchor\" href=\"#单寄存器操作\">#</a> 单寄存器操作</h4>\n<p>内存操作指令大致分为两大类：涉及内存读取和不涉及内存读取</p>\n<p>所谓的涉不涉及内存，其实就是只涉及立即数和寄存器的操作，可以是寄存器到寄存器，也可以是立即数到寄存器<br />\n不过有一点需要注意，立即数是有一定限制的.<br />\n 立即数必须满足，可以通过对一个 8 位数字进行向右旋转的操作得到一个在 32 位字中可以用作立即数的值<br />\n例如， <code>mov r0, #10</code>  是可以的但是 <code>mov r0, #10086</code>  就不行</p>\n<pre><code class=\"language-ASM\">MOV\t\tR0, #0x20000\nMOV\t\tR1, #0x10\nMOV\t\tR2, #0x12\n</code></pre>\n<p>涉及内存的操作，也需要经过寄存器，通过 <code>STR</code>  和 <code>LDR</code>  来实现这个功能<br />\n例如，读取 0x20000 的数据到 R1 中，读取 0x40000 中的数据到 R3 中</p>\n<pre><code class=\"language-ASM\">mov r0, #0x20000  ; 0x20000 地址放入r0\nstr r0, [r2]        ; 将数据放入r1的地址\nmov r0, #0x40000  ; 将地址写入r0\nldr r3, [r0]        ; 将地址中的数据读入r3\n</code></pre>\n<p>除了这些基本的操作，还有一些更复杂的操作</p>\n<pre><code class=\"language-ASM\">STR\t\tR2, [R0]              ; R2的值存到R0所示地址\nSTR\t\tR2, [R0, #4]          ; R2的值存到R0+4所示地址\nSTR\t\tR2, [R0, #8]!         ; R2的值存到R0+8所示地址, R0=R0+8\nSTR\t\tR2, [R0, R1]          ; R2的值存到R0+R1所示地址\nSTR\t\tR2, [R0, R1, LSL #4]  ; R2的值存到R0+(R1&lt;&lt;4)所示地址\nSTR\t\tR2, [R0], #0X20       ; R2的值存到R0所示地址, R0=R0+0x20\nMOV\t\tR2, #0x34\nSTR\t\tR2, [R0]              ; R2的值存到R0所示地址\nLDR\t\tR3, [R0], +R1, LSL #1 ; R3的值等于R0+(R1&lt;&lt;1)所示地址上的值\n</code></pre>\n<h4 id=\"多寄存器操作\"><a class=\"anchor\" href=\"#多寄存器操作\">#</a> 多寄存器操作</h4>\n<p>当然除了读取单个寄存器还可以实现读个寄存器的读取<br />\n基本语法如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.bbr7un23kmw.jpg\" alt=\"image\" /></p>\n<p>对于多寄存器的操作来说，会有 LDM 和 STM 指令的 RegList 列表寄存器存储如何对应的问题<br />\n就记住一句话：低标号 Reg 对应低地址减法也如此<br />\n下面是一些 <code>STMA</code>  操作，LDM 也类似<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6rhvfh8cv1o0.jpg\" alt=\"image\" /></p>\n<h4 id=\"实现栈操作\"><a class=\"anchor\" href=\"#实现栈操作\">#</a> 实现栈操作</h4>\n<p>到这里，就会发现，这个操作非常的像栈，这里来模拟一下进出栈的操作</p>\n<p>这里使用满减栈:</p>\n<ol>\n<li>压栈，先减后存，STMFD</li>\n<li>出栈，先出后减，LDMFD</li>\n</ol>\n<p>前面说过栈指针是 SP, 咱们将 R1~R3 的数值存入压入栈中，然后，更改 R1~R3 的值之后存，再出栈，如果数据还原则表示入栈成功</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.34cfbkaaw6w0.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2bgcm06wvesk.jpg\" alt=\"image\" /></p>\n<h3 id=\"数据处理指令\"><a class=\"anchor\" href=\"#数据处理指令\">#</a> 数据处理指令</h3>\n<p>相较于 读取指令，数据操作的指令就更加多了，加减乘除，移位，清零等等<br />\n这里只介绍加减和为位操作以及简单的比较指令</p>\n<h4 id=\"加法指令add\"><a class=\"anchor\" href=\"#加法指令add\">#</a> 加法指令：ADD</h4>\n<p>语法:  <code>add 目的寄存器, 加数1, 加数2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #2\n\t\tadd\t\tr1, r1, r0\n</code></pre>\n<h4 id=\"减法指令sub\"><a class=\"anchor\" href=\"#减法指令sub\">#</a> 减法指令：SUB</h4>\n<p>语法:  <code>sub 目的寄存器, 被减数数1, 减数2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #2\n\t\tmov\t\tr1, #1\n\t\tsub\t\tr1, r1, r0\n</code></pre>\n<h4 id=\"位操作\"><a class=\"anchor\" href=\"#位操作\">#</a> 位操作</h4>\n<h5 id=\"and\"><a class=\"anchor\" href=\"#and\">#</a> AND</h5>\n<p>语法:  <code>and 目的寄存器, 数值1, 数值2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #2\n\t\tmov\t\tr1, #1\n\t\tand\t\tr1, r1, r0 ; r1变成0\n</code></pre>\n<h5 id=\"bic\"><a class=\"anchor\" href=\"#bic\">#</a> BIC</h5>\n<p>语法:  <code>bic 目的寄存器, 数值1, 数值2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #3\n\t\tbic\t\tr1, r1, r0 ; r1 变成2\n</code></pre>\n<h5 id=\"orr\"><a class=\"anchor\" href=\"#orr\">#</a> ORR</h5>\n<p>语法:  <code>orr 目的寄存器, 数值1, 数值2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #2\n\t\torr\t\tr1, r1, r0 ;r1变成3\n</code></pre>\n<h4 id=\"比较\"><a class=\"anchor\" href=\"#比较\">#</a> 比较</h4>\n<h5 id=\"比较指令-cmp\"><a class=\"anchor\" href=\"#比较指令-cmp\">#</a> 比较指令 CMP</h5>\n<p>语法:  <code>cmp r1, r2</code> <br />\ncmp 指令执行后会影响 psr 的 C 位，根据比较结果实现置位和<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5sumnuksm000.jpg\" alt=\"image\" /></p>\n<h5 id=\"测试tst\"><a class=\"anchor\" href=\"#测试tst\">#</a> 测试 TST</h5>\n<p>不修改数据结果来进行 <code>and</code>  操作，来测试数据</p>\n<p>语法:  <code>tst 寄存器1, 寄存器</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #2\n\t\ttst\t\tr1, r0\n</code></pre>\n<h3 id=\"转跳指令\"><a class=\"anchor\" href=\"#转跳指令\">#</a> 转跳指令</h3>\n<p>转跳指令其实不止这两个，但是这两个是函数调用的接口</p>\n<p>B: Branch 转跳<br />\n BL:Branch with Link, 转跳前将返回地址存入 LR<br />\nBX: Branch and exechange, 根据转跳地址的 BIT0, 自动切换 ARM 指令集和 Thumb 指令集<br />\n BXL: 同上，但是转跳前保存返回地址</p>\n<p>语法如图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4bzwss3uvj80.jpg\" alt=\"image\" /></p>\n<p>由于模拟器不能模拟 BX 系列指令，这里只有 B 指令的例子</p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #10\n\t\tBL\t\tDelay\n\t\t\n\t\tmov\t\tr2, #0x1\n\t\t\n\t\t\nDelay\n\t\tSUBS\tr0, r0, #1\t;等价于下面两句话\n\t\t;SUB\t\tr0, r0, #1\n\t\t;CMP\t\tr0, #0\n\t\tBNE\t\tDelay\n\t\tmov\t\tPC, LR\t\n\t\t; BL 的返回地址在LR中, 要通过mov来实现\n\t\t; 没有类似x86的 ret 指令\n</code></pre>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<p>由于个人知识储备有限，文章可能有些虎头蛇尾，后期等查阅完毕相关的文档后在更新和修正<br />\n文章如有不恰当之处，望诸位大佬斧正</p>\n<h2 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h2>\n<p><strong>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTAwYXNrLm5ldC9wL3RfcGMvY291cnNlX3BjX2RldGFpbC9jb2x1bW4vcF81Zjg1Njc3YmU0YjA2YWZmMWEwM2NlY2I/Y29udGVudF9hcHBfaWQ9\">https://www.100ask.net/p/t_pc/course_pc_detail/column/p_5f85677be4b06aff1a03cecb?content_app_id=</span></strong><br />\n<strong>[2] STM32MP157 裸机开发完全手册</strong><br />\n<strong> [3] DM00327659</strong><br />\n<strong> [4] ARM Cortex-M3 与 Cortex-M4 权威指南</strong><br />\n<strong> [5] DDI0406C_d_armv7ar_arm</strong></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "ARM",
                "ARM"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%8B%BE%E9%81%97/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%8B%BE%E9%81%97/",
            "title": "C语言拾遗",
            "date_published": "2023-06-15T22:18:38.000Z",
            "content_html": "<h1 id=\"c语言语法\"><a class=\"anchor\" href=\"#c语言语法\">#</a> C 语言语法</h1>\n<h2 id=\"static-用法\"><a class=\"anchor\" href=\"#static-用法\">#</a> static 用法</h2>\n<p>限制作用域，存储方式变为静态存储</p>\n<ol>\n<li>修饰全局变量，限制作用域。在链接过程中，多文件中的重名变量不会冲突.</li>\n<li>修饰局部变量，延长生命周期，存储方式变为静态存储只进行一次初始化.</li>\n<li>修饰函数，限制函数作用域，局限在文件内部。在连接过程中避免和多文件中同名函数冲突</li>\n</ol>\n<h2 id=\"define-和-const-的区别\"><a class=\"anchor\" href=\"#define-和-const-的区别\">#</a>  <code>#define</code>  和  <code>const</code>  的区别</h2>\n<ol>\n<li><code>const</code>  定义的常量在程序运行过程中只有一份拷贝 (因为它是全局的只读变量，存放在静态区), 而  <code>#define</code>  定义的宏常量在内存中有若干个拷贝 (没有存空间)</li>\n<li><code>#define</code>  宏是在预编译阶段进行替换，而  <code>const</code>  修饰的只读变量是在编译的时候确定其值</li>\n<li><code>#define</code>  宏没有类型，而  <code>const</code>  修饰的只读变量具有特定的类型</li>\n<li><code>#define</code>  不能被调试， <code>const</code>  可以被调试</li>\n</ol>\n<h2 id=\"undef-宏\"><a class=\"anchor\" href=\"#undef-宏\">#</a>  <code>#undef</code>  宏</h2>\n<ul>\n<li>作用:  <code>#undef</code>  用于取消前面的定义的宏标识符</li>\n<li>常见用法:</li>\n</ul>\n<ol>\n<li>防止宏定义冲突</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">200</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX = %d\\n\"</span><span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">MAX</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX = %d\\n\"</span><span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>用于限制宏的作用范围</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TEST_A</span> <span class=\"token expression\"><span class=\"token number\">1</span> </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TEST_CLASS_A</span> <span class=\"token expression\">clase T1 </span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TEST.h\"</span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">TEST_A </span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">TEST_CLASS_A</span></span></pre></td></tr></table></figure><p>这段代码表示  <code>TEST_A 1</code>  和  <code>TEST_CLASS_A clase T1</code>  在出  <code>TEST.h</code>  文件后无效<br />\n可以有效的减少宏的冲突</p>\n<h2 id=\"枚举转字符\"><a class=\"anchor\" href=\"#枚举转字符\">#</a> 枚举转字符</h2>\n<p>相对于 宏定义来说，枚举变量更为利于调试，但是大量的枚举变量，很难让人记住，并且对于枚举值来说，使用  <code>switch case</code>  来实现打印出枚举变量，实在是有些费时费力.<br />\n 作为一个程序员我们追求的就是高效与简洁的艺术 (就是偷懒), 所以我们要找到一种更高效的方法，宏编程</p>\n<p>在这之前需要知道 <strong> <code>#k</code>  会把  <code>k</code>  变为字符串</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MACROSTR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> #k</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义枚举成员</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">X_NUMBERS</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kZero <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kOne <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kTwo <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kThree <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kFour <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kMax <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 定义枚举类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">X</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span> Enum<span class=\"token punctuation\">,</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  X_NUMBERS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">X</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> kConst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 定义枚举类型所对应的字符串</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>kConstStr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">X</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token function\">MACROSTR</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    X_NUMBERS</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">X</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出结果如下:</p>\n<pre><code>Hello World!\n\nkZero = 10\nkOne = 20\nkTwo = 30\nkThree = 40\nkFour = 50\nkMax = 60\n\n</code></pre>\n<p>看结果只能知道 枚举类型被转成了字符，所以需要 使用  <code>gcc -E -o main.c main.i</code> <br />\n 看一下预编译后的结果<br />\n如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"enumToStr.c\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"&lt;built-in>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"&lt;command-line>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"enumToStr.c\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre># <span class=\"token number\">11</span> <span class=\"token string\">\"enumToStr.c\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  kZero <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> kOne <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> kTwo <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> kThree <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> kFour <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> kMax <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> kConst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>kConstStr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">\"kZero = 10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kOne = 20\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kTwo = 30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kThree = 40\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kFour = 50\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kMax = 60\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>很明显的看到 枚举被转换成了字符串，但是仍然存在一些问题字符串打印会带上数字，数值不一定的枚举，无法直接作为索引来查找字符串进行打印</p>\n<h2 id=\"union\"><a class=\"anchor\" href=\"#union\">#</a> union</h2>\n<p>union 最大的作用是用于节省空间，例如</p>\n<p>而现在配合上结构体和 C99 的位字段，则可以进一步放大优势，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> net_work <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1-OneNET 接入成功\t\t0-OneNET 接入失败</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> err_count <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误计数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> heart_beat <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 心跳</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> get_ip <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 获取到最优登录 IP</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> lbs <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 1 - 已获取到了位置坐标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> lbs_count <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取计数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> connect_ip <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接了 IP</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> err_check <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误检测</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> reverse <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> bit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> all<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> OneNet_Statue_t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>假设我们 一个变量  <code>OneNet_Statue_t oneNet_SR;</code>  我们可以这样子对变量进行赋值  <code>oneNet_SR.all=0x0010;</code></p>\n<p>当我们要检测变量的某一个位的时候，就可以使用  <code>network = oneNet_SR.net_work</code>  来获取状态</p>\n<h1 id=\"memmove-和-memcpy-的区别\"><a class=\"anchor\" href=\"#memmove-和-memcpy-的区别\">#</a>  <code>memmove</code>  和  <code>memcpy</code>  的区别</h1>\n<p>首先  <code>memcpy</code>  和  <code>memmove</code>  都是 c 语言库函数，位于  <code>string.h</code>  中的函数.<br />\n 其函数原型分别为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用都是拷贝一段内存的内容，到目的地址。区别在于，<strong>在内存重叠时， <code>memmove</code>  可以保证数据的正确复制，而  <code>memcpy</code>  不可以</strong><br />\n情况如图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/memove.png\" alt=\"memmove\" /><br />\n 对于第一种情况  <code>memcpy</code>  可以完美解决，但是对于后面这两种  <code>memcpy</code>  就无法保证复制结果.<br />\n 所以  <code>memcpy</code>  实现方法因该如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对 其进行分类讨论则可得到  <code>memmove</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp_d <span class=\"token operator\">></span> tmp_s <span class=\"token operator\">&amp;&amp;</span> tmp_s<span class=\"token operator\">+</span>n <span class=\"token operator\">></span> tmp_d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 内存重叠</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      tmp_d <span class=\"token operator\">=</span> tmp_d<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      tmp_s <span class=\"token operator\">=</span> tmp_s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 先将回被重叠的地方存入目的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">--</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"柔性数组0-长数组\"><a class=\"anchor\" href=\"#柔性数组0-长数组\">#</a> 柔性数组 (0 长数组)</h2>\n<p>这道题是我唯一不确定的题目，应为用到的太少了 (个人)<br />\n 题目大致如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Data_t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">short</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Flex_Array_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Flex_Array_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Flex_Array_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Flex_Array_t <span class=\"token operator\">*</span>Array <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.value = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.temp = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.len = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.arr[0] = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.arr[1] = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里考了两个知识点，一个是字节对齐，另一个是柔性数组.<br />\n 在 32 位机的条件下，4 字节对齐，所以大小是 1+4+2 +(3+2)= 12 字节，0 长数组不占空间，<br />\n0 长数组，在 ISO 标准里是不支持的，但是 gcc 在 c99 中预先提供了支持。相关文档再此:&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy9aZXJvLUxlbmd0aC5odG1s\">Arrays of Length Zero</span>.&quot;<br />\n 我感觉 0 长数组的结构体其实就和  <code>extern int arr[]</code>  极其类似 (不过没有跨文件作用域的效果), 在没有定义变量之前都不会产生存储， <code>sizeof</code>   的结果下他们并不占用空间。对于  <code>Flex_Array_t</code>  也是同一个道理.<br />\n 其实，严格意义上来说，0 长就类似数组首地址，而数组的首地址仅仅是一个标签，不占用空间，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其汇编代码如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/%E6%9C%AA%E8%B6%8A%E7%95%8C%E6%95%B0%E7%BB%84.png\" alt=\"ASM_Array\" /><br />\narr 存储在 为一个内存标签，和 main 标签作用类似 (.comm 是声明未初始化的内存段空间)<br />\n<strong> PS: 这也是指针和数组首地址的最大不同</strong></p>\n<p>回到题目，这道题目在弄清楚这两个问题和就变简单了， <code>buf</code>  的大小为 14, 那么  <code>buf</code>  被 赋给  <code>Array</code>  的时候，就是从  <code>arr[0]</code>  开始赋值到  <code>arr[13]</code>  为止</p>\n<p>那么就可以先得出  <code>Array.arr[0]</code>  和  <code>Array.arr[1]</code>  分别为  <code>0x0a</code>  和  <code>0x0b</code> , 因为结构体的数组不占空间，多出的那  <code>len</code>  必然是给  <code>arr[0]</code>  的.<br />\n 余下的就很好推断了  <code>Array.value = 0</code> , 补齐 3 字节， <code>Array.temp = 0x07060504</code> ,  <code>int</code>  本为 4 字节不用补齐.  <code>Array.len = 0x0908</code> ,  <code>short</code>  类型补齐 2 字节.<br />\n 嗯？！到这里就有一个大问题了既然补齐了  <code>short</code>  两个字节，那么为什么  <code>arr</code>  数值不是未知数呢？</p>\n<p>前面说过 柔性数组 大小为 0, 我们开辟的空间大小为 结构体大小大再多上 2 字节.<br />\n 我们使用  <code>malloc</code>  函数开辟出的空间是连续的所以对于 柔性数组来说，不管前面补没补齐，都从上一个数据类型结束初开始计算，算是一个 c99 的特性吧.<br />\n 具体原因我以后在琢磨琢磨.</p>\n<h2 id=\"dowhile0宏定义中的作用\"><a class=\"anchor\" href=\"#dowhile0宏定义中的作用\">#</a>  <code>do&#123;..&#125;while(0)</code>  宏定义中的作用</h2>\n<p>------------20230615----------------</p>\n<p>曾经见到过这样的宏</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__set_task_state</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">,</span> state_value<span class=\"token punctuation\">)</span>      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>一度不知道为什么要用 <code>do&#123;&#125;while(0)</code>  这种结构，在我看来它也可以这样实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__set_task_state</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">,</span> state_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr></table></figure><p>但是今天再找文献的时候发现一篇有意思的文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGl4ZWxzdGVjaC5uZXQvYXJ0aWNsZS8xMzkwNDgyOTUwLWRvLSU3Yi0lN2Qtd2hpbGUtKDApLWluLW1hY3Jvcw==\">原文链接</span>刷新的我对这个写法的认知</p>\n<p>来自 Google 的一位 linux 内核开发工程师是这么说的</p>\n<p>do{...}while(0) is the only construct in C that lets you define macros that always work the same way</p>\n<p>大致意思是 do {...} while (0) 是 C 中唯一允许您定义始终以相同方式工作的宏的构造</p>\n<p>来看个例子，如果有这么个宏</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">foo</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这样使用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这会被转译为:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>能够正常执行，但是这种情况</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将会被解释为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>很显然，这是不符合我们的逻辑的，它没有办法和 do {} while (0) 一样正常工作</p>\n<p>如果我们把这个宏重用 do {...} while (0), 重新定义</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">foo</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>该语句功能上等价于前者，do 能确保大括号里的逻辑能被执行，而 while (0) 能确保该逻辑只被执行一次，即与没有循环时一样<br />\n语句被解释为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Semantically<span class=\"token punctuation\">,</span> it's the same as<span class=\"token operator\">:</span></pre></td></tr></table></figure><p>从本质上的效果来说，上面等价于下面这段代码的逻辑</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么为啥不用 <code>&#123;&#125;</code>  直接括起来呢</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">foo</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><p>这对于上面举的 if 语句的确能被正确扩展，但是针对下面这段代码就会出错</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">bin</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对应拓展为</p>\n<pre><code class=\"language-C\">if (!feral) \n&#123;\n    bar(wolf);\n    baz(wolf);\n&#125;;\nelse\n    bin(wolf);\n</code></pre>\n<p>很显然，存在语法错误.<br />\n 至于循环的问题，其实不用担心，一般来说，while 都会被编译器优化</p>\n<h3 id=\"一些思考\"><a class=\"anchor\" href=\"#一些思考\">#</a> 一些思考</h3>\n<p>其实认真一想，如果我只有一条语句也给 <code>if</code>  或者 <code>while</code>  加上括号<br />\n那么，对于 <code>#define foo(x)  &#123; bar(x); baz(x); &#125;</code>  这个宏<br />\n在下面这段代码也是正常运行的</p>\n<pre><code class=\"language-C\">```C\nif (!feral) \n&#123;\n    &#123;\n        bar(wolf);\n        baz(wolf);\n    &#125;   ;\n&#125;\nelse\n&#123; \n    bin(wolf);\n&#125;\n</code></pre>\n<p>是不是突然在想这个东西的意义是啥了 (狗头), 其实认真想一想，咱们写代码除了自己用，还会给别人使用<br />\n你永远不知道你的队友使用哪种风的编码方式，这也是 Google 那位大佬想要表示的本意:<br />\n 无论你怎么调用这种风格的宏它都不会出现语法错误</p>\n<h1 id=\"编译器特性\"><a class=\"anchor\" href=\"#编译器特性\">#</a> 编译器特性</h1>\n<h2 id=\"条件分支和循环分支可能传谣\"><a class=\"anchor\" href=\"#条件分支和循环分支可能传谣\">#</a> 条件分支和循环分支 (可能传谣)</h2>\n<p>工作的时候听到前辈说: while 不加括号只有分号会导致重起，if 语句也是<br />\n就类似这样的代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* while 部分 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* if 部分 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我去追问了一下，但是他们说没办法复现，是之前遇到的问题，上 google 和 Bing 逛了一圈没发现相对应的 bug<br />\n 不过还是先记录下来，毕竟公司用的 ADS 1.2, 可能是编译器的问题，一切检测还是村寻 ANSI C<br />\n 自己再 Keil 的 ARMCCV5 和 ARMCLANGV6 中都暂时未发现对应的问题，等后面如果遇到，那就用对应的编译器生成汇编看看</p>\n<p>------------20230615----------------</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "声明,学习笔记"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/",
            "url": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/",
            "title": "面试小结",
            "date_published": "2023-03-14T03:23:33.000Z",
            "content_html": "<p>今天面试了一个很有趣的企业，HR 超级友善，虽然技术有一些问题没有回答上来，（挠头）</p>\n<p>例如，舵机的控制脉宽，和脉宽周期 还有 modbus rtu 协议的开始和结束的条件，以及位置 PID（本质是一样的嘛）</p>\n<p>趁这次机会回顾一下这些内容</p>\n<h1 id=\"舵机脉宽\"><a class=\"anchor\" href=\"#舵机脉宽\">#</a> 舵机脉宽</h1>\n<h2 id=\"舵机控制信号\"><a class=\"anchor\" href=\"#舵机控制信号\">#</a> 舵机控制信号</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6hyx804jeqc0.jpg\" alt=\"image\" /></p>\n<h1 id=\"uart\"><a class=\"anchor\" href=\"#uart\">#</a> UART</h1>\n<h2 id=\"疑惑\"><a class=\"anchor\" href=\"#疑惑\">#</a> 疑惑</h2>\n<h3 id=\"uart是不是协议\"><a class=\"anchor\" href=\"#uart是不是协议\">#</a> UART 是不是协议</h3>\n<p>技术面说 UART 不是协议，当时没反应过来就顺着说 UART 是外设。</p>\n<p>但是等缓过来思考 UART 的确是一个协议，因为他是被设计出来用于将并行数据转化为并行数据的，有开始信号，有结束信号，还可以有校验位，严格意义上来说串口是物理层通信协议。</p>\n<p>与 IIC 和 SPI 实在同一层的，只不过 IIC 和 SPI 还涉及数据链路层 更偏向于 LLC 子层</p>\n<p>而 Modbus-RTU 虽然是在物理层和数据链路层实现的协议，但是在实际的工业控制中会被列为应用层，需要具体问题具体分析</p>\n<h3 id=\"uart与串口的关系\"><a class=\"anchor\" href=\"#uart与串口的关系\">#</a> UART 与串口的关系</h3>\n<p>UART 是一种串行通信接口，它定义了数据传输的格式和机制</p>\n<p>而串口通常指的是连接计算机与外部设备的串行通信接口，它也是一种串行通信接口</p>\n<p>在计算机中，串口通常是指 RS-232 串口，它是一种标准的串行通信接口</p>\n<p>RS-232 串口支持异步通信方式，并且使用了 UART 协议来进行数据传输</p>\n<p>在 RS-232 串口中，每个字节都由起始位、数据位、校验位和停止位组成，构成了 UART 协议定义的数据帧结构</p>\n<p>所以 UART 和串口之间的关系是，UART 定义了数据传输的格式和机制，而串口（如 RS-232 串口）则是一种支持 UART 协议的物理接口</p>\n<h2 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h2>\n<h3 id=\"波特率\"><a class=\"anchor\" href=\"#波特率\">#</a> 波特率</h3>\n<p>波特率是 UART 协议，或者说所有异步串行协议，非常重要的一个概念，即单位时间内（1 秒）可表示的 bit 位个数，或者也可以表述为 bit 位宽的倒数</p>\n<p>例如一个波特率为 115200 的 UART 波形表示 1 秒可容纳 115200 个 bit 位，也就是说每一位 bit 数据占大约 8.68uS 的时长，即 8.68bit/s<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.29t68ob44aqs.jpg\" alt=\"image\" /></p>\n<h3 id=\"时序\"><a class=\"anchor\" href=\"#时序\">#</a> 时序</h3>\n<h4 id=\"空闲信号\"><a class=\"anchor\" href=\"#空闲信号\">#</a> 空闲信号</h4>\n<p>设备之间不传输数据时以持续的高电平表示空闲</p>\n<p>空闲位持续时间越长，两个数据帧间隔也越长，单位时间传输的数据就越少</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6d7lfqh2aac0.jpg\" alt=\"image\" /></p>\n<h4 id=\"起始位\"><a class=\"anchor\" href=\"#起始位\">#</a> 起始位</h4>\n<p>UART 接收端会一直检测信号线上的电平变化</p>\n<p>开始传输数据时，发送端将信号线从高电平拉到低电平结束空闲状态，并保持一个 bit 位的时长</p>\n<p>接收器检测到高低电平转换时，开始接收信号</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6d7lfqh2aac0.jpg\" alt=\"image\" /></p>\n<h4 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h4>\n<p>数据位包含传输的实际数据，如果使用了奇偶校验，那么数据位长为 5~8 bits<br />\n 如果没有使用奇偶校验，则位长为 5~9 bits<br />\n 在一般情况下，数据位为 8 bits，数据首先从最低有效位开始发送，高位在后</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.hftmmwctz1s.jpg\" alt=\"image\" /></p>\n<h4 id=\"校验位\"><a class=\"anchor\" href=\"#校验位\">#</a> 校验位</h4>\n<p>校验位可以用来提高传输的可靠性。如果信号在传输过程中因为干扰而导致某些位置的电平产生错误，通过计算接收的数据和校验位是否匹配即可判断数据是否有传输错误，从而给应用层提供有效信息来决定接受 / 丢弃对应的数据。</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.52o4r1mqv6c0.jpg\" alt=\"image\" /></p>\n<h4 id=\"停止位\"><a class=\"anchor\" href=\"#停止位\">#</a> 停止位</h4>\n<p>停止位表示一帧数据的结束，实际是一段时间的高电平</p>\n<p>停止位的时间长短可以设置为 1、1.5 或者 2bits 的停止位</p>\n<p>大部分情况使用 1bit 的停止位。</p>\n<p>UART 是一个异步协议，每一帧的开头可以用跳变沿来同步</p>\n<p>但是停止位只能通过波特率来计算相对位置，如果在停止位的位置识别到一个低电平，则会产生帧错误</p>\n<p>所以在通讯过程中，为了减少波特率的误差导致的问题，可以设置不同的停止位长度来适配</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1jkb9cvxp7b4.jpg\" alt=\"image\" /></p>\n<h3 id=\"数据帧\"><a class=\"anchor\" href=\"#数据帧\">#</a> 数据帧</h3>\n<p>UART 的协议帧由 1 位起始位，数据为 5-8 位，校验位 1 位 (可选) 和一位的停止位</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6qksemj3abc0.jpg\" alt=\"image\" /></p>\n<p>以字符 D 为例子，使用 8 位数据为，0 位校验位，形成的波形理论如下</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1lez0vxuwr0g.jpg\" alt=\"image\" /></p>\n<p>以字符  <code>D</code>  为例，其波形在示波器中实际为下图</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6qmgnzg9p040.webp\" alt=\"image\" /></p>\n<h1 id=\"modbus\"><a class=\"anchor\" href=\"#modbus\">#</a> MODBUS</h1>\n<p>modbus 分为三种，常用的是 modbus-RTU, 少部分是 Modbus-ASCII</p>\n<p>总体来说，MODBUS-RTU 比 MODBUS-ASCII 具有更高的传输效率，MODBUS-RTU 的传输速率通常可以达到 9600bps 或更高，而 MODBUS-ASCII 的传输速率一般在 1200bps 左右</p>\n<h2 id=\"modbus-rtu\"><a class=\"anchor\" href=\"#modbus-rtu\">#</a> Modbus RTU</h2>\n<p>ModBus RTU（Remote Terminal Unit）是 ModBus 协议最常见的实现方式，采用二进制数据传输，具有较高的传输效率和稳定性。它使用串行通信，支持 RS232 和 RS485 两种接口。在 RTU 模式下，每个字节可以传输两位十六进制字符。比如 0xAB 会直接以十六进制 0xAB（二进制 10101011）进行发送。其消息帧格式由以下部分组成：</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1lc0olvrbnr4.jpg\" alt=\"image\" /></p>\n<p>RTU 模式采用 16 位 CRC 校验，后续的命令 / 数据带有循环冗余校验的校验和。RTU 模式比较常用，而 ASCII 一般很少用</p>\n<h3 id=\"介质管理\"><a class=\"anchor\" href=\"#介质管理\">#</a> 介质管理</h3>\n<p>对于 ModBus-RTU 来说，对帧的时间管理，就是对介质的冲突管理</p>\n<p>ModBus-RTU 对于介质管理规定了 2 个重要的时间参数，以实现成帧、冲突管理等。参考下图</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1678957117951.68d47yw77t80.jpg\" alt=\"1678957117951\" /></p>\n<p>这个图可以用于断帧，也就时判断是否接收到一个完整的帧，因此只需要使用一个定时器在每次收到一个字节后，就重启一个 3.5 字节定时器，如果这个 3.5 字节定时器中断了，就证明收到了一个 Modbus 报文，至于这个报文是不是正确的报文，可以在进一步根据帧格式进行校验</p>\n<p>除此之外还规定了，当报文需要连续发送，字节间隔不得超过 1.5 字节时间<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6hrmwwuzn5s0.jpg\" alt=\"image\" /></p>\n<h3 id=\"modbus-ascii\"><a class=\"anchor\" href=\"#modbus-ascii\">#</a> Modbus ASCII</h3>\n<p>ModBus ASCII 采用 ASCII 码传输文本信息，每个 8Bit 字节都作为两个 ASCII 字符发送。相对 ModBus RTU 而言，它的传输效率较低，但具有更好的可读性。ModBus ASCII 也使用串行通信，并支持 RS232 和 RS485 两种接口，适用于短距离通信。在 ASCII 模式下，每个 8 位的字节拆分为两个 ASCII 字符进行发送，消息帧以英文冒号 “：” 开始，以回车和换行（CRLF）符号结束。例如十六进制数 0xAB，会被分解成 ASCII 字符 “A” 和 “B” 进行发送</p>\n<h1 id=\"pid\"><a class=\"anchor\" href=\"#pid\">#</a> PID</h1>\n<p>技术面说 位置式 PID 和 增量式 PID 没有区别</p>\n<p>虽然我觉得哪里不太对，但是没敢反驳，毕竟我对 PID 的理解还是有限的，所以我先来整理一下</p>\n<h2 id=\"普通pid\"><a class=\"anchor\" href=\"#普通pid\">#</a> 普通 PID</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5eos6j11aog0.jpg\" alt=\"image\" /></p>\n<p>正儿八经的 PID 公式如上， 离散化之后，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>d</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 都与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 以及采样时间  <code>T</code>  相关</p>\n<h2 id=\"位置式pid\"><a class=\"anchor\" href=\"#位置式pid\">#</a> 位置式 PID</h2>\n<p>在不考虑 PI 的情况下</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6iofatrs17g0.jpg\" alt=\"image\" /></p>\n<p>从公式中可以看出，比例部分只与当前的误差量有关，而积分部分则是系统过去偏差的累积</p>\n<p>所以很显然的可以看到位置式 PI 需要进行一个计算的累加从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">e_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>~<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>当 k 值较大时，消耗大量的空间</p>\n<p>但是，在实际实现中我们只会保留每一次积分的累计和，根本不需要大量的内存空间</p>\n<p>另外由于输出有可能超过允许值，因此需要对输出进行限幅， *** 而当输出限幅的时候，积分累加部分也应同时进行限幅 ***，以防输出不变而积分项继续累加，也即所谓的积分饱和过深</p>\n<h2 id=\"增量式pid\"><a class=\"anchor\" href=\"#增量式pid\">#</a> 增量式 PID</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6t49fpp59zk0.jpg\" alt=\"image\" /></p>\n<p>由于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">u(0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，在具体编程操作中，对每一拍的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>u</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Δu(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">u</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> 进行累积，即为 PI 调节器的输出</p>\n<p>同样地，为了避免超过允许值， ** 仅需对输出限幅即可 **</p>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<p>可以理解为无论用增量叠加的方式来计算位置式 PI，还是直接计算，结果都是相同的</p>\n<p><strong>唯一的区别：位置式 PI 需要同时设置积分限幅和输出限幅，而增量式 PI 只需输出限幅</strong></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "面试"
            ]
        },
        {
            "id": "https://to-ywz.github.io/win11/Question/win11%E5%85%B3%E9%97%AD%E8%87%AA%E5%B8%A6%E7%9A%84%E7%B9%81%E4%BD%93%E5%88%87%E6%8D%A2/",
            "url": "https://to-ywz.github.io/win11/Question/win11%E5%85%B3%E9%97%AD%E8%87%AA%E5%B8%A6%E7%9A%84%E7%B9%81%E4%BD%93%E5%88%87%E6%8D%A2/",
            "title": "win11关闭自带的繁体切换",
            "date_published": "2023-01-22T10:01:15.000Z",
            "content_html": "<p>最近在使用，CCS 的时候总是会出现输入法变成繁体的问题，都是手动设置回去，一直没管它。新年新气象，这个问题年初一就要解决.</p>\n<p>去看了一下 win11 的快捷键映射。好家伙，简体繁体切换的快捷键和源码格式化的快捷键冲突了，这就忍不了</p>\n<p>繁体我压根用不到，所以这个给快捷键等于浪费，难怪有些时候格式化源码不好使，所以我决定关闭这个没用的快捷键</p>\n<h1 id=\"第一步-打开语言设置\"><a class=\"anchor\" href=\"#第一步-打开语言设置\">#</a> 第一步：打开语言设置</h1>\n<h2 id=\"方案一-wins-搜索语言设置\"><a class=\"anchor\" href=\"#方案一-wins-搜索语言设置\">#</a> 方案一:  <code>WIN+S</code>  搜索语言设置</h2>\n<p><code>win+s</code>  键，输入<strong>语言设置</strong></p>\n<p>说实话这是我最喜欢的方案，大部分系统设置我都是直接  <code>win+s</code>  然后搜索的，搜索到直接回车就能进入界面，方便快捷<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.50zve2dt86w0.jpg\" alt=\"image\" /></p>\n<h2 id=\"方案二-右键输入法图标\"><a class=\"anchor\" href=\"#方案二-右键输入法图标\">#</a> 方案二：右键输入法图标</h2>\n<p>右键中文的中字，选择设置 (<strong>用这种方法进入的可以直接转跳到 第四步</strong>)</p>\n<p>这个是在我不熟悉  <code>win+s</code>  按键常用的定位方法，也很快捷，不需要输入，毕竟可能处于这个问题时，输入法都是繁体，字都不一定认得全<br />\n而且这个方法还可以配置一些简单的 输入法设置，不需要打开新页面，之前我就是在这手动配置回简体的</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3p7erwis5we0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第二步-进入-语言与区域-界面\"><a class=\"anchor\" href=\"#第二步-进入-语言与区域-界面\">#</a> 第二步：进入 语言与区域 界面</h1>\n<p>先进入这个界面<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.46fqesz4laa0.jpg\" alt=\"image\" /></p>\n<p>进入界面后先点击 <strong>中文 (简体，中国)</strong> 最右侧的三个点，然后选择 <strong>语言选项</strong></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2zvxg5ln1yk0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第三步-进入-微软拼音-界面\"><a class=\"anchor\" href=\"#第三步-进入-微软拼音-界面\">#</a> 第三步：进入 微软拼音 界面</h1>\n<p>找到 <strong>微软</strong> 拼音选项点击三个点，然后选择<strong>键盘选项</strong></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4ilwcer93jw0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第四步-进入-按键-界面\"><a class=\"anchor\" href=\"#第四步-进入-按键-界面\">#</a> 第四步：进入 按键 界面</h1>\n<p>点击按键选项，转跳到按键界面<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5uq2s32lhkg0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第五步-关闭热键\"><a class=\"anchor\" href=\"#第五步-关闭热键\">#</a> 第五步：关闭热键</h1>\n<p>找到热键，选择关闭即可，如果有需要可以自行设置热键</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4hedl2see1i0.jpg\" alt=\"image\" /></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "win11",
                "Question"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0-%E6%97%B6%E9%92%9F/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0-%E6%97%B6%E9%92%9F/",
            "title": "TMS320F28379D学习-时钟",
            "date_published": "2023-01-15T12:47:39.000Z",
            "content_html": "<p>虽然 28379D 有两个核，但工作时钟的配置方法还是一致的，所以可以从单核的角度来学习时钟配置的方法</p>\n<h1 id=\"时钟框图\"><a class=\"anchor\" href=\"#时钟框图\">#</a> 时钟框图</h1>\n<p>无论什么外设都离不开功能框图，所以还是先从功能框图入手分析时钟配置的基本信息</p>\n<p><img data-src=\"https://i.loli.net/2021/10/26/4zBDCj3R5gtWqw2.png\" alt=\"complete\" /></p>\n<h2 id=\"时钟源部分\"><a class=\"anchor\" href=\"#时钟源部分\">#</a> 时钟源部分</h2>\n<p><img data-src=\"https://i.loli.net/2021/10/26/QA5NatRko9GxDWF.png\" alt=\"Timer_source\" /></p>\n<p>TMS320F28379D 有三个时钟源，两个内部时钟源和一个内部时钟源，通过 CLKSRCCTL1 来选择时钟源</p>\n<p><code>INTOSC2</code>  是默认的 10M 内部晶振，但是容差太差，如果要使用 USB 或者 CAN 外设则需要使用外部晶振</p>\n<p><code>INTOSC1</code>  是备用的 10M 内部晶振，但是只能用于 DCM 和看门狗。</p>\n<p><code>XTAL</code>  是外部晶振接口，提供稳定的时钟频率</p>\n<h2 id=\"振荡器倍频\"><a class=\"anchor\" href=\"#振荡器倍频\">#</a> 振荡器 + 倍频</h2>\n<p><img data-src=\"https://i.loli.net/2021/10/26/Pd9olFHmZ2R4hvu.png\" alt=\"Oscillator\" /></p>\n<p>时钟产生震荡稳定后，通过  <code>SYSPLLCTL1</code>  来选择 是通过 PLL 对  <code>OSCCLK</code>  进行倍频后输出，或是直接输出  <code>OSCCLK</code></p>\n<h2 id=\"分频\"><a class=\"anchor\" href=\"#分频\">#</a> 分频</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5ozsmhngvng0.jpg\" alt=\"image\" /></p>\n<p>输出的时钟要经过分频器将主频降低到想要的频率，然后分别传输给 CPU 和 外设</p>\n<h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<p>时钟的内容在第三章的第 7 节，但寄存器内容在第三章的末尾<br />\n这一张涉及的功能配置比较多，所以寄存器章节的内容也比较杂<br />\n我这里只调用到的寄存器来讲<br />\n PS: 说实话，TI 在时钟寄存器上常常 标志位和控制位 混在一块，看的头大</p>\n<h2 id=\"clksrcctl1\"><a class=\"anchor\" href=\"#clksrcctl1\">#</a> CLKSRCCTL1</h2>\n<p>用于选择和开启时钟源，以及 CPU1 看门狗的工作状态</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>OSCCLKSRCSEL</code></td>\n<td>选择  <code>OSCCLK</code>  的时钟源</td>\n<td>00: INTOSC2&lt;br /&gt;01: XTAL&lt;br /&gt;10: INTOSC1</td>\n</tr>\n<tr>\n<td><code>INTOSC2OFF</code></td>\n<td>控制 <code>INTOSC2</code>  是否开启</td>\n<td>0: 开启 &lt;br /&gt;1: 关闭</td>\n</tr>\n<tr>\n<td><code>XTALOFF</code></td>\n<td>控制  <code>XTAL</code>  是否开启</td>\n<td>0: 开启 &lt;br /&gt;1: 关闭</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"syspllctl1\"><a class=\"anchor\" href=\"#syspllctl1\">#</a> SYSPLLCTL1</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PLLEN</code></td>\n<td>控制 PLL 是否开启</td>\n<td>0: 开启 &lt;br /&gt;1: 关闭 &lt;br /&gt; 默认为 0</td>\n</tr>\n<tr>\n<td><code>PLLCLKEN</code></td>\n<td>控制是否经过 <code>PLL</code></td>\n<td>0: PLL 倍频输出 &lt;br /&gt; 1: PLL 旁路</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"syspllmult\"><a class=\"anchor\" href=\"#syspllmult\">#</a> SYSPLLMULT</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>IMULT</code></td>\n<td><code>PLL</code>  倍频参数的整数部分</td>\n<td>1~127</td>\n</tr>\n<tr>\n<td><code>FMULT</code></td>\n<td><code>PLL</code>  倍频参数的小鼠部分</td>\n<td>00: 0&lt;br /&gt;01: 0.25&lt;br /&gt;10: 0.5&lt;br /&gt;11: 0.75&lt;br /&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 倍频参数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>I</mi><mrow><mi>M</mi><mi>U</mi><mi>L</mi><mi>T</mi></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>M</mi><mi>U</mi><mi>L</mi><mi>T</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(I_{MULT}+F_{MULT})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"sysclkdivsel\"><a class=\"anchor\" href=\"#sysclkdivsel\">#</a> SYSCLKDIVSEL</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LLSYSCLKDIV</code></td>\n<td><code>PLL</code>  分频参数的整数部分</td>\n<td>2 的倍数，从  <code>/1</code>  到  <code>/126</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"pll工作模式\"><a class=\"anchor\" href=\"#pll工作模式\">#</a> PLL 工作模式</h1>\n<p>进行实例说明之前先科普一下 PLL 的三种工作模式：关闭、旁路、使能</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>说明</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关闭</td>\n<td>时钟直接传入  <code>OSCCLK</code>  可以减少系统噪声和功耗.</td>\n<td><code>SYSPLLCTL1.PLLEN = 0;</code></td>\n</tr>\n<tr>\n<td>旁路</td>\n<td>上电复位或复位后， <code>PLL</code>  会进入该模式.&lt;br /&gt; 时钟信号不经过  <code>PLL</code>  而是从  <code>PLL</code>  边上绕开，但  <code>PLL</code>  处于工作状态</td>\n<td><code>SYSPLLCTL1.PLLEN = 1;</code> &lt;br /&gt; <code>SYSPLLCTL. PLLCLKEN = 0;</code></td>\n</tr>\n<tr>\n<td>使能</td>\n<td><code>PLL</code>  处于使能状态，时钟信号倍频后输入到  <code>OSCCLK</code>  中</td>\n<td><code>SYSPLLCTL1.PLLEN = 1;</code>   <code>SYSPLLCTL. PLLCLKEN = 1;</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"时钟配置\"><a class=\"anchor\" href=\"#时钟配置\">#</a> 时钟配置</h1>\n<h2 id=\"文档配置方法\"><a class=\"anchor\" href=\"#文档配置方法\">#</a> 文档配置方法</h2>\n<p>在文档 3.7.6.2 处可知，具体的时钟配置方法，大致意思如下</p>\n<ol>\n<li>选择时钟源，将对应值写入  <code>CLKSRCCTL1.OSCCLKSRCSEL</code></li>\n<li>清除  <code>SYSPLLCTL1.PLLCLKEN</code> , 将时钟源切换为旁路</li>\n<li>通过清除  <code>SYSCLKDIVSEL[ PLLSYSCLKDIV]</code>  的值，将 时钟分频设置为  <code>\\1</code>  , 保证 PLL 最快的被配置</li>\n<li>同时将积分乘法器和分数乘法器写入 SYSPLLMULT, 就可以自动使能 PLL (倍频后，需要保障主频在额定工作范围内)</li>\n<li>至少锁定 PLL 五次，次数越多成功概率越高，当然最好放一个看门狗，防止一直尝试</li>\n<li>将分频器的分频数值 配置为 比目标值大一档，便于 PLL 模块快速打到目标值</li>\n<li>保证  <code>SCRS.WDOVERRIDE</code>  在 PLL 锁定之后清除</li>\n<li><code>SYSDBGCTL.BIT_0</code>  置位，这里可以检测到 PLL 启动的错误</li>\n<li>通过置位  <code>SYSPLLCTL1.PLLCLKEN</code> , 将 PLL 作为系统时钟</li>\n<li>清除  <code>SYSDBGCTL.BIT_0</code></li>\n<li>将分配器中的数值，修改为目标数值</li>\n<li>重新为应用配置对应的 看门狗</li>\n</ol>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>PS: 这里以 使用 10M 的外部晶振生成 100M 的系统时钟为例</p>\n<p>从文档中可以看出 时钟配置的核心步骤为:</p>\n<ol>\n<li>选择时钟源</li>\n<li>选择 PLL 工作模式</li>\n<li>设定 PLL 参数</li>\n<li>设定 分频器 参数</li>\n</ol>\n<p>那么从寄存器表中可知会涉及到以下寄存器的操作</p>\n<ol>\n<li><code>ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 0x1;  // 外部晶振</code></li>\n<li><code>ClkCfgRegs.SYSCLKDIVSEL.bit.PLLEN = 0x00;// 开启PLL</code> <br />\n <code>ClkCfgRegs.SYSCLKDIVSEL.bit.PLLCLKEN = 0x00;// PLL 使能模式</code></li>\n<li><code>ClkCfgRegs.SYSPLLMULT.bit.IMULT = 0x0A;         // 10倍频</code> <br />\n <code>ClkCfgRegs.SYSPLLMULT.bit.FMULT = 0x00;         // 不使用小数</code></li>\n<li><code>ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = 0x00;// 不分频</code></li>\n</ol>\n<p>按照思路来实现代码，对应的寄存器在第三章的最后一节中可以查找<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.71qbphuqbdk0.jpg\" alt=\"image\" /></p>\n<p>这里用电平翻转来实现 和 计数 100 次来作为衡量时间的标准<br />\n虽然有些不靠谱，但是由于没有学 ePWM 的配置只能先将就一下，等以后学完之后再来更新</p>\n<p>函数库版本的 时钟初始化函数有两个，分为不同的库文件，可以按需选择<br />\n <code>SysCtl_setClock(DEVICE_SETCLOCK_CFG);</code> <br />\n <code>InitSysPll(XTAL_OSC,IMULT_40,FMULT_0,PLLCLK_BY_2);</code> <br />\n 第一个函数需要 <code>driverlib</code>  库的支持<br />\n第二个函数需要 <code>device_support</code>  库的支持<br />\n第一个参数，将所有工作模式设置了一个位，函数 对应掩码按位 &amp; 来确定是否需要开启当前模式<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6u69ov30ojg0.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2q8cn5h0u9g0.jpg\" alt=\"image\" /><br />\n 相对而言第二个函数的参数要更加容易理解一些，第一个参数使用的时钟源，第二个 <code>PLL</code>  的倍频参数，第三个分频器的 分频参数</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<h3 id=\"寄存器实现\"><a class=\"anchor\" href=\"#寄存器实现\">#</a> 寄存器实现</h3>\n<p>100M 主频</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"F28x_Project.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * @b GPIO 初始化 25pin 输出</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    GpioDataRegs<span class=\"token punctuation\">.</span>GPASET<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * @b 随机延时测试函数</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    Uint32 i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * @b 时钟初始化</pre></td></tr><tr><td data-num=\"52\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 10M * 10 / 1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>CLKSRCCTL1<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>OSCCLKSRCSEL <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 外部晶振</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>SYSPLLMULT<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>IMULT <span class=\"token operator\">=</span> <span class=\"token number\">0x0a</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 10 倍频</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>SYSPLLMULT<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>FMULT <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 不使用小数</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>SYSCLKDIVSEL<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>PLLSYSCLKDIV <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 不分频</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3v27ziqdrpk0.jpg\" alt=\"image\" /></p>\n<h3 id=\"函数库实现\"><a class=\"anchor\" href=\"#函数库实现\">#</a> 函数库实现</h3>\n<p>再生成一个 200M 的系统时钟</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"F28x_Project.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 二选一即可，第一个参数比较不容易理解，第二参数容易理解</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">SysCtl_setClock</span><span class=\"token punctuation\">(</span>DEVICE_SETCLOCK_CFG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//    InitSysPll(XTAL_OSC,IMULT_40,FMULT_0,PLLCLK_BY_2);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @b GPIO 初始化 25pin 输出</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    GpioDataRegs<span class=\"token punctuation\">.</span>GPASET<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * @b 随机延时测试函数</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Uint32 i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试效果如图</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1674374649290.66111iy769s0.jpg\" alt=\"1674374649290\" /></p>\n<p>-------2023 年 1 月 23 日 -------</p>\n<h1 id=\"使用lunchpad的注意事项\"><a class=\"anchor\" href=\"#使用lunchpad的注意事项\">#</a> 使用 LunchPad 的注意事项</h1>\n<p>最开始的时候不知道为什么 C2000Ware 的例子运行在 LunchPad 上 频率总感觉不对， 好像是是一半的感觉。 后来进到  <code>Device_init()</code>  和  <code>InitSysCtrl()</code>  两个函数 默认使用外部晶振，而且程序默认外部晶振是  <code>20MHz</code>  的，所以导致频率为原本的一半。</p>\n<p>两个函数的函数的时钟配置是在  <code>SysCtl_setClock()</code>  和  <code>InitSysPll()</code></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2kkj3spidpk0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.21rvwcj4excw.jpg\" alt=\"image\" /></p>\n<p>图中可以看到，需要定义一个  <code>_LAUNCH_F28379D</code>  的宏，所以需要在  <code>properties</code>  中去配置，进去后在  <code>C2000 Compiler &gt;&gt; Build &gt;&gt; predefined symbols</code>  中添加宏定义</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5u8cqeg1sxs0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.684cqoftduk0.jpg\" alt=\"image\" /></p>\n<p>最开始的时候不知道为什么 C2000Ware 的例子运行在 LunchPad 上 频率总感觉不对， 好像是是一半的感觉。 后来进到  <code>Device_init()</code>  和  <code>InitSysCtrl()</code>  两个函数 默认使用外部晶振，而且程序默认外部晶振是  <code>20MHz</code>  的，所以导致频率为原本的一半。</p>\n<p>两个函数的函数的时钟配置是在  <code>SysCtl_setClock()</code>  和  <code>InitSysPll()</code></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2kkj3spidpk0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.21rvwcj4excw.jpg\" alt=\"image\" /></p>\n<p>图中可以看到，需要定义一个  <code>_LAUNCH_F28379D</code>  的宏，所以需要在  <code>properties</code>  中去配置，进去后在  <code>C2000 Compiler &gt;&gt; Build &gt;&gt; predefined symbols</code>  中添加宏定义</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5u8cqeg1sxs0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1674299279513.6pgt966tdtc0.jpg\" alt=\"1674299279513\" /></p>\n<p>目前只学最简单的时钟配置，对应的的异常处理，以及外设时钟，定时器，ePWM 配置还未来得急涉足<br />\n等以后学完在来完善这篇文章</p>\n<p>如有错误之处，望大佬斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO%E8%BE%93%E5%85%A5/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO%E8%BE%93%E5%85%A5/",
            "title": "TMS320F28379D学习之旅-GPIO输入",
            "date_published": "2023-01-08T12:47:39.000Z",
            "content_html": "<h3 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h3>\n<p>本文硬件基于<em> LaunchXL-F28379D</em> 和 逻辑分析仪，软件基于 CCS 10.4 版本， 帮助文档为 C2000 的例程和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL2xpdC91Zy9zcHJ1aG04aS9zcHJ1aG04aS5wZGY/dHM9MTY3Mjk3MzMwMzA0NSZhbXA7cmVmX3VybD1odHRwcyUyNTNBJTI1MkYlMjUyRnd3dy50aS5jb20lMjUyRnByb2R1Y3QlMjUyRlRNUzMyMEYyODM3OUQ=\">官方文档</span><br />\n因为 GPIO 输入详细的说明了如何找寄存器和分析文档，所以这里就简单的对寄存和一些与 MCU 不同的地方进行简单分析，不再长篇大论的做思路分析</p>\n<h1 id=\"逻辑框图\"><a class=\"anchor\" href=\"#逻辑框图\">#</a> 逻辑框图</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.zih14yh8l6o.webp\" alt=\"image\" /></p>\n<p>老样子，先搞上原理，相较于 GPIO 输出模式，输入模式就更为复杂一些.</p>\n<p>从原理图中可以得到，输入需要配置 GPyPUD、GPyINV、GPyCTRL 和 GPyQSELn 寄存器，当然还有之前 输出模式所提及到到的寄存器。</p>\n<h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<p>所有相关的寄存器还是从文档的寄存器表以及 GPIO 章节的输入配置的的说明中分析得来</p>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPyINV</td>\n<td>是否将输入反向</td>\n<td>置 1：配置非门</td>\n</tr>\n<tr>\n<td>GPyQSELn</td>\n<td>选择输入模式</td>\n<td>2bit&lt;br /&gt;00：同步模式 &lt; br /&gt;01：3 次采样 &lt; br /&gt;10：6 次采样 &lt; br /&gt;11：异步模式</td>\n</tr>\n<tr>\n<td>GPyCTRL</td>\n<td>配置采样周期</td>\n<td>2bit&lt;br /&gt;PPLSCLK 多少分频 &lt; br /&gt; 具体情况参照手册 970 页</td>\n</tr>\n<tr>\n<td>GPyPUD</td>\n<td>设置引脚初始电平</td>\n<td>1bit&lt;br /&gt; 置 0：开启上拉模式 &lt; br /&gt; 默认为 1</td>\n</tr>\n</tbody>\n</table>\n<p>所以，如果要将 引脚 24 配置为 上拉输出模式，就需要将一下几步</p>\n<ol>\n<li>GPAMUXn 配置为 0,</li>\n<li>GPADIR 配置为 0</li>\n<li>GPAPUD 配置为 0</li>\n<li>GPyINV 配置为 0</li>\n<li>GPyQSELn 配置为 00</li>\n</ol>\n<p>不过这里需要注意一个问题</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.oet2sv5zoxs.jpg\" alt=\"image\" /></p>\n<p>在文档中对 pin 的 GPIO 输入模式 进行了特别的说明。当 引脚 工作在 GPIO 模式时，异步配置无效，会自动转换为 同步配置</p>\n<p>我在学习的过程中，参考了一些博客，但是他们都设置为异步输入模式。现在可以明确，虽然他们实现了真正的效果，但在原理层面上是错误的</p>\n<h1 id=\"实验设计\"><a class=\"anchor\" href=\"#实验设计\">#</a> 实验设计</h1>\n<h2 id=\"目的\"><a class=\"anchor\" href=\"#目的\">#</a> 目的</h2>\n<p>当 GPIO24 为低电平时，GPIO25 输出低电平；为高电平时输出 5 个方波</p>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>将 GPIO24 配置为输入模式，将 GPIO25 配置为输出模式</p>\n<p>编写函数，参数为输出次数</p>\n<p>主函数检测  <code>GpioDataReg.GPADAT.bit.GPIO24</code>  电平状态，当为低电平时，GPIO25 输出低电平</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpioInputCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 初始外设</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Device_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 初始化 引脚</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">gpioInputCfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">GPIO_readPin</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 引脚检测</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 消抖（暴力）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">GPIO_readPin</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 确认引脚检测</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">GPIO_writePin</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出低电平</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 维持 1ms</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">GPIO_togglePin</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转电平</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * 配置 GPIO24 为</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpioInputCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 配置为 GPIO 模式</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">GPIO_setQualificationMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_QUAL_SYNC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 配置为同步采样</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_DIR_MODE_IN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 配置为输入模式</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 配置为上拉模式</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 配置为输出模式</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"现象\"><a class=\"anchor\" href=\"#现象\">#</a> 现象</h3>\n<h4 id=\"gpio24-高电平\"><a class=\"anchor\" href=\"#gpio24-高电平\">#</a> GPIO24 高电平</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.e4vmh4tzxps.jpg\" alt=\"image\" /></p>\n<h4 id=\"gpio24低电平\"><a class=\"anchor\" href=\"#gpio24低电平\">#</a> GPIO24 低电平</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.o5csaybwsi8.jpg\" alt=\"image\" /></p>\n<h1 id=\"工程\"><a class=\"anchor\" href=\"#工程\">#</a> 工程</h1>\n<p>driverlib 的工程链接<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvLXl3ei9EU1AyMzc5RA==\">🐱</span>(⬅️点我)</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO/",
            "title": "TMS320F28379D学习之旅-GPIO输出",
            "date_published": "2023-01-07T12:47:39.000Z",
            "content_html": "<p>离大谱，没 commit 就回滚了，居然得重写<br />\n原本，没有怎么啰嗦的，没想到，第三次写，就越写越啰嗦了，诸位见谅</p>\n<h3 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h3>\n<p>本文硬件基于<em> LaunchXL-F28379D</em> 和 逻辑分析仪，软件基于 CCS 10.4 版本， 帮助文档为 C2000 的例程和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL2xpdC91Zy9zcHJ1aG04aS9zcHJ1aG04aS5wZGY/dHM9MTY3Mjk3MzMwMzA0NSZhbXA7cmVmX3VybD1odHRwcyUyNTNBJTI1MkYlMjUyRnd3dy50aS5jb20lMjUyRnByb2R1Y3QlMjUyRlRNUzMyMEYyODM3OUQ=\">官方文档</span></p>\n<p>在此说明，这一系列的文章主要是记录我学习思考的过程，可能会啰里啰唆</p>\n<p>个人观点，授人以鱼不如授人以渔，最后会给出完整的代码和工程的链接</p>\n<h1 id=\"逻辑框图\"><a class=\"anchor\" href=\"#逻辑框图\">#</a> 逻辑框图</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.zih14yh8l6o.webp\" alt=\"image\" /></p>\n<p>一般来说，一个处理器要配置引脚都会有两种方式：<strong>寄存器和库函数</strong>。</p>\n<p>但无论哪一种都需要去理解硬件的架构，虽然这幅框图有些复杂，但是大致的可以看出，下半部分是用于配置输出模式的。从寄存器的名称 也可以看出一些寄存器是用于控制输出值的。例如， <code>GPySET</code> 、 <code>GPyDAT</code>  等。</p>\n<p>但是要知道如何配置，还是需要去阅读文档的寄存器部分和其他部分的讲解的注意事项</p>\n<p>对应文档地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL2xpdC91Zy9zcHJ1aG04aS9zcHJ1aG04aS5wZGY/dHM9MTY3Mjk3MzMwMzA0NSZhbXA7cmVmX3VybD1odHRwcyUyNTNBJTI1MkYlMjUyRnd3dy50aS5jb20lMjUyRnByb2R1Y3QlMjUyRlRNUzMyMEYyODM3OUQ=\">链接</span>，可惜转跳不到对应章节</p>\n<h1 id=\"第一步-gpio-工作模式配置\"><a class=\"anchor\" href=\"#第一步-gpio-工作模式配置\">#</a> 第一步: GPIO 工作模式配置</h1>\n<p>在文档的 8.2 节中可以找到 GPIO 各种模式配置的概要和说明<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.kk2l7qxy8dc.jpg\" alt=\"image\" /></p>\n<p>从文档中可以得知，要将 引脚设置为 通用输入输出模式，需要配置  <code>GPyMUXn</code>  和  <code>GPyGMUXn</code> .</p>\n<p>但这里并没有给出 个寄存器 需要如何配置。不过文档最后一句给出了，默认情况下，引脚处于 通用输入输出模式</p>\n<p>翻阅文档后，找到了 复用表</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.661f7xwuu840.jpg\" alt=\"image\" /></p>\n<p>可以看出 当  <code>GPyMUXn</code>  为 0 时， <code>GPyGMUXn</code>  的值与模式配置无关.</p>\n<p>所以我们得到了第一步，将  <code>GPyMUXn</code>  设置为 0</p>\n<p>但，表格中  <code>GPyMUXn</code>  的  <code>y</code>  和  <code>n</code>  分别代表什么呢，还是得去查找一下寄存器表</p>\n<p>在找寄存器表的时候，发现 GPIO 的寄存器分为两大类， <code>GpioCtrlReg</code>  和  <code>GpioDataReg</code> , 分别用于配置 GPIO 和 控制引脚输出值</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1v85vjrekhts.jpg\" alt=\"image\" /></p>\n<p>很显然  <code>GPyMUXn</code>  属于控制寄存器，所以很轻松的就找到了 对应的寄存器</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1id6odtaqvi8.jpg\" alt=\"image\" /></p>\n<p>从图中我们可以知道， <code>GPyMUXn</code>  的  <code>y</code>  代表 GPIO 的分组，不同的芯片引脚数不同，具体多少个分组得看芯片</p>\n<p><code>n</code>  则是 1 或 2, 看地址差值为 2 , 然后从之前的复用表中得到一个引脚占 2 个数据位，而 TMS320 是地址总线和数据总线的位宽为 16, 所以得 2*16/2 = 16, 一个  <code>GPxMUXn</code>  控制 16 个引脚。这只是写文章的时候突然想到的，事实上我们可以直接看后面的说明，GPAMUX1 控制 0~15, 一看就知道是 16 个 (捂脸)</p>\n<p>事实上知道这些就可以去配置 GPIO 的工作模式了，但是问了预防万一，还是去看一眼寄存器表为好</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3laiawhj2jc0.jpg\" alt=\"image\" /></p>\n<p>事实上，也没有什么要注意的.</p>\n<p>至此，我们就得到了 GPIO 配置的第一步：将  <code>GpioCtrlReg.GPyMUxn</code>  的对应引脚设置为 0.</p>\n<h1 id=\"第二步gpio-输入输出配置\"><a class=\"anchor\" href=\"#第二步gpio-输入输出配置\">#</a> 第二步：GPIO 输入输出配置</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.7825mzefgek.jpg\" alt=\"image\" /></p>\n<p>继续阅读文档，会发现 2, 3 步基本没什么用 (对输出模式而言), ODR 寄存器是在输入模式时配置的，且默认是关闭的，所以直接到第 4 步，也是 8.2 节最后有用的地方了，配置 引脚 的输入输出方向</p>\n<p>从文档中可以知道，默认情况下 GPIO 的引脚 是输入的。并且在改变 引脚 为输出模式时，建议先写入要输出的值到 数据寄存器中，输出模式下默认输出的电平都为低电平.</p>\n<p>个人觉得官方，让我们先设置输出值是为了防止，配置为输出模式时默认的低电平导致，外部设备出现奇怪的反应。咱们现在是空载所以输出啥电平没啥区别.</p>\n<p>然后又到了翻看寄存器的时候了，还是去之前的  <code>GpioCtrReg</code>  寄存器表中查找</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6tcfn7knrnk0.jpg\" alt=\"image\" /></p>\n<p>不得不说 TI 的 Go 和 返回总表 做的是真的让人舒心</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.ota5d4p3wu8.jpg\" alt=\"image\" /></p>\n<p>从寄存器数码中可以得知 当 GPyDIR 为 1 时，引脚为输出模式</p>\n<p>至此，我们得到了第二步:  <code>GpioCtrlReg.GPADIR</code>  对应的引脚置位为 1</p>\n<h1 id=\"第三步-输出模式配置\"><a class=\"anchor\" href=\"#第三步-输出模式配置\">#</a> 第三步：输出模式配置</h1>\n<p>到了这里，8.2 节没有继续说明和单纯的输出模式相关的信息了，但是根据我们之前的配置经验可以知道 还有输出模式需要配置</p>\n<p>输出模式分为开漏和推挽输出，问题是这个寄存器叫啥呢，这就需要从框图中查看了，从框图中可以看出 这是一个名为  <code>GPyODR</code>  的寄存器。这就要再次开始翻找  <code>GpioCtrlReg</code>  的寄存器列表</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1673011610331.6xpojcdwxkc0.jpg\" alt=\"1673011610331\" /></p>\n<p>由于 TI 的人性化设计，还是很快就能找到的，从文档中可知 当 GPyODR 为 0 的时候，为正常输出.</p>\n<p>至此我们就得到了配置引脚为输出的第三步：将  <code>GpioCtrlReg.GPyODR</code>  对应的 引脚位复位</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.23fcwdjw08qo.jpg\" alt=\"image\" /></p>\n<h1 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h1>\n<p>到此我们就知道了，引脚配置为输出模式所需要的步骤:</p>\n<ol>\n<li>配置引脚为 通用输入输出模式</li>\n<li>设置引脚输出值</li>\n<li>配置引脚为 输出模式</li>\n<li>配置引脚为 推挽输出</li>\n</ol>\n<p>接下来用两种方式来实现 GPIO 配置<br />\n<strong>这里假设 我们要将 GPIO24 配置为输出模式并输出 5 个方波</strong><br />\n不过需要注意的是导入的空文件工程需要不同可能会导致 库函数不同，直接操作寄存的方式也不同<br />\n从  <code>C2000Ware_4_01_00_00\\driverlib</code>  路径下导入的工程，寄存器操作会麻烦很多，但是库函数资料多<br />\n而从  <code>C2000Ware_4_01_00_00\\device_support</code>  路径下导入则是寄存器操作更加贴近手册、便于操作，库函数体系自成一家<br />\n简单查看一下源文件就看可以知道两个工程的风格相差甚远 (说实话，两种库的底层构建都给我极大的启发)<br />\n 下面我会用两个库分别实现寄存器版本和库函数版本的操作</p>\n<h2 id=\"device_support\"><a class=\"anchor\" href=\"#device_support\">#</a> device_support</h2>\n<h3 id=\"寄存器版本\"><a class=\"anchor\" href=\"#寄存器版本\">#</a> 寄存器版本</h3>\n<p>这个当初我是直接翻看，源码看明白的，大致讲一下思路</p>\n<p>文档中给出了两个寄存器的名称，然后我直接输进去然后出现自动补全，然后就没有然后了</p>\n<p>不过，在输入寄存器名称的时候，我跳转到源码查看了一下</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1guu00zddyrk.jpg\" alt=\"image\" /></p>\n<p>找到了对应的结构体，翻阅了一下成员，发现与文档相符然后就直接操作了， <code>GpioDataReg</code>  也是同样的道理<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3ck7lv300vc0.jpg\" alt=\"image\" /></p>\n<p>根据上面的小结我们可以得到一下代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 寄存器配制引脚</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    GpioDataRegs<span class=\"token punctuation\">.</span>GPADAT<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      \t<span class=\"token comment\">// 预设 pin 输出电平</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置 pin 为通用输入输出模式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置 pin 为输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置 pin 为推挽输出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>EALLOW</code>  是用于解除写保护， <code>EDIS</code>  是用于恢复写保护的，这个在寄存器表中可以得到</p>\n<p>接下去我们要实 IO24 输出 5 个高电平，这个就比较简单啦，无非就是写个随机延时 + 上 for 循环，用  <code>GPADAT</code>  或者  <code>GPASET</code>  和  <code>GPACLEAR</code>  以及  <code>GPATOGGLE</code>  来操作</p>\n<p>这里，我选择用  <code>GPATOGGLE</code>  直接操作，能少些好多行代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 测试函数：产生 5 个方波</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转电平</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 随机延时</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"库函数版本\"><a class=\"anchor\" href=\"#库函数版本\">#</a> 库函数版本</h3>\n<p>由于没找到相关的文档，就只能直接读源码了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.412jp8t6tg40.jpg\" alt=\"image\" /><br />\n 直接翻阅  <code>Gpio.c</code>  文件，就可以看到和 GPIO 配置相关的代码了<br />\n一顿翻看函数注释后就可以知道  <code>GPIO_SetupPinMux</code>  和  <code>GPIO_SetupPinOptions</code>  可以完成对 引脚的配置<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.jaz44znv1l4.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5nrdyny0q3c0.jpg\" alt=\"image\" /><br />\n <code>GPIO_SetupPinMux</code>  是用于 将 引脚设置位 通用 I/O 模式， <code>GPIO_SetupPinOptions</code>  则是用于选择 输入输出和输出模式</p>\n<p>由此可以得到最终代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 函数配置 引脚</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinMux</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_MUX_CPU1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 31 脚配置为 GPIO</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinOptions</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_OUTPUT<span class=\"token punctuation\">,</span> GPIO_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 31 脚配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"driverlib\"><a class=\"anchor\" href=\"#driverlib\">#</a> driverlib</h2>\n<p>由于这个的寄存器版本，会涉及到阅读库函数，所以先讲库函数</p>\n<h3 id=\"库函数版本-2\"><a class=\"anchor\" href=\"#库函数版本-2\">#</a> 库函数版本</h3>\n<p>翻阅文档在 8.9.4 小结可以看到对应的 操作函数</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.nplmsp3sjww.jpg\" alt=\"image\" /></p>\n<p>当然也可以去官网下载  <code> F2837xD_DriverLib_Users_Guide.pdf</code>  , 这个文档 分模块的介绍了各个 API 和该模块对应的结构体</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.579gb2gfqxc0.jpg\" alt=\"image\" /></p>\n<p>或者直接查看  <code>device.h</code>  头文件中包含的  <code>gpio.h</code>  文件，里面对各个函数的用途及其参数进行了详细的说明<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.qpbjffv9s1s.jpg\" alt=\"image\" /></p>\n<p>途径很多，就我的习惯而言，会先从文档中获取相关函数，然后再去代码注解中去配置函数如何使用，等实现效果后再回头分析 这个函数的底层的实现<br />\n所以，这我也按这种方式介绍.</p>\n<p>首先，第一步需要操作  <code>GPyMUXn</code> , 从文档的 8.9.4 节可知，需要查看  <code>GPIO_setPinConfig</code> ,<br />\n 查看源码得到，这个函数只需要 将要配置的引脚 的引脚号传入即可  <code>GPIO_setPinConfig(24);</code> <br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1673098106423.lzgxaucs174.jpg\" alt=\"1673098106423\" /></p>\n<p>第二步，需要操作设置 引脚要输出 的值，我想输出 低电平，默认就是低电平，所以不需要配置<br />\n不过需要一开始输出高电平则，从文档中可知 可以使用  <code>GPIO_writePin</code>  和  <code>GPIO_setPortPins</code>  来将电平拉高<br />\n查看源码注释可知配置为高电平的方式  <code>GPIO_writePin(24, 1)</code>  或  <code>GPIO_setPortPins(GPIO_PORT_A, (uint32_t)1 &lt;&lt; 24)</code></p>\n<p>第三步，将 引脚 配置为输出模式，从文档得 需要操作  <code>GPIO_setDirectionMode</code> <br />\n 查看源码可知，函数需要配置两个参数：引脚号和输出模式。从注释中看可以知道，输出模式有宏定义，所以可以直接套用宏定义<br />\n得到源码  <code>GPIO_setDirectionMode(24, GPIO_DIR_MODE_OUT);</code> <br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.i3ct7366c28.jpg\" alt=\"image\" /></p>\n<p>最后一步，配置引脚的输出模式，从文档中可知，需要操作  <code>GPIO_setPadConfig</code> <br />\n 查看源码后返现，这个函数需要两个参数：引脚号和输入 | 输出模式引脚状态<br />\n有意思的是，这个函数 可以进行 输出模式的推挽开漏配置 和 输入模式的上拉和下拉配置.<br />\n 通过 宏来进行区分，当前引脚需要配置什么.(真就没有防护)<br />\n 得到代码  <code>GPIO_setPadConfig(24, GPIO_PIN_TYPE_STD);</code> <br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.53bkdzvvgqs0.jpg\" alt=\"image\" /></p>\n<p>最后得到对应的源码如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 配置为 通用输入输出模式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 配置为 输出模式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"寄存器版本-2\"><a class=\"anchor\" href=\"#寄存器版本-2\">#</a> 寄存器版本</h3>\n<p>这个库里的寄存器就没有特定的结构体了，有的是大量的枚举和强制转换，比较考验指针操作和对寄存器的熟悉程度<br />\n所以我们就需要去看一下库函数是如何实现的<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.50wivby5o4w0.jpg\" alt=\"image\" /></p>\n<p>从源码中可以看出，这的寄存器操作是通过 GPIO 的基地址强转为 指针，通过访问数组的方式来实现修改值<br />\n相关的宏 分布在  <code>gpio.h</code>  和  <code>hw_gpio.h</code>  以及  <code>hw_memmap.h</code>  中定义，具体情况自行查看</p>\n<p>这里就直接贴出源码，因为纯粹的翻看寄存器 和 算内存偏差实在是没什么可以说的了<br />\n注释里已经写的很清楚了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 其他 1 位寄存器掩码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> muxPinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// MUX 寄存器掩码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向 gpioCtrlReg 的 指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 定位 GPIOA 所有寄存器的首地址，GPIO_CTRL_REGS_STEP 是寄存器步长，一组 GPIO 寄存器的长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span> GPIOCTRL_BASE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> GPIO_CTRL_REGS_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 要被置位的引脚掩码计算</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 一个 MUX 管理 16 个引脚，所以 对 16 取余数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 乘 2 是因为一个引脚对应两个位，每过一个引脚要 移两位</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    muxPinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 设置为输出模式</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxDIR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 设置为推挽输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxODR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 设置位 通用输出模式</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 判断引脚属于 MUX1 还是 MUX2</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 为什么 + 1 而不是 +2 我也没弄懂，挠头，等弄懂再更新</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<h2 id=\"device_support-2\"><a class=\"anchor\" href=\"#device_support-2\">#</a> device_support</h2>\n<p>使用  <code>C2000Ware_4_01_00_00\\device_support</code>  空工程 导入 实现的源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"F28x_Project.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">InitSysCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化系统配置，(例如配置时钟，关闭看门狗...)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">InitGpio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 初始化 GPIO 模块</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 关中断</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    DINT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">InitPieCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 初始化中断控制器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">InitPieVectTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化中断向量表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 开中断</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    EINT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 初始化 GPIO, 二选一即可</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//Fun_GpioCfg();</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @b 测试函数：产生 5 个方波</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> * @b 函数配置 引脚</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinMux</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_MUX_CPU1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 31 脚配置为 GPIO</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinOptions</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_OUTPUT<span class=\"token punctuation\">,</span> GPIO_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 31 脚配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre> * @b 寄存器配制引脚</pre></td></tr><tr><td data-num=\"58\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"driverlib-2\"><a class=\"anchor\" href=\"#driverlib-2\">#</a> driverlib</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 系统初始化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Device_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Reg_setupOutputPin(24);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 测试函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 配置为 通用输入输出模式</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 配置为 输出模式</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 其他 1 位寄存器掩码</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> muxPinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// MUX 寄存器掩码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向 gpioCtrlReg 的 指针</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 定位 GPIOA 所有寄存器的首地址，GPIO_CTRL_REGS_STEP 是寄存器步长，一组 GPIO 寄存器的长度</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span> GPIOCTRL_BASE</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> GPIO_CTRL_REGS_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 要被置位的引脚掩码计算</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    pinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 一个 MUX 管理 16 个引脚，所以 对 16 取余数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 乘 2 是因为一个引脚对应两个位，每过一个引脚要 移两位</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    muxPinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 设置为输出模式</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxDIR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 设置为推挽输出</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxODR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 设置位 通用输出模式</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 判断引脚属于 MUX1 还是 MUX2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 为什么 + 1 而不是 +2 我也没弄懂，挠头，等弄懂再更新</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre> * @b 测试函数：产生 6 个方波</pre></td></tr><tr><td data-num=\"74\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>gpioDataRegs <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    gpioDataRegs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span> GPIODATA_BASE <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    pinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        gpioDataRegs<span class=\"token punctuation\">[</span>GPIO_GPxTOGGLE_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"现象\"><a class=\"anchor\" href=\"#现象\">#</a> 现象</h2>\n<p>产生 6 个方波</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.401bsws9ja00.jpg\" alt=\"image\" /></p>\n<h1 id=\"工程链接\"><a class=\"anchor\" href=\"#工程链接\">#</a> 工程链接</h1>\n<p>由于 device_support 移动后依赖有点难修复，所以工程文件中只有 driverlib 的工程链接<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvLXl3ei9EU1AyMzc5RA==\">🐱</span>(⬅️点我)</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95/",
            "url": "https://to-ywz.github.io/Embedded/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95/",
            "title": "树莓派默认密码无法登录",
            "date_published": "2022-12-04T14:58:49.000Z",
            "content_html": "<h2 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>最近开始捣鼓树莓派，之前那它做了个旁路由，最后发现使用率太低，准备换成 Home Assistant</p>\n<p>结果在刷 Raspberry Pi OS 的时候，发现创建  <code>wpa_supplicant.conf</code>  和  <code>SSH</code>  文件的方式完全没有用了</p>\n<p>一开始我以为是 wifi 密码大小写问题，改了几次都不行，然后接入有线网络后登录 SSH 发现，默认的账号密码都不好使</p>\n<h2 id=\"结果\"><a class=\"anchor\" href=\"#结果\">#</a> 结果</h2>\n<p>到官网查阅了一下更新记录，发现</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.7bi1e1dof300.webp\" alt=\"image\" /></p>\n<p>大致意思就是，为了安全起见删除了默认账号</p>\n<h2 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<h3 id=\"方案一推荐\"><a class=\"anchor\" href=\"#方案一推荐\">#</a> 方案一 (推荐)</h3>\n<p>使用官方的烧录软件:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZHMucmFzcGJlcnJ5cGkub3JnL2ltYWdlci9pbWFnZXJfMS43LjMuZXhl\"> 地址</span></p>\n<p>有梯子的建议关掉哦，我挂梯子反而下的慢</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4gbdvpyp1s40.webp\" alt=\"image\" /></p>\n<h3 id=\"方案二\"><a class=\"anchor\" href=\"#方案二\">#</a> 方案二</h3>\n<p>说实话，第一种方法最大的问题就是慢，磨磨唧唧的装个 64bit 版本简直的没话说（可以安心的出去吃个饭再回来看看）。</p>\n<p>所以为了解决这个问题，可以考虑通过在 SD 的启动分区中创建一个名为  <code>userconf</code>  或  <code>userconf.txt</code>  的文件，添加用户名和密码</p>\n<p>内容格式为  <code>username:encrypted-password</code> , 其中  <code>username</code>  是用户名， <code>encrypted-password</code>  是密码的加密代码 (通过 OpenSSL 生成)</p>\n<p>通过 OpenSSL 生成加密密码的指令</p>\n<pre><code>echo 'mypassword' | openssl passwd -6 -stdin\n</code></pre>\n<p>里面的  <code>'password'</code>  自行替换成自己的密码</p>\n<p>这里可以提供一个现成的</p>\n<pre><code>pi:$6$Q7yQqYO94B9fI9jn$trNI8/yvcZ8WYleaYKN5qlrzQ3AhZXLZtcNkYJlSH16xGloh2ZiM4KeAay8GSBoQ09LZI/wMOxM3qeou7uZXq.\n</code></pre>\n<p>对应的账号密码就是之前的默认账号密码  <code>pi:raspberry</code></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "Linux",
                "Raspberry Pi",
                "树莓派"
            ]
        },
        {
            "id": "https://to-ywz.github.io/tool/HAL%E5%BA%93%E5%87%BA%E7%8E%B0HAL_StatusTypeDef%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB/",
            "url": "https://to-ywz.github.io/tool/HAL%E5%BA%93%E5%87%BA%E7%8E%B0HAL_StatusTypeDef%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB/",
            "title": "HAL库出现HAL_StatusTypeDef无法识别",
            "date_published": "2022-11-22T05:14:07.000Z",
            "content_html": "<h1 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h1>\n<p>今天重新写了一个 gpio 的抽象层，结果编译的时候出现了一个 bug: <code>HAL_StatusTypeDef</code>  无法识别<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5wq5i5adpug0.jpg\" alt=\"image\" /><br />\n 一看这种问题，涉及库文件不是头文件引用错就是，无意中改动了宏.</p>\n<h1 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h1>\n<p>由于我的工程是直接从 CubeMX 中生成的所以不存在什么宏改错的问题<br />\n那就到了头文件的问题了，首先考虑自己编写的 <code>gpio</code>  文件<br />\n我的源码中只有一个头文件与 HAL 相关<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6wfazdj3i5s0.jpg\" alt=\"image\" /><br />\n 很显然有一半的可能是  <code>stm32f4xx_hal_gpio.h</code>  惹的祸.<br />\n 所以我将  <code>stm32f4xx_hal_gpio.h</code>  替换为  <code>main.h</code> <br />\n 编译后  <code>0 error 0 wraning</code> , 果然是找个的问题.<br />\n 但出现了新的问题，为啥 <code>main.h</code>  可以 而 <code>stm32f4xx_hal_gpio.h</code>  不可以<br />\n经过多次转跳，在 <code>stm32f4xx_hal_conf</code>  中，看到了了这部分 宏<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3vtw1rk50o80.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1vczkfxpj4v4.jpg\" alt=\"image\" /><br />\n 我严重怀疑，是不是因为宏开关的问题，限制了 <code>stm32f4xx_hal_gpio.h</code>  内部的一些定义<br />\n但是进入 <code>stm32f4xx_hal_gpio.h</code>  中查看找不到有宏的开关，所以我认为可能是单独的 <code>stm32f4xx_hal_gpio.h</code>  文件不足以构成完整的文件，缺少部分文件依赖而导致的.<br />\n 虽然可以这么解释但是，还是觉得怪怪的。等以后捋清楚了再回来继续更.<br />\n-------------------2023.2.8----------------------------</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "开发工具",
                "HAL库",
                "HAL库"
            ]
        },
        {
            "id": "https://to-ywz.github.io/tool/VSCode%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://to-ywz.github.io/tool/VSCode%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "VSCode使用问题记录",
            "date_published": "2022-11-22T05:14:07.000Z",
            "content_html": "<h4 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h4>\n<p>这篇博客用于记录我使用 vscode 过程中出现的问题，以及解决方法<br />\n吹爆 vscode</p>\n<h2 id=\"bracket-pair-colorizer-2-不维护\"><a class=\"anchor\" href=\"#bracket-pair-colorizer-2-不维护\">#</a> Bracket Pair Colorizer 2 不维护</h2>\n<p>今天打开我的生产力的时候发现，一大堆插件要更新 (忙于其它事情，一直没用这台电脑), 突然就发现  <code>Bracket Pair Colorizer 2</code>  它不维护了<br />\n被划了删除线，插件图标都变灰了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.7hrpunjly9c0.webp\" alt=\"image\" /><br />\n 这个插件可以把不同嵌套层级的各种类型的括号，用不同的颜色标注出来<br />\n (⊙o⊙)？我和时代脱轨了，这可是 VSCode 必装的神级插件啊，居然不维护了！没天理了啊</p>\n<p>我去了官网之后发现，不维护的原因是 VSCode 内置了这个功能，这里是作者原话</p>\n<blockquote>\n<p>This project started on 3 Dec 2016. Now 5 years later, <strong>it has become a native feature in VSCode.</strong></p>\n<p>This extension has seen wilder success then I could over ever dreamed of, with over 10M+ downloads.</p>\n<p>I'm glad so many people found it useful, however it no longer has a purpose entering 2022 so development will no longer continue.</p>\n<p>If you enjoyed it, a coffee donation is appreciated:</p>\n<p>🎁 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby1maS5jb20vYnJhY2tldHBhaXJjb2xvcml6ZXI=\">Donate</span> 🎁</p>\n</blockquote>\n<p>大致意思就是致谢然后说不再维护，然后重点是我加粗的那句 &quot;已经成为内部功能&quot;, 并且作者也给出了如何开启内部括号匹配的方法</p>\n<h3 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h3>\n<p>在 setting.json 文件中添加以下代码</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"editor.bracketPairColorization.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"editor.guides.bracketPairs\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"active\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，添加到全局的 setting 文件中肯定比较好一些<br />\n ---------2022 年 11 月 -----------------</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "开发工具",
                "VSCode",
                "VScode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32%E8%A3%B8%E6%9C%BA%E7%A7%BB%E6%A4%8DSFUD/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32%E8%A3%B8%E6%9C%BA%E7%A7%BB%E6%A4%8DSFUD/",
            "title": "STM32裸机移植SFUD",
            "date_published": "2021-12-12T14:18:49.000Z",
            "content_html": "<p><strong>写在前面:</strong> 平台: STM32F407VGT6 + W25Q64FV 8MFLASH</p>\n<h1 id=\"为什么要移植sfud\"><a class=\"anchor\" href=\"#为什么要移植sfud\">#</a> 为什么要移植 SFUD</h1>\n<p>记得当初学标准库读写 FLASH 的时候，页写入代码可长可长了，而且不同的 flash 一套检测的宏不一样，改来改去特别麻烦.<br />\n 而 SFUD 驱动只需要 FLASH 支持 SFDP 协议即可移植 SFUD 后只需实现初始化和写操作就可以愉快的使用 FLASH. 膜拜 armlink 大佬.<br />\n 是 JEDEC (固态技术协会) 制定的串行 Flash 功能的参数表标准，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamVkZWMub3JnL3N0YW5kYXJkcy1kb2N1bWVudHMvZG9jcy9qZXNkMjE2Yg==\"> 最新标准</span>，目前新生产的 flash 都是支持的只有特别老旧的芯片才不支持.<br />\n 而且 SFUD 对于不支持 SFDP 的 FLASH, 可以手动在 <code>/sfud/inc/sfud_flash_def.h</code>  文件中的参数表里添加芯片参数.<br />\n 简直就是人间神奇</p>\n<h1 id=\"源码获取\"><a class=\"anchor\" href=\"#源码获取\">#</a> 源码获取</h1>\n<p>建议直接从 github 或 gitee 上拉取，能保证代码是最新的 (3 年就写了这个库，到现在都还在更新，人与人之间的差距啊...).<br />\n 如果不想用 git 拉去的话，可以直接点击下面的阿里云链接进行下载。百度网盘这里就先不放了 (<s>嫌弃</s>)<br />\nGithub<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FybWluay9TRlVE\"> 传送门</span><br />\n Gitee<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vQXJtaW5rL1NGVUQ=\"> 传送门</span><br />\n阿里云盘<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvRGQyTlBmWE1SR3o=\">传送门</span></p>\n<h1 id=\"文件结构\"><a class=\"anchor\" href=\"#文件结构\">#</a> 文件结构</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216074525.png\" alt=\"根目录\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216074949.png\" alt=\"demo\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216074707.png\" alt=\"sfud\" /></p>\n<h1 id=\"移植\"><a class=\"anchor\" href=\"#移植\">#</a> 移植</h1>\n<p>主要是实现 <code>/sfud/port/sfud_port.c</code>  文件，其实我们只需要实现  <code>sfud_spi_port_init</code> ,  <code>spi_write_read</code> , 即可至于更多的需求，可以视 init 函数里的注释自行扩充<br />\n由于 sfud 有 debug 机制，所以需要各位自行实现 printf 的重载.</p>\n<h2 id=\"sfud_spi_port_init\"><a class=\"anchor\" href=\"#sfud_spi_port_init\">#</a> sfud_spi_port_init</h2>\n<p>其实要实现那些函数在注释中已经写的明明白白了.<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216080503.png\" alt=\"init函数实现\" /></p>\n<h3 id=\"抽个结构体出来\"><a class=\"anchor\" href=\"#抽个结构体出来\">#</a> 抽个结构体出来</h3>\n<p>为了方便处理这边用了一个结构体，用于保存用户的 SPI 信息。懒惰，我连个 Led 都想 抽象成结构体</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SPI_TypeDef <span class=\"token operator\">*</span>spix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    GPIO_TypeDef <span class=\"token operator\">*</span>cs_gpiox<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> cs_gpio_pin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> spi_user_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token class-name\">spi_user_data_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> spi_user_data spi1 <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>spix <span class=\"token operator\">=</span> SPI1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">.</span>cs_gpiox <span class=\"token operator\">=</span> GPIOB<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token punctuation\">.</span>cs_gpio_pin <span class=\"token operator\">=</span> GPIO_Pin_0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"初始化函数\"><a class=\"anchor\" href=\"#初始化函数\">#</a> 初始化函数</h3>\n<p>这里可以抽一层函数出来，写一个某个型号的 FLASH 初始化函数，然后放在 case 中调用<br />\n怎么感觉我总喜欢疯狂套娃</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_spi_port_init</span><span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flash<span class=\"token operator\">-></span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> SFUD_W25Q64FV_DEVICE_INDEX<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/* RCC 初始化 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">rcc_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/* GPIO 初始化 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">gpio_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/* SPI 外设初始化 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">spi_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/* 同步 Flash 移植所需的接口及数据 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>wr <span class=\"token operator\">=</span> spi_write_read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span> spi_lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>unlock <span class=\"token operator\">=</span> spi_unlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>user_data <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* about 100 microsecond delay */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        flash<span class=\"token operator\">-></span>retry<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">=</span> retry_delay_100us<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/* adout 60 seconds timeout */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        flash<span class=\"token operator\">-></span>retry<span class=\"token punctuation\">.</span>times <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"硬件配置\"><a class=\"anchor\" href=\"#硬件配置\">#</a> 硬件配置</h3>\n<p>这里我用的 SPI1 软件片选，引脚走的 GPIOB3, GPIOB4, GPIOB5, GPIO0 (CS)<br />\n QSPI 在 407 上没有，所以我先不写了，等我有钱搞新板子了在考虑如何实现 (其实用 HAL 库才是趋势...).</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief       SPI 时钟使能</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rcc_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix <span class=\"token operator\">==</span> SPI1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        RCC<span class=\"token operator\">-></span>APB2ENR <span class=\"token operator\">|=</span> RCC_APB2ENR_SPI1EN<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// SPI  Clock Enable</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        RCC<span class=\"token operator\">-></span>AHB1ENR <span class=\"token operator\">|=</span> RCC_AHB1ENR_GPIOBEN<span class=\"token punctuation\">;</span> <span class=\"token comment\">// GPIO Clock Enable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @brief       配置 SPI 的 GPIO</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">gpio_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix <span class=\"token operator\">==</span> SPI1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/* SCK:PB3  MISO:PB4  MOSI:PA5 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_5 <span class=\"token operator\">|</span> GPIO_Pin_4 <span class=\"token operator\">|</span> GPIO_Pin_3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_AF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_OType <span class=\"token operator\">=</span> GPIO_OType_PP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource3<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource4<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource5<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/* CS: PB0 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_OUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">GPIO_SetBits</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_Pin_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * @brief       配置 SPI 工作模式</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    SPI_InitTypeDef SPI_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_Direction <span class=\"token operator\">=</span> SPI_Direction_2Lines_FullDuplex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SPI 设置为双线双向全双工</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_Mode <span class=\"token operator\">=</span> SPI_Mode_Master<span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 设置为主 SPI</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_DataSize <span class=\"token operator\">=</span> SPI_DataSize_8b<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// SPI 发送接收 8 位帧结构</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CPOL <span class=\"token operator\">=</span> SPI_CPOL_Low<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 时钟悬空低</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CPHA <span class=\"token operator\">=</span> SPI_CPHA_1Edge<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 数据捕获于第一个时钟沿</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_NSS <span class=\"token operator\">=</span> SPI_NSS_Soft<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 内部  NSS 信号由 SSI 位控制</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_BaudRatePrescaler <span class=\"token operator\">=</span> SPI_BaudRatePrescaler_2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 波特率预分频值为 2</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_FirstBit <span class=\"token operator\">=</span> SPI_FirstBit_MSB<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 数据传输从 MSB 位开始</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CRCPolynomial <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// CRC 值计算的多项式，不使能 CRC 有效位配置啥都无所谓</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">SPI_I2S_DeInit</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">SPI_Init</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>SPI_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">SPI_CalculateCRC</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> DISABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">SPI_Cmd</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我觉得，这份代码  <code>rcc_configuration</code>  和  <code>gpio_configuration</code>  可以再抽一层出来，在里面放置一个  <code>switch case</code>  调用 SPIx (x 由片上 SPI 数量决定) 的初始化.<br />\n 但是现在在做项目，也只可能有一个 FLASH, 只能先这样子了。等项目结束我再更新一下.</p>\n<h2 id=\"spi-锁\"><a class=\"anchor\" href=\"#spi-锁\">#</a> SPI 锁</h2>\n<p>这一个可以实现也可以不实现，主要看自己的需求，如果的写的数据很大我建议还是实现一下.<br />\n 其实就是关中断这种暴力的方法而已...</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">__disable_irq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_unlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">__enable_irq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"延时\"><a class=\"anchor\" href=\"#延时\">#</a> 延时</h2>\n<p>这个是注释里要求一定需要实现的，我这里走的是  <code>systick</code>  实现的 ys 级延时。反正 100us 左右即可，可以自行实现 (大不了 count--, 狗头).</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retry_delay_100us</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// uint32_t delay = 120;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// while (delay--)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     ;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">delayus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"spi_write_read\"><a class=\"anchor\" href=\"#spi_write_read\">#</a> spi_write_read</h2>\n<p>函数接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> sfud_err <span class=\"token function\">spi_write_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// sfud</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token class-name\">size_t</span> write_size<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>read_buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                <span class=\"token class-name\">size_t</span> read_size<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好多参数..., 其实实现起来和我们直接写自己实现 连续写 spi 没什么区别.<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216084441.png\" alt=\"上面代码里的强转转的是这个结构体里的void 类型\" /><br />\n唯一要注意的只有这个地方，获取 sfud 的指向的 spi 设备，如上所示.<br />\n 其他的无非就，先写入有效数据，然后再写入无效数据作为数据读取。一共写入 read_size+write_size 字节的数据</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief               SPI 写入后读出数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param spi           SPI 结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param write_buf     要写入的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param write_size    写入数据大小</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param read_buf      要读出的数据的缓存</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @param read_size     要读出的数据大小</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return sfud_err     执行结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> sfud_err <span class=\"token function\">spi_write_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> write_size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>read_buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                               <span class=\"token class-name\">size_t</span> read_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> send_data<span class=\"token punctuation\">,</span> read_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">spi_user_data_t</span> spi_dev <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span><span class=\"token punctuation\">)</span>spi<span class=\"token operator\">-></span>user_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">SFUD_ASSERT</span><span class=\"token punctuation\">(</span>write_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">SFUD_ASSERT</span><span class=\"token punctuation\">(</span>read_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">GPIO_ResetBits</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>cs_gpiox<span class=\"token punctuation\">,</span> spi_dev<span class=\"token operator\">-></span>cs_gpio_pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/* 开始读写数据 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> write_size <span class=\"token operator\">+</span> read_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/* 先写缓冲区中的数据到 SPI 总线，数据写完后，再写 dummy (0xFF) 到 SPI 总线 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            send_data <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>write_buf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            send_data <span class=\"token operator\">=</span> SFUD_DUMMY_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/* 发送数据 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        retry_times <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SPI_I2S_GetFlagStatus</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> SPI_I2S_FLAG_TXE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">SFUD_RETRY_PROCESS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">goto</span> exit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">SPI_I2S_SendData</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> send_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        retry_times <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SPI_I2S_GetFlagStatus</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> SPI_I2S_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">SFUD_RETRY_PROCESS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">goto</span> exit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        read_data <span class=\"token operator\">=</span> <span class=\"token function\">SPI_I2S_ReceiveData</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">/* 写缓冲区中的数据发完后，再读取 SPI 总线中的数据到读缓冲区 */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token operator\">*</span>read_buf<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> read_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>exit<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">GPIO_SetBits</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>cs_gpiox<span class=\"token punctuation\">,</span> spi_dev<span class=\"token operator\">-></span>cs_gpio_pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>除了这些之外，还需要自行配置一下  <code>/sfud/inc/sfud_cfg.h</code>  文件<br />\n选择是否使用 SFDP 协议，是否使用 FLASH 信息表，和定义自己所用的 FLASH 对应的枚举变量以及结构体信息<br />\n我的配置如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// #define SFUD_DEBUG_MOD             // 不使用 SFUD debug 模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_USING_SFDP</span>               <span class=\"token comment\">// 使用 SFDP</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_USING_FLASH_INFO_TABLE</span>   <span class=\"token comment\">// 使用 FLASH 信息表</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// FLASH 芯片型号枚举</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SFUD_W25Q64FV_DEVICE_INDEX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// FLASH 相关信息和 驱动的硬件 SPI</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_FLASH_DEVICE_TABLE</span>                                                  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">[</span>SFUD_W25Q64FV_DEVICE_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> </span><span class=\"token string\">\"W25Q64FV\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> </span><span class=\"token string\">\"SPI1\"</span><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><h1 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h1>\n<h2 id=\"sfud_init\"><a class=\"anchor\" href=\"#sfud_init\">#</a> sfud_init</h2>\n<p>函数原型如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>初始化函数，这个放在主函数调用判断一下就好了，成功会返回  <code>SFUD_SUCCESS</code> <br />\n 如果开启了 DEBUG 的宏，会打印一些详细信息.<br />\n 这个初始化会初始化设备列表中的所有 flash 驱动，如果指向驱动一个 flash 设备，可以考虑使用  <code>sfud_device_init</code></p>\n<h2 id=\"sfud_read\"><a class=\"anchor\" href=\"#sfud_read\">#</a> sfud_read</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将数据从 FLASH 中读出，没啥好说，传个 flash 设备进去，给个地址，缓存空间，要读取的数据量没了</p>\n<h2 id=\"sfud_erase\"><a class=\"anchor\" href=\"#sfud_erase\">#</a> sfud_erase</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>擦除函数，用于将 FLASH 里的数据擦除为 dummy 的值</p>\n<h2 id=\"sfud_write\"><a class=\"anchor\" href=\"#sfud_write\">#</a> sfud_write</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>单纯的写函数，目前我也不知道有什么用，不擦除再写基本上很难保证数据的稳定性和准确性</p>\n<h2 id=\"sfud_erase_write\"><a class=\"anchor\" href=\"#sfud_erase_write\">#</a> sfud_erase_write</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数和 write 函数不同的地方在于，先写后擦，能实现数据写入 有效的写入 FLASH</p>\n<h2 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_DEMO_TEST_BUFFER_SIZE</span> <span class=\"token expression\"><span class=\"token number\">2048</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> sfud_demo_test_buf<span class=\"token punctuation\">[</span>SFUD_DEMO_TEST_BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sfud_demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 在操作之前需要获取 flash 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash <span class=\"token operator\">=</span> <span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 初始化 spi  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">sfud_demo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sfud_demo_test_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sfud_demo_test_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* 数据填充 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/* 擦除扇区 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase the %s flash data finish. Start from 0x%08X, size is %ld.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/* 写入数 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_write</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write the %s flash data finish. Start from 0x%08X, size is %ld.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 读出数据 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read the %s flash data success. Start from 0x%08X, size is %ld. The data is:\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08X] \"</span><span class=\"token punctuation\">,</span> addr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/* 数据校验 */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read and check write data has an error. Write the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The %s flash test is success.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h1>\n<p>目前我也就只知道这些了，等以后使用的时候出现什么 bug 再来琢磨琢磨</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "SFUD",
                "FLASH,SFUD"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32F4%E8%A3%B8%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32F4%E8%A3%B8%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/",
            "title": "STM32F4裸机 FatFs 移植",
            "date_published": "2021-12-07T23:05:01.000Z",
            "content_html": "<h1 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h1>\n<p><strong>写在前面:</strong> 这里目前只实现 SFUD+ff14b 基于标准库，板载 W25Q64FV 8M 的 FLASH.</p>\n<h2 id=\"维基百科介绍\"><a class=\"anchor\" href=\"#维基百科介绍\">#</a> 维基百科介绍</h2>\n<p>计算机的文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念，用户使用文件系统来保存数据不必关心数据实际保存在硬盘（或者光盘）的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。在写入新数据之前，用户不必关心硬盘上的那个块地址没有被使用，硬盘上的存储空间管理（分配和释放）功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中.</p>\n<p>其实这么长一段话的核心就在最前那里，文件系统其实就是一个抽象的数据类型。位于物理存储介质之上.<br />\n 与一般的 ADT 相比文件系统仅仅是更加庞大了，无非就是 一堆数据类型加上增删查改.<br />\n 话是这么说，我是写不出来这么庞大的 ADT, 狗头.</p>\n<h2 id=\"个人理解\"><a class=\"anchor\" href=\"#个人理解\">#</a> 个人理解</h2>\n<p>言归正传，当我们使用文件系统时，数据都以文件的形式存储.<br />\n 如果想要留下一块空间的话那么建议手动限制一下 flash 大小或者做一下首地址偏移.</p>\n<p>写入新文件时，先在目录中创建一个文件索引，它指示了文件存放的物理地址，再把数据存储到该地址中<br />\n需要读取数据时，可以从该目录中找到该文件的索引，进而在相应的地址中读取数据<br />\n文件系统的存在使我们在存储数据时，不再是简单的向某个物理地址直接读写，而是要遵循它的读写格式<br />\n一个完整的文件经过 逻辑转换 可能被分成 <strong>多段</strong> 并存储到<strong>不连续</strong>的物理地址，以及使用目录或链表的方式来获知下一段的位置</p>\n<p>简单来说，这个转换部分可以理解为，当我们需要写入一段数据时，由它来求解向什么物理地址写入数据、以什么格式写入，以及写入一些原始数据以外的信息 (如目录)<br />\n 类似于我们去寄快递，逻辑层就是快递站。你把东西给快递之后，你和收件人不需要知道快递是怎么到的，只需要知道目的地址就好.<br />\n 这个 &quot;快递站&quot; 的代码实现，我们习惯称之为文件系统</p>\n<h2 id=\"搭载文件系统的动机\"><a class=\"anchor\" href=\"#搭载文件系统的动机\">#</a> 搭载文件系统的动机</h2>\n<p>为了让单片机能够更好的和服务器进行交互，我打算移植一个文件系统到 STM32F4 上.<br />\n 板子上自带了一块 8M 的 FLASH, 我打算让文件系统彻底接管这块 FLASH, 如果以后有可能的话让 文件系统接管片上 FLASH.</p>\n<h2 id=\"为什么是fatfs\"><a class=\"anchor\" href=\"#为什么是fatfs\">#</a> 为什么是 Fatfs</h2>\n<p>嘿嘿，我只知道 FatFs, 所以我选了它，但是后面我找了一下还有不少的针对于 FLASH 的文件系统.<br />\n 例如，esayflash, jffs2, yaffs, Cramfs, SPIFFS... 但是这些都是针对于 FLASH 的文件系统，而 Fatfs 则是可以兼容各种设备的较为完善的文件系统，便于以后扩展.<br />\n(害，说那么多，其实主要还是只知道 Fatfs)</p>\n<h1 id=\"fatfs\"><a class=\"anchor\" href=\"#fatfs\">#</a> FatFS</h1>\n<p>FATFS 是面向小型嵌入式系统的一种通用的 FAT 文件系统，它由 <code>ANSI C</code>  语言编写且完全独立于底层的 I/O 介质，因此它可以很容易的不加修改的移植到其他处理器当中，就可以利用文件系统的各种函数，对已格式化的 SD 卡的文件进行读写</p>\n<h2 id=\"源码获取\"><a class=\"anchor\" href=\"#源码获取\">#</a> 源码获取</h2>\n<p>可以去 Fatfs 官网自行下载<span class=\"exturl\" data-url=\"aHR0cDovL2VsbS1jaGFuLm9yZy9mc3cvZmYvMDBpbmRleF9lLmh0bWw=\">传送门</span><br />\n也可以在这里走阿里云盘下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvUGdXbUJGMlVNbVE=\">传送门</span><br />\n个人建议是去官网下载，我这里只有 ff14b 版本的 fatfs, 以后可能会有新的，我不一定会同步到阿里云盘</p>\n<h2 id=\"文件分布\"><a class=\"anchor\" href=\"#文件分布\">#</a> 文件分布</h2>\n<p>document 文件<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/uHxdMZ3lXSs69h5.png\" alt=\"document\" /><br />\nsource 文件夹文件分布<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/oUdQ1Jl47jf98XD.png\" alt=\"FatFs_source\" /></p>\n<h2 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FRESULT <span class=\"token function\">f_open</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> BYTE mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">/* 打开或创建文件 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FRESULT <span class=\"token function\">f_close</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 关闭文件 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FRESULT <span class=\"token function\">f_read</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buff<span class=\"token punctuation\">,</span> UINT btr<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">/* 读取文件 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FRESULT <span class=\"token function\">f_write</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buff<span class=\"token punctuation\">,</span> UINT btw<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 写入文件 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FRESULT <span class=\"token function\">f_opendir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 打开文件夹 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>FRESULT <span class=\"token function\">f_closedir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 关闭文件夹 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>FRESULT <span class=\"token function\">f_readdir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">,</span> FILINFO<span class=\"token operator\">*</span> fno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 读取文件夹 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FRESULT <span class=\"token function\">f_mkdir</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 创建文件夹 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>FRESULT <span class=\"token function\">f_unlink</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 删除存在的文件或文件夹 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FRESULT <span class=\"token function\">f_getfree</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> DWORD<span class=\"token operator\">*</span> nclst<span class=\"token punctuation\">,</span> FATFS<span class=\"token operator\">*</span><span class=\"token operator\">*</span> fatfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 获取当前卷剩余空间 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>FRESULT <span class=\"token function\">f_rename</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path_old<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path_new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 重命名文件或文件夹 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>FRESULT <span class=\"token function\">f_chdir</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 更改当前路径 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>FRESULT <span class=\"token function\">f_mount</span> <span class=\"token punctuation\">(</span>FATFS<span class=\"token operator\">*</span> fs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> BYTE opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">/* 挂载或卸载逻辑卷 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FRESULT <span class=\"token function\">f_mkfs</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> MKFS_PARM<span class=\"token operator\">*</span> opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> work<span class=\"token punctuation\">,</span> UINT len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 格式化 (创建) FAT 卷 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f_size</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>obj<span class=\"token punctuation\">.</span>objsize<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t\t\t</span><span class=\"token comment\">/* 获取当前文件大小 */</span></span></pre></td></tr></table></figure><h2 id=\"底层驱动\"><a class=\"anchor\" href=\"#底层驱动\">#</a> 底层驱动</h2>\n<p>一般来说，我们移植的时候只需要实现一下 iodisk 中的这些个函数即可，如果需要加时间戳，自行实现，这里我不用 rtc 所以不实现时间戳<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/9roNcgKR1qdPMGS.png\" alt=\"iodisk.h\" /></p>\n<h3 id=\"sfud\"><a class=\"anchor\" href=\"#sfud\">#</a> SFUD</h3>\n<p>这里使用了 一个万能的 FLASH 驱动组件 SFUD. 避免以后修改 FLASH 芯片的时候，还得到处去改也写入的相关方法.<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/QgGcBTos6twlqIe.png\" alt=\"sfud\" /><br />\n 这里不详细说明 SFUD 的移植，只列出一下用到的函数<br />\n关于 sfud 的移植可以参考我另一篇博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0VtYmVkZGVkL1NUTTMyL1NUTTMyJUU4JUEzJUI4JUU2JTlDJUJBJUU3JUE3JUJCJUU2JUE0JThEU0ZVRC8=\">传送门</span> (其实直接去 github 上看人家的 readme 就可以了)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用于 disk_init</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sfud_err <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用于获取 要写入的 flash 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sfud_flash <span class=\"token operator\">*</span><span class=\"token function\">sfud_get_device</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 用于 disk_read 函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sfud_err <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 用于 disk_write 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"disk_initialize\"><a class=\"anchor\" href=\"#disk_initialize\">#</a> disk_initialize</h3>\n<p>对接了 SUFD 这一步还是很好实现的。直接 sfud_init 后判断 是否成功即可<br />\n这边为了兼容性和便欲拓展以及减少代码量，额外加了一层 本地函数函数，下面的所有接口实现基本都是这个逻辑<br />\n代码实现如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DSTATUS <span class=\"token function\">disk_initialize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tsfud_norflash0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_PARERR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @brief \t\t\tFLASH 初始化函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @return FRESULT \t初始化结果</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_INT_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_initialize ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_INT_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_write\"><a class=\"anchor\" href=\"#disk_write\">#</a> disk_write</h3>\n<p>这里需要注意几点</p>\n<ol>\n<li>在写 flash 之前需要先<strong>擦除</strong>，所以我们不使用  <code>sfud_write</code>  而是使用  <code>sfud_erase_write</code> , 这样子就不需要自行去实现先擦后写的逻辑了</li>\n<li>对于 文件系统 来说，操作以扇区为单位，而我们的 flash 的读写操作一般以 Byte 为单位，所以需要自行乘上扇区大小</li>\n</ol>\n<p>代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DRESULT <span class=\"token function\">disk_write</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Data to be written */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUINT count\t\t  <span class=\"token comment\">/* Number of sectors to write */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @brief \t\t\tFLASH 写函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param buff \t\t要写入的数组</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @param count \t要写入的扇区数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param sector \t要写入的扇区的起始地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @return FRESULT \t写操作结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 这里需要对扇区数量转为字节数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_write ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_read\"><a class=\"anchor\" href=\"#disk_read\">#</a> disk_read</h3>\n<p>写函数需要注意的地方和读函数一致，别最后读写了半天都只在读写一个字节</p>\n<p>代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DRESULT <span class=\"token function\">disk_read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tBYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Data buffer to store read data */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUINT count\t  <span class=\"token comment\">/* Number of sectors to read */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @brief \t\t\tFLASH 读函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param buff \t\t读出的数据</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @param count\t\t要读出的扇区数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param sector\t数据所在地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @return FRESULT\t读取结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_read ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_ioctl\"><a class=\"anchor\" href=\"#disk_ioctl\">#</a> disk_ioctl</h3>\n<p>这里是 FatFs 获取 设备扇区大小，扇区数量和 块数量的的地方。对于 FLASH 的扇区其实手册里都有。不过其实我们可以自行划分<br />\n例如我的代码，8M 的 FLASH 分为 8 个块，一个块 2048 个扇区，一个扇区 512 字节，整个 FLASH 分为 2048*8 个扇区 一共 8M,<br />\n 也可以按 FLASH 手册上写的 一个 FLASH 1 个块，2048 个扇区，一个扇区 4096 字节.<br />\n 这里如果使用 超过 512 大小的扇区 自行去 ffconf.h 中修改 FF_SS_MAX 的宏<br />\n代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">/* 2048*4096/1024/1024=8(MB) */</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DRESULT <span class=\"token function\">disk_ioctl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Physical drive nmuber (0..) */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tBYTE cmd<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Control code */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff <span class=\"token comment\">/* Buffer to send/receive control data */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tDRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!disk_ioctl ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @brief \t\t\t获取 FLASH 扇区 块 数据</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @param cmd \t\t获取指令</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * @param buff \t\t对应数组</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @return DRESULT \t指令执行结果</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">case</span> CTRL_SYNC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_COUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区数量 */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_COUNT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// W25Q64 有 2048 个大小为 4K 的扇区</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区大小 */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//spi flash 的扇区大小是 4096 Bytes</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_BLOCK_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">/* 块大小 */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_BLOCK_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_status\"><a class=\"anchor\" href=\"#disk_status\">#</a> disk_status</h3>\n<p>这个就很简单了，想实现就实现，不想实现就直接  <code>return FR_OK;</code>  就好了<br />\n如果想实现 可以使用 sfud_read 读取一下 flash id, 判断一下作为返回值即可<br />\n代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DSTATUS <span class=\"token function\">disk_status</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEV_FLASH <span class=\"token operator\">==</span> pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回 OK 即可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"iodiskc-文件之外的东西\"><a class=\"anchor\" href=\"#iodiskc-文件之外的东西\">#</a> iodisk.c 文件之外的东西</h3>\n<p>fatfs 还有一个 ffconf.h 文件，这里会涉及到 扇区大小，读写功能，以及一些函数的禁用和启用</p>\n<p>这里只列出常用的，贴 code 太占空间</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_FS_READONLY</span>\t<span class=\"token expression\"><span class=\"token number\">0</span>       </span><span class=\"token comment\">// 只读标识符，如果你的文件系统只需要实现读功能就 改为 1, disk write 等函数就不会被编译</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_MKFS</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 使用格式化函数，我们 FLASH 就必须使用这个函数，因为我们只能通过 FatFs 来格式化 FLASH</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_LABEL</span>\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 是否使用卷标签，这个看个人习惯，FLASH 就一块，也无所谓也不用标签</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_STRFUNC</span>\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 使用 f_putc, f_getc 等函数，更详细的 子级宏定义，自行查看文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_CODE_PAGE</span>\t<span class=\"token expression\"><span class=\"token number\">932</span>     </span><span class=\"token comment\">// 文件名编码格式，默认万国码</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_LFN</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 是否启用长文件名</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MAX_LFN</span>\t\t<span class=\"token expression\"><span class=\"token number\">255</span>     </span><span class=\"token comment\">// 文件名最大长度</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_VOLUMES</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 文件系统 物理卷 的数据量，现在只有一个 FLASH 所以是 1</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MIN_SS</span>\t\t<span class=\"token expression\"><span class=\"token number\">512</span>     </span><span class=\"token comment\">// 扇区最小大小，这个一般不变动</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MAX_SS</span>\t\t<span class=\"token expression\"><span class=\"token number\">4096</span>    </span><span class=\"token comment\">// 扇区最大大小，更具情况自行调整</span></span></pre></td></tr></table></figure><h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<p>整个  <code>iodisk.c</code>  文件如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* Low level disk I/O module SKELETON for FatFs     (C)ChaN, 2019        */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* If a working storage control module is available, it should be        */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* attached to the FatFs via a glue function rather than modifying it.   */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* This is an example of glue functions to attach various exsisting      */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* storage control modules to the FatFs module with a defined API.       */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ff.h\"</span>\t\t<span class=\"token comment\">/* Obtains integer types */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"diskio.h\"</span> <span class=\"token comment\">/* Declarations of disk functions */</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sfud.h\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* Definitions of physical drive number for each drive */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// #define DEV_RAM 0 /* Example: Map Ramdisk to physical drive 0 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEV_FLASH</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// #define DEV_MMC 1 /* Example: Map MMC/SD card to physical drive 1 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// #define DEV_USB 2 /* Example: Map USB MSD to physical drive 2 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// FLASH 划分扇区和块</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// FLASH 大小 = FLASH_SECTOR_SIZE * FLASH_SECTOR_COUNT</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// DBEUG 信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_DSTRING_FORMAT</span> <span class=\"token string\">\"[FATFS]: %s. \\r\\n\"</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_FSTRING_FORMAT</span> <span class=\"token string\">\"[FATFS]: %s. (Error Code: %d(%s))\\r\\n\"</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEBUG_LOG_F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>DEBUG_FSTRING_FORMAT<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> FR_Table<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEBUG_LOG_D</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>DEBUG_DSTRING_FORMAT<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/* static gloal variable */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 错误状态码</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>FR_Table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token string\">\"FR_OK: Succeeded\"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (0) Succeeded */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token string\">\"FR_DISK_ERR: A hard error occurred in the low level disk I/O layer \"</span><span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">/* (1) A hard error occurred in the low level disk I/O layer */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INT_ERR: Assertion failed \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (2) Assertion failed */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_READY: The physical drive cannot work \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (3) The physical drive cannot work */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_FILE: Could not find the file \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (4) Could not find the file */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_PATH: Could not find the path \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (5) Could not find the path */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_NAME: The path name format is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t <span class=\"token comment\">/* (6) The path name format is invalid */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token string\">\"FR_DENIED: Access denied due to prohibited access or directory full \"</span><span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">/* (7) Access denied due to prohibited access or directory full */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token string\">\"FR_EXIST: Access denied due to prohibited access \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t <span class=\"token comment\">/* (8) Access denied due to prohibited access */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_OBJECT: The file/directory object is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t <span class=\"token comment\">/* (9) The file/directory object is invalid */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token string\">\"FR_WRITE_PROTECTED: The physical drive is write protected \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (10) The physical drive is write protected */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_DRIVE: The logical drive number is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t <span class=\"token comment\">/* (11) The logical drive number is invalid */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_ENABLED: The volume has no work area \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (12) The volume has no work area */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_FILESYSTEM: There is no valid FAT volume \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (13) There is no valid FAT volume */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"FR_MKFS_ABORTED: The f_mkfs() aborted due to any problem \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (14) The f_mkfs() aborted due to any parameter error */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token string\">\"FR_TIMEOUT: Could not get a grant to access the volume within defined period \"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* (15) Could not get a grant to access the volume within defined period */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token string\">\"FR_LOCKED: The operation is rejected according to the file sharing policy \"</span><span class=\"token punctuation\">,</span>\t <span class=\"token comment\">/* (16) The operation is rejected according to the file sharing policy */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_ENOUGH_CORE: LFN working buffer could not be allocated \"</span><span class=\"token punctuation\">,</span>\t\t\t\t <span class=\"token comment\">/* (17) LFN working buffer could not be allocated */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token string\">\"FR_TOO_MANY_OPEN_FILES: Number of open files > FF_FS_LOCK \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (18) Number of open files > _FS_SHARE */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_PARAMETER: Given parameter is invalid \"</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (19) Given parameter is invalid */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">//flash 设备实例</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">static</span> sfud_flash <span class=\"token operator\">*</span>sfud_norflash0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">/* Get Drive Status                                                      */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>DSTATUS <span class=\"token function\">disk_status</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEV_FLASH <span class=\"token operator\">==</span> pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回 OK 即可</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">/* Inidialize a Drive                                                    */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>DSTATUS <span class=\"token function\">disk_initialize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\tsfud_norflash0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_PARERR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"108\"></td><td><pre> * @brief \t\t\tFLASH 初始化函数</pre></td></tr><tr><td data-num=\"109\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"110\"></td><td><pre> * @return FRESULT \t初始化结果</pre></td></tr><tr><td data-num=\"111\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_INT_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_initialize ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_INT_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">/* Read Sector(s)                                                        */</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>DRESULT <span class=\"token function\">disk_read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tBYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Data buffer to store read data */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tUINT count\t  <span class=\"token comment\">/* Number of sectors to read */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"155\"></td><td><pre> * @brief \t\t\tFLASH 读函数</pre></td></tr><tr><td data-num=\"156\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"157\"></td><td><pre> * @param buff \t\t读出的数据</pre></td></tr><tr><td data-num=\"158\"></td><td><pre> * @param count\t\t要读出的扇区数量</pre></td></tr><tr><td data-num=\"159\"></td><td><pre> * @param sector\t数据所在地址</pre></td></tr><tr><td data-num=\"160\"></td><td><pre> * @return FRESULT\t读取结果</pre></td></tr><tr><td data-num=\"161\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_read ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token comment\">/* Write Sector(s)                                                       */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FF_FS_READONLY <span class=\"token operator\">==</span> <span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>DRESULT <span class=\"token function\">disk_write</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Data to be written */</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\tUINT count\t\t  <span class=\"token comment\">/* Number of sectors to write */</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"206\"></td><td><pre> * @brief \t\t\tFLASH 写函数</pre></td></tr><tr><td data-num=\"207\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"208\"></td><td><pre> * @param buff \t\t要写入的数组</pre></td></tr><tr><td data-num=\"209\"></td><td><pre> * @param count \t要写入的扇区数量</pre></td></tr><tr><td data-num=\"210\"></td><td><pre> * @param sector \t要写入的扇区的起始地址</pre></td></tr><tr><td data-num=\"211\"></td><td><pre> * @return FRESULT \t写操作结果</pre></td></tr><tr><td data-num=\"212\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_write ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token comment\">/* Miscellaneous Functions                                               */</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>DWORD <span class=\"token function\">get_fattime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token comment\">// 暂不添加时间获取，需要的话就把 RTC 数据传入这里 */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token comment\">// DWORD time; /* 返回当前时间戳 */</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre></pre></td></tr><tr><td data-num=\"240\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>DRESULT <span class=\"token function\">disk_ioctl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Physical drive nmuber (0..) */</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\tBYTE cmd<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Control code */</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff <span class=\"token comment\">/* Buffer to send/receive control data */</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\tDRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!disk_ioctl ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"265\"></td><td><pre> * @brief \t\t\t获取 FLASH 扇区 块 数据</pre></td></tr><tr><td data-num=\"266\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"267\"></td><td><pre> * @param cmd \t\t获取指令</pre></td></tr><tr><td data-num=\"268\"></td><td><pre> * @param buff \t\t对应数组</pre></td></tr><tr><td data-num=\"269\"></td><td><pre> * @return DRESULT \t指令执行结果</pre></td></tr><tr><td data-num=\"270\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t<span class=\"token keyword\">case</span> CTRL_SYNC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_COUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区数量 */</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_COUNT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// W25Q64 有 2048 个大小为 4K 的扇区</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区大小 */</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//spi flash 的扇区大小是 4096 Bytes</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_BLOCK_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>\t\t<span class=\"token comment\">/* 块大小 */</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_BLOCK_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试函数\"><a class=\"anchor\" href=\"#测试函数\">#</a> 测试函数</h2>\n<p>写的比较随意，因为一些特殊原因没有做判断处理，直接流水，自行修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FATFS fs<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Filesystem object */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FATFS <span class=\"token operator\">*</span>fsptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FIL fil<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* File object */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FRESULT res<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* API result code */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>UINT bw<span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* Bytes written */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>BYTE work<span class=\"token punctuation\">[</span>FF_MAX_SS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Work area (larger is better for processing time) */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>BYTE mm<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is file system test file from the STM32F407VGT6.\\r\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">flash_data_display</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> flash_add_start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08X] \"</span><span class=\"token punctuation\">,</span> flash_add_start <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">file_system_test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">char</span> fileName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0:6\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_mkfs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 格式化</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 挂载</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_getfree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>br<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 获取空余空间</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The free space: %dKB.\\r\\n\"</span><span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// 打开文件准备写入，没有文件就创建，有文件就覆盖</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> FA_CREATE_ALWAYS <span class=\"token operator\">|</span> FA_WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//FATFS_LOG(res);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">//res = f_unlink(fileName);</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> mm<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrote %d bytes to %s file.\\r\\n\"</span><span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// 写入完毕，关闭文件</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">f_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// 打开文件准备读取</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> FA_READ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// 读出</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> readBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d bytes were read from %s.\\r\\n\"</span><span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\r\\n\"</span><span class=\"token punctuation\">,</span> readBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token function\">f_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h1>\n<p>等有空我去琢磨琢磨 FatFs 的源码以及各个 API 的使用方法<br />\n至于标准库直接对接 FatFs, 我觉得还是没有必要了，HAL 都不必实现，直接套 SFUD 即可<br />\n找个时间我把 标准库 和 HAL 库 一致 SFUD 的教程写了</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "文件系统",
                "fatfs",
                "文件系统,fatfs"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E5%A3%B0%E6%98%8E%E5%8F%8D%E6%80%9D/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E5%A3%B0%E6%98%8E%E5%8F%8D%E6%80%9D/",
            "title": "C语言声明反思",
            "date_published": "2021-10-26T12:45:01.000Z",
            "content_html": "<p>对于  <code>char * const *(*next)();</code>  这种数据类型分析起来特别麻烦，在这里先捋一下</p>\n<h1 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h1>\n<p>A. 声明先从名字开始读取，然后按照优先级顺序依次读取.<br />\nB. 优先级从高到低:</p>\n<ol>\n<li>声明中被括号括起来的部分</li>\n<li>后缀操作符:\n<ul>\n<li><code>fun()</code>  中的 <code>()</code>  代表是一个函数；</li>\n<li><code>arr[]</code>  的 <code>[]</code>  表示这是一个数组</li>\n</ul>\n</li>\n<li>前缀:  <code>*ptr</code>  表示 &quot;指向 xx 的指针&quot;</li>\n</ol>\n<p>C. 如果使用  <code>const</code>  或 <code>volatile</code> , 紧跟类型说明符，则作用于类型说明符号；其他情况下作用于左边紧邻的  <code>*</code>  号</p>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<p>举个例子  <code>char * const *(*next)();</code> <br />\n 适用规则:</p>\n<ol>\n<li>A: 变量名位  <code>next</code> , 且被 <code>()</code>  运算符包含</li>\n<li>B1: 变量名被  <code>()</code>  括号内部是  <code>(*arr)</code>  代表其是指针</li>\n<li>B: 在  <code>*</code>  和  <code>()</code>  之间决定</li>\n<li>B2: B2 规则告诉我们优先级较高的是 <code>()</code> , 所以 得出 <strong> <code>next</code>  和 <code>()</code>  先结合是一个指向函数的指针</strong>，所以得出 &quot;next 是一个函数指针，指向返回... 的函数&quot;</li>\n<li>B3: 处理  <code>*</code> , 得出指针内容</li>\n<li>C:  <code>char * const</code> ,  <code>const</code>  右边没有跟随类型符，所以解释为 &quot;指向字符串的常量指针&quot;, 指针不可改变</li>\n</ol>\n<p>综上，next 是 &quot;一个指针，指向一个函数，该函数的返回一个指针，返回的指针为一个指向 char 型数据类型的常量指针&quot;<br />\n 下图是 C 语言函数定义的规则图解<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017124630.jpg\" alt=\"图示_源于C语言专家编程\" /></p>\n<h1 id=\"表格化\"><a class=\"anchor\" href=\"#表格化\">#</a> 表格化</h1>\n<p>上面的方式只能说是逻辑化，看上去还是不够清晰。我打算按着编译原理的角度结合上面图来列一个表格，按着上面的规则，就列一个表就可以推断出结果.</p>\n<table>\n<thead>\n<tr>\n<th>声明字符串</th>\n<th style=\"text-align:center\">采取的步骤</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char * const *(*<strong>next</strong>)();</td>\n<td style=\"text-align:center\">1</td>\n<td>表示  <code>next是...</code></td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">2,3</td>\n<td>不匹配，转到下一步。表示  <code>next是...</code></td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">4</td>\n<td>不匹配，转到下一步.</td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">5</td>\n<td>与 * 号匹配。表示  <code>指向...的指针</code></td>\n</tr>\n<tr>\n<td>char * const *<strong>(     )</strong>();</td>\n<td style=\"text-align:center\">4</td>\n<td>&quot;(&quot; &quot;)&quot; 匹配，转到第 2 步</td>\n</tr>\n<tr>\n<td>char * const *        <strong>()</strong>;</td>\n<td style=\"text-align:center\">2</td>\n<td>不匹配，转到下一步</td>\n</tr>\n<tr>\n<td>char * const *        <strong>()</strong>;</td>\n<td style=\"text-align:center\">3</td>\n<td>表示  <code>返回...的函数</code></td>\n</tr>\n<tr>\n<td>char * const *              ;</td>\n<td style=\"text-align:center\">4</td>\n<td>不匹配，转到下一步</td>\n</tr>\n<tr>\n<td>char * const *              ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>指向..的指针</code></td>\n</tr>\n<tr>\n<td>char * <strong>const</strong>            ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>只读的...</code></td>\n</tr>\n<tr>\n<td>char *                      ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>指向...的指针</code></td>\n</tr>\n<tr>\n<td>char                        ;</td>\n<td style=\"text-align:center\">6</td>\n<td>表示 <code>char</code></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "声明,学习笔记"
            ]
        },
        {
            "id": "https://to-ywz.github.io/win11/Bug/Win11%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95Microsoft%E8%B4%A6%E6%88%B7/",
            "url": "https://to-ywz.github.io/win11/Bug/Win11%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95Microsoft%E8%B4%A6%E6%88%B7/",
            "title": "Win11无法登录Microsoft账户",
            "date_published": "2021-10-24T01:24:15.000Z",
            "content_html": "<p>昨天刷的 win11, Microsoft 登录账号失败了，琢磨半天才搞好，记个笔记<br />\n<img data-src=\"https://i.loli.net/2021/10/24/ADwYfX4mh7NMHWZ.png\" alt=\"bug\" /></p>\n<h1 id=\"第一次遇到这个问题\"><a class=\"anchor\" href=\"#第一次遇到这个问题\">#</a> 第一次遇到这个问题</h1>\n<p>记得当初 win10 上是直接在 clash 的 <code>UWP Loopback</code>  的管理器上配置了一下 Microsoft 的服务<br />\n<img data-src=\"https://i.loli.net/2021/10/24/cdzDwA9k5YaGgWb.png\" alt=\"clash\" /><br />\n 然而，是我记性不好，这是  <code>OneNote</code>  无法同步的问题。整了半天都不好使</p>\n<h1 id=\"win11-的解决方法\"><a class=\"anchor\" href=\"#win11-的解决方法\">#</a> WIN11 的解决方法</h1>\n<p>其实，可以先试试把代理关掉，我的就是这个 bug.<br />\n 当然在这之前还尝试过修改代理，这里演示一下.<br />\n <code>win + r</code>  召唤 运行窗口<br />\n<img data-src=\"https://i.loli.net/2021/10/24/Xtj8q917zRmfoEV.png\" alt=\"\" /><br />\n选择 网络和 Intent, 下面的子选项<br />\n<img data-src=\"https://i.loli.net/2021/10/24/UW1CDw7ZgHjVLtS.png\" alt=\"\" /><br />\n进入后选择 更改网络适配器<br />\n<img data-src=\"https://i.loli.net/2021/10/24/YHNvzd5QxupsgSl.png\" alt=\"\" /><br />\n选择当前在工作的适配器，右键属性<br />\n<img data-src=\"https://i.loli.net/2021/10/24/45QOat7dV1sqjwN.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2021/10/24/lWjmeqygFVcGMkQ.png\" alt=\"\" /><br />\n选择 IPv4, 双击<br />\n<img data-src=\"https://i.loli.net/2021/10/24/SNPIy2K4mejxJt1.png\" alt=\"\" /><br />\n将 DNS 和 备用 DNS 改为 4.4.4.1 和 4.4.4.2<br />\n<img data-src=\"https://i.loli.net/2021/10/24/SdVCUZPjXG1Musx.png\" alt=\"\" /><br />\n 这样子就可以再试试能否登录成功，如果还是不行，只能说不是一种问题<br />\n记得登录完毕后将 DNS 修改回去</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "win11",
                "Bug"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/RT-Thread-Nano-%E7%A7%BB%E6%A4%8D/",
            "url": "https://to-ywz.github.io/Embedded/STM32/RT-Thread-Nano-%E7%A7%BB%E6%A4%8D/",
            "title": "RT-Thread Nano 移植",
            "date_published": "2021-10-22T13:33:41.212Z",
            "content_html": "<p>电赛延期了，开学就没时间打了，写点博客记录一下调试过的模块，移植过的源码</p>\n<h2 id=\"在-cubemx-上移植-nano\"><a class=\"anchor\" href=\"#在-cubemx-上移植-nano\">#</a> 在 CubeMX 上移植 Nano</h2>\n<h3 id=\"在-cubemx-上-添加-realthread-软件包\"><a class=\"anchor\" href=\"#在-cubemx-上-添加-realthread-软件包\">#</a> 在 CubeMX 上 添加 RealThread 软件包</h3>\n<p>在新建 CubeMX 工程的基础上，我们需要安装一个 软件包，一个 pdsc 的软件包， <code>https://www.rt-thread.org/download/cube/RealThread.RT-Thread.pdsc</code> <br />\n, 点击 help 中的 manage embedded software packs 选择 From URL, 在框中输入 网址，然后点击 check<br />\n<img data-src=\"https://s1.ax1x.com/2020/11/10/BLL476.png\" alt=\"alt 来源:https://blog.bruceou.cn/2020/11/2-2-transplantation-of-rt-thread-nano-based-on-cubemx/314/\" /><br />\n 点击 OK 回到 User Defined Packs Manager 界面，<br />\n 再次点击 OK, CubeMX 自动连接服务器，获取包描述文件.<br />\n<img data-src=\"https://s1.ax1x.com/2020/11/10/BLLThD.png\" alt=\"alt 来源:https://blog.bruceou.cn/2020/11/2-2-transplantation-of-rt-thread-nano-based-on-cubemx/314/\" /></p>\n<p>再次进入 anage embedded software packs 界面的时候 就会出现 RealThread 选项卡，<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091204.png\" alt=\"\" /><br />\n 点击之后选择其中一个 (建议 3.1.3 及其以上) 点击 install now, 等待下载<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091229.png\" alt=\"\" /><br />\n中间会弹出一个使用许可，记得同意<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091247.png\" alt=\"\" /></p>\n<h3 id=\"在-cubxmx-上-添加-rt-threard-nano-至-工程\"><a class=\"anchor\" href=\"#在-cubxmx-上-添加-rt-threard-nano-至-工程\">#</a> 在 CubxMX 上 添加 RT-Threard Nano 至 工程</h3>\n<p>打开，我们新建的基本 CubeMX 的基本工程，不会建立的点这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0VtYmVkZGVkL1NUTTMyLyVFNiU5NiVCMCVFNSVCQiVCQUhBTCVFNSVCQSU5MyVFNSVCNyVBNSVFNyVBOCU4QiVFNyU5QSU4NCVFNiU5NiVCOSVFNiVCMyU5NS8=\">▶</span>.</p>\n<p>然后点击 Software Packs, 选择 select components, 进入 Software Packs Component Selector<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091318.png\" alt=\"\" /><br />\n 勾上 RealThread, 然后 右边就会出现 RT-Trhead 及其版本号，我这里使用 3.1.5, 可以勾选是否使用 shell, kernel, 和 device (这个我没用过，因该是这两个月出的这里先不做 demo), 点击 OK 结束<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091342.png\" alt=\"\" /><br />\n PS: 如果没有左半边的的界面点击一下粉红色框起的地方点击</p>\n<p>这时候就会在 工程的 最左侧栏最底部多出一个 Software Packs 的 选项 里面有 RealThread RT-Thread 3.1.5 (不同版本号会不同), 点击后 中间会出现  <code>RTOS Kernel</code>  和  <code>RTOS shell</code>  , 勾选上，底部就会出现参数栏<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091400.png\" alt=\"\" /></p>\n<p>参数这里按需配置，我打开了小内存管理，其他的一切照常，debug 项会在 RT-Thread Nano 初始胡过程中，打印执行到哪死在哪。看需求进行配置<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091415.png\" alt=\"\" /></p>\n<p>最后，由于我们使用了 RT-Thread Ta 会占用 systick 所以我们需要修改 系统的定时器，这里我改成 TIM5<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091435.png\" alt=\"\" /></p>\n<p>到这我们 用 cubemx 移植 RT-Thread 就完成了，生成工程即可，不过需要注释掉 cubeMX 生成的  <code>HardFault_Handler</code>  中断，</p>\n<h3 id=\"配置-shell\"><a class=\"anchor\" href=\"#配置-shell\">#</a> 配置 Shell</h3>\n<p>kernel 配置 完毕，但是编译的时候 Keil 会报一个 未定义的 error<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091448.png\" alt=\"\" /></p>\n<p>这里有我写好了的 串口输出代码，相关宏自行修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_console_output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">rt_size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">__HAL_UNLOCK</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token function\">rt_strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是 shell 未定义 输出函数导致的问题，当然当你写好了 输出函数后，他又会报另一个错<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091512.png\" alt=\"\" /><br />\n因为这个，函数在这里被调用了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211127091532.png\" alt=\"\" /><br />\n之所以 接收函数 没有报错是因为，在 链接的时候 输出函数在 输入函数之前，在检测出函数异常后，直接中断链接过程</p>\n<p>接收函数 就比较麻烦。除了接收中断之外 为了保证 接收的数据的稳定性，我们需要加上 一个 环形缓冲区，所以代码量就会上升一些<br />\n这里我就不细说了，直接贴个代码</p>\n<h4 id=\"ringbufferh\"><a class=\"anchor\" href=\"#ringbufferh\">#</a> ringbuffer.h</h4>\n<p>环形缓冲区头文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @file ringbuffer.h</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author BlackSheep (ywz_123xxx@163.com)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @brief   环形缓冲区</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @version 0.1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @copyright Copyright (c) 2021</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__RINGBUFFER_H__</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__RINGBUFFER_H__</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdint.h\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ALIGN_SIZE</span> <span class=\"token expression\"><span class=\"token number\">4</span> </span><span class=\"token comment\">// 字节对齐</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// * 返回对齐数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ALIGN_DOWN</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> align<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>align<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ringbuffer_space_len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>buffer_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> read_mirror <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> read_index <span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> write_mirror <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> write_index <span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">int16_t</span> buffer_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ringbuffer_state</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    RINGBUFFER_EMPTY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    RINGBUFFER_FULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">/* half full is neither full nor empty */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    RINGBUFFER_HALFFULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ringbuffer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> <span class=\"token class-name\">int16_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ringbuffer_state</span> <span class=\"token function\">ringbuffer_status</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"ringbufferc\"><a class=\"anchor\" href=\"#ringbufferc\">#</a> ringbuffer.c</h4>\n<p>环形缓冲区 .c 文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           获取 ringbuffer 状态</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @retval           ringbuffer 枚举</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *                      空  :   RINGBUFFER_EMPTY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *                      满  :   RINGBUFFER_FULL</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *                      半满:   RINGBUFFER_HALFFULL</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ringbuffer_state</span> <span class=\"token function\">ringbuffer_status</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>write_index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_mirror <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>write_mirror<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> RINGBUFFER_EMPTY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> RINGBUFFER_FULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> RINGBUFFER_HALFFULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @brief           获取缓冲区中数据大小</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * @retval          缓冲区中现有数据</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ringbuffer_status</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">case</span> RINGBUFFER_EMPTY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">case</span> RINGBUFFER_FULL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> rb<span class=\"token operator\">-></span>buffer_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">case</span> RINGBUFFER_HALFFULL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">></span> rb<span class=\"token operator\">-></span>read_index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span> rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">-</span> rb<span class=\"token operator\">-></span>read_index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span> rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">-</span> rb<span class=\"token operator\">-></span>write_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre> * @brief           初始化 ringbuffer 实例</pre></td></tr><tr><td data-num=\"60\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"61\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"62\"></td><td><pre> * @param pool      缓冲区数组首地址</pre></td></tr><tr><td data-num=\"63\"></td><td><pre> * @param size      缓冲区数组大小</pre></td></tr><tr><td data-num=\"64\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"65\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"66\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"67\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ringbuffer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                     <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                     <span class=\"token class-name\">int16_t</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">/* 初始化读写索引 */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    rb<span class=\"token operator\">-></span>read_mirror <span class=\"token operator\">=</span> rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    rb<span class=\"token operator\">-></span>write_mirror <span class=\"token operator\">=</span> rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">/* 配置缓冲区首地址 和 大小 */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    rb<span class=\"token operator\">-></span>buffer_ptr <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">=</span> <span class=\"token function\">ALIGN_DOWN</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> ALIGN_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"83\"></td><td><pre> * @brief           缓冲区存入 1 字节</pre></td></tr><tr><td data-num=\"84\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"85\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"86\"></td><td><pre> * @param ch        存入缓冲区的数据</pre></td></tr><tr><td data-num=\"87\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"88\"></td><td><pre> * @retval          执行结果</pre></td></tr><tr><td data-num=\"89\"></td><td><pre> *                      0:  error</pre></td></tr><tr><td data-num=\"90\"></td><td><pre> *                      1:  succee</pre></td></tr><tr><td data-num=\"91\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"92\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">/* 缓冲区满 */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ringbuffer_space_len</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    rb<span class=\"token operator\">-></span>buffer_ptr<span class=\"token punctuation\">[</span>rb<span class=\"token operator\">-></span>write_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/* 翻转检测 */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        rb<span class=\"token operator\">-></span>write_mirror <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>rb<span class=\"token operator\">-></span>write_mirror<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        rb<span class=\"token operator\">-></span>write_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"116\"></td><td><pre> * @brief           从缓冲区中读取 1 字节</pre></td></tr><tr><td data-num=\"117\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"118\"></td><td><pre> * @param rb        缓冲区实体</pre></td></tr><tr><td data-num=\"119\"></td><td><pre> * @param ch        读取的字节</pre></td></tr><tr><td data-num=\"120\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"121\"></td><td><pre> * @retval          执行结果:</pre></td></tr><tr><td data-num=\"122\"></td><td><pre> *                      0:  error</pre></td></tr><tr><td data-num=\"123\"></td><td><pre> *                      1:  succee</pre></td></tr><tr><td data-num=\"124\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"125\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"126\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">/* 缓存区为 NULL */</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">/* 存入字节 */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token operator\">*</span>ch <span class=\"token operator\">=</span> rb<span class=\"token operator\">-></span>buffer_ptr<span class=\"token punctuation\">[</span>rb<span class=\"token operator\">-></span>read_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        rb<span class=\"token operator\">-></span>read_mirror <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>rb<span class=\"token operator\">-></span>read_mirror<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        rb<span class=\"token operator\">-></span>read_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"finshdriverh\"><a class=\"anchor\" href=\"#finshdriverh\">#</a> FinSHDriver.h</h4>\n<p>FinSH 串口驱动头文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;rtthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ringbuffer.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// tShell</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART1</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART2</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART3</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART4</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART5</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART6</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART7</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART8</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UART_RX_BUF_LEN</span> <span class=\"token expression\"><span class=\"token number\">16</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SHELL_USING_UART1</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_UART</span> <span class=\"token expression\">USART1              </span><span class=\"token comment\">// * tShell 串口</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_IRQn</span> <span class=\"token expression\">USART1_IRQn          </span><span class=\"token comment\">// * tShell 中断号</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSHELL_IRQHandler</span> <span class=\"token expression\">USART1_IRQHandler </span><span class=\"token comment\">// * tShell 中断服务函数</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SHELL_USING_UART2</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_UART</span> <span class=\"token expression\">USART2              </span><span class=\"token comment\">// * tShell 串口</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_IRQn</span> <span class=\"token expression\">USART2_IRQn          </span><span class=\"token comment\">// * tShell 中断号</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSHELL_IRQHandler</span> <span class=\"token expression\">USART2_IRQHandler </span><span class=\"token comment\">// * tShell 中断服务函数</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSHELL_AF</span>   <span class=\"token expression\">GPIO_AF7_USART2</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_BAUDRATE</span> <span class=\"token expression\"><span class=\"token number\">115200</span> </span><span class=\"token comment\">// * tShell 波特率</span></span></pre></td></tr></table></figure><h4 id=\"finshdriverc\"><a class=\"anchor\" href=\"#finshdriverc\">#</a> FinSHDriver.c</h4>\n<p>FinSH 源文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief       移植控制台，实现控制台输出，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *              对接 rt_hw_console_output</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param str   需要输出的 字符</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @date 2021-07-30</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_console_output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">rt_size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">__HAL_UNLOCK</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token function\">rt_strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @brief       移植 FinSH, 实现命令行交互 中断方式</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> *              然后再对接 rt_hw_console_getchar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @retval </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @date 2021-07-30</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token function\">rt_hw_console_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token comment\">/* 从 ringbuffer 中拿出数据 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ringbuffer_getchar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uart_rxcb<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shell_rx_sem<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * @brief       tshell 接收 </pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"52\"></td><td><pre> * @date 2021-07-30</pre></td></tr><tr><td data-num=\"53\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">TSHELL_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token class-name\">rt_base_t</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">/* enter interrupt */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">rt_interrupt_enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在中断中一定要调用这对函数，进入中断</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UART_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_IT_SOURCE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UART_IT_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            ch <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UART_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                ch <span class=\"token operator\">=</span> UartHandle<span class=\"token punctuation\">.</span>Instance<span class=\"token operator\">-></span>DR <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">/* 读取到数据，将数据存入 ringbuffer */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token function\">ringbuffer_putchar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uart_rxcb<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shell_rx_sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token comment\">/* leave interrupt */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">rt_interrupt_leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在中断中一定要调用这对函数，离开中断</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到这里，才算是移植结束，Nano 可带命令行 操作</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "RTOS"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/",
            "title": "C语言深度剖析",
            "date_published": "2021-10-22T10:54:20.732Z",
            "content_html": "<h1 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h1>\n<h2 id=\"关键字数量\"><a class=\"anchor\" href=\"#关键字数量\">#</a> 关键字数量</h2>\n<p>C89 因该是 32 个，C99 多出了 5 个，多出的 5 个如下</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>定义一个类的内联函数，引入它的主要原因是用它替代 C 中表达式形式的宏定义</td>\n</tr>\n<tr>\n<td>restrict</td>\n<td>只用于限定指针，所有修改该指针所指向内容的操作全部都是基于 (base on) 该指针的，即不存在其它进行修改操作的途径</td>\n</tr>\n<tr>\n<td>_Bool</td>\n<td>用于表示布尔值，引入  <code>&lt;stdbool.h&gt;</code> , 可以用 bool 代替</td>\n</tr>\n<tr>\n<td>_Complex 和 Imaginary</td>\n<td>添加了复数类型</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于-sizeof-不得不说的那些事\"><a class=\"anchor\" href=\"#关于-sizeof-不得不说的那些事\">#</a> 关于 sizeof 不得不说的那些事</h2>\n<p>其实挺致命的 sizeof 平常都是 sizeof () 这么用的，一直以为它是个函数，到了今天才知道它是个关键字<br />\n sizeof 不带括号也可以使用，sizeof (int) 和 sizeof int 没有什么区别，但是由于 sizeof () 用的多，建议用着一种形式<br />\n至于为什么 sizeof () 用的多我估计是和 不用 <code>#define max(a,b) a&gt;b?a:b</code> , 而用 <code>#define max(a,b) (a)&gt;(b)?(a):(b)</code>  的原因是一致的</p>\n<h2 id=\"关于-声明-和-定义-不得不说的二三事\"><a class=\"anchor\" href=\"#关于-声明-和-定义-不得不说的二三事\">#</a> 关于 声明 和 定义 不得不说的二三事</h2>\n<p>声明和定义是由明显区别的，体现在两个地方：内存 和 出现次数</p>\n<ul>\n<li>在内存上，<br />\n 定义必然占用内存空间<br />\n声明不一定占用内存空间，只有当被声明的对象被定义后才会占用空间<br />\n这一块的区别可以去看以先 汇编 上对内存的分配<br />\n测试代码如下:<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//extern int small = 0; /* extern 声明的 同时不能被定义 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> big<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x <span class=\"token operator\">+=</span> i <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>出现次数，<br />\n 定义只能出现一次，要不然就是重定义，鬼知道编译器会给你优化成什么东西<br />\n声明能出现多次，编译器会认为当前的这写声明都是一个变量，一般用于多文件编译跨文件的变量</li>\n</ul>\n<h2 id=\"register\"><a class=\"anchor\" href=\"#register\">#</a> register</h2>\n<p>这个关键字目的在于告诉编译器 把变量存放到 CPU 内部寄存器中，减少变量从内存中的读取次数来提升效率<br />\n当然，你定义是你定义，编译器听不听这你就管不着了。人家怎么开心怎么来<br />\n有个要注意的地方，register 变量可能不存放在内存中，所以不能用取址运算符 “&amp;” 来获取 register 变量的地址<br />\n对了，寄存器是无法存入自定义类型的，所以传参记得传指针</p>\n<h2 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h2>\n<p>这玩意可亲切了，毕竟干嵌入式出身，CPU 内部有寄存器，这是唯一一个和 CPU 处理速度能搭上拍的存储器<br />\n但是由于造价高，所以数量少。但凡数据读取都会经过寄存器，哪怕在内存上读取，也是从内存到高速缓存，再到寄存器<br />\n至于为什么快，一是小，而是距离近，其他原因我也没法解释了</p>\n<h2 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h2>\n<h3 id=\"修饰变量\"><a class=\"anchor\" href=\"#修饰变量\">#</a> 修饰变量</h3>\n<p>变量又分为局部和全局变量，但它们都存在内存的静态区</p>\n<ul>\n<li>静态全局变量，作用域仅限于变量被定义的文件中，从哪定义的就从哪开始，在定义之前的地方调用，就需要 用  <code>extern</code>  来声明</li>\n<li>静态局部变量，在函数体里面定义的，就只能在这个函数里用了，同一个文档中的其他函数也用不了.<br />\n 由于被 static 修饰的变量总是存在内存的静态区，所以即使这个函数运行结束，这个静态变量的值还是不会被销毁，函数下次使用时仍然能用到这个值</li>\n</ul>\n<h3 id=\"修饰函数\"><a class=\"anchor\" href=\"#修饰函数\">#</a> 修饰函数</h3>\n<p>修饰函数。函数前加 static 使得函数成为静态函数。但此处 “static” 的含义<br />\n不是指存储方式，而是指对函数的作用域仅局限于本文件</p>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<h3 id=\"什么是数据类型\"><a class=\"anchor\" href=\"#什么是数据类型\">#</a> 什么是数据类型</h3>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117075651.png\" alt=\"\" /><br />\n数据类型其实就是一个模子，每定义一个变量就是用模子在内存里打一个相应大小的空间.<br />\n 数据类型当然不仅如此，数据结构的定义就是数据及在数据上的操作，简单来说，除了有空间，还得有使用方法</p>\n<h3 id=\"变量命名规则\"><a class=\"anchor\" href=\"#变量命名规则\">#</a> 变量命名规则</h3>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117075709.png\" alt=\"\" /><br />\nc 语言是一个精简高效的语言，所以我们变量名也要简洁有力，但是非常用英语词汇最好不要使用缩写，尤其是专业英语</p>\n<h4 id=\"作用域前缀命名规则\"><a class=\"anchor\" href=\"#作用域前缀命名规则\">#</a> 作用域前缀命名规则</h4>\n<table>\n<thead>\n<tr>\n<th>标识符类型</th>\n<th>作用域前缀</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Global Variable</td>\n<td>g</td>\n</tr>\n<tr>\n<td>File Static Variable(native)</td>\n<td>n</td>\n</tr>\n<tr>\n<td>Function Static Variable</td>\n<td>f</td>\n</tr>\n<tr>\n<td>Auto Variable</td>\n<td>a</td>\n</tr>\n<tr>\n<td>Global Function</td>\n<td>g</td>\n</tr>\n<tr>\n<td>Static Function</td>\n<td>n</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据类型前缀命名规则\"><a class=\"anchor\" href=\"#数据类型前缀命名规则\">#</a> 数据类型前缀命名规则</h4>\n<table>\n<thead>\n<tr>\n<th>Prefix</th>\n<th>Suffix</th>\n<th>Data Type</th>\n<th>Example</th>\n<th>Remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bt</td>\n<td></td>\n<td>bit</td>\n<td>Bit btVariable</td>\n</tr>\n<tr>\n<td>b</td>\n<td></td>\n<td>boolean</td>\n<td>boolean bVariable</td>\n</tr>\n<tr>\n<td>c</td>\n<td></td>\n<td>char</td>\n<td>char cVariable;</td>\n</tr>\n<tr>\n<td>i</td>\n<td></td>\n<td>int</td>\n<td>int iVariable;</td>\n</tr>\n<tr>\n<td>s</td>\n<td></td>\n<td>short[int]</td>\n<td>short[int] sVariable;</td>\n</tr>\n<tr>\n<td>l</td>\n<td></td>\n<td>long[int]</td>\n<td>long[int] lVariable;</td>\n</tr>\n<tr>\n<td>u</td>\n<td></td>\n<td>unsigned[int]</td>\n<td>unsigned[int] uiVariable;</td>\n</tr>\n<tr>\n<td>d</td>\n<td></td>\n<td>double</td>\n<td>double dVariable;</td>\n</tr>\n<tr>\n<td>f</td>\n<td></td>\n<td>float</td>\n<td>float fVariable;</td>\n</tr>\n<tr>\n<td>p</td>\n<td></td>\n<td>pointer</td>\n<td>void *vpVariable; 指针前缀</td>\n</tr>\n<tr>\n<td>v</td>\n<td></td>\n<td>void</td>\n<td>void vVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>enum</td>\n<td>enum A stVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>struct</td>\n<td>struct A stVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>union</td>\n<td>union A stVariable;</td>\n</tr>\n<tr>\n<td>fp</td>\n<td></td>\n<td>function point</td>\n<td>void(* fpGetModeFuncList_a[])( void )</td>\n</tr>\n<tr>\n<td></td>\n<td>_a</td>\n<td>array of</td>\n<td>char cVariable_a[TABLE_MAX];</td>\n</tr>\n<tr>\n<td></td>\n<td>_st  _pst</td>\n<td>typedefenum/struct/union</td>\n<td>typedef struct SM_EventOpt { unsigned char unsigned int char }SM_EventOpt_st,*SM_EventOpt_pst;</td>\n<td>当自定义结构数据类型时使用_st 后缀；当自定义结构数据类型为指针类型时使用_pst 后缀；</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"含义标识命名规则\"><a class=\"anchor\" href=\"#含义标识命名规则\">#</a> 含义标识命名规则</h4>\n<p>变量命名使用名词性词组，函数命名使用动词性词组。</p>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>目标词</th>\n<th>动词 (的过去分词)</th>\n<th>状语</th>\n<th>目的地</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataGotFromSD</td>\n<td>Data</td>\n<td>Got</td>\n<td>From</td>\n<td>SD</td>\n<td>从 SD 中取得的数据</td>\n</tr>\n<tr>\n<td>DataDeletedFromSD</td>\n<td>Data</td>\n<td>Deleted</td>\n<td>From</td>\n<td>SD</td>\n<td>从 SD 中删除的数据</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 变量含义标识符构成：目标词 + 动词 (的过去分词)+ [状语] + [目的地];</p>\n<p>| 变量名 | 目标词 | 动词 (的过去分词) | 状语 | 目的地 | 含义 |<br />\n| ------ | ------ | ---------------- | ---- | ------ | ---- ||<br />\n| GetDataFromSD    | Get    | Data             | From | SD     | 从 SD 中取得数据 |<br />\n| DeleteDataFromSD | Delete | Data             | From | SD     | 从 SD 中删除数据 |<br />\nPS: 函数含义标识符构成：动词 (一般现时)+ 目标词 +[状语]+[目的地];</p>\n<h4 id=\"其他命名规则\"><a class=\"anchor\" href=\"#其他命名规则\">#</a> 其他命名规则</h4>\n<ul>\n<li>程序中不得出现仅靠大小写区分的相似的标识符</li>\n<li>一个函数名禁止被用于其它之处</li>\n</ul>\n<h2 id=\"再谈-sizeof\"><a class=\"anchor\" href=\"#再谈-sizeof\">#</a> 再谈 sizeof</h2>\n<p>sizeof 不是函数<br />\n sizeof 不是函数<br />\n sizeof 不是函数<br />\n在计算 数据类型的时候<strong>不能</strong>省略 (), 在计算变量所占用空间的时候可以省略，<mark>建议都不要省略</mark></p>\n<h3 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h3>\n<p>PS: 以下情况为 64 位操作系统，gcc-x86-64 环境下</p>\n<ol>\n<li class=\"quiz fill\">\n<p><code>sizeof(int) *p</code>  的含义<span class=\"gap\">表示计算 int 型所占字节数，然后再乘以 p</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>当  <code>int *p = NULL;</code>  时， <code>sizeof(p)</code>  的值是<span class=\"gap\"> 8</span>,  <code>sizeof(*p)</code>  的值是 [4].{.gap}。</p>\n</li>\n<li class=\"quiz fill\">\n<p>当  <code>int a[100];</code>  sizeof (a) 的值<span class=\"gap\"> 400</span>,  <code>sizeof(a[100])</code>  的值<span class=\"gap\"> 4</span>,  <code>sizeof(&amp;a)</code>  的值 [8].{.gap}。</p>\n</li>\n<li>\n<p>当  <code class=\"quiz fill\">int b[100];</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>sizeof (b) 的值是 [8].{gap}。</p>\n<h3 id=\"关于-true-和-false\"><a class=\"anchor\" href=\"#关于-true-和-false\">#</a> 关于 TRUE 和 FALSE</h3>\n<p>在 C99 标准中 添加了 bool 数据类型，多了两个宏  <code>true</code>  和   <code>flase</code> <br />\n 但是 在单片机中 编译器可能不支持 &lt;stdbool.h&gt; 这个头文件，所以可以考虑使用 宏来替代<br />\n例如  <code>#define TRUE  1</code> <br />\n 当然 如果 状态仅仅有 0 1 两种，下面的方法 会更加好一些</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为 0 执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 非 0 执行</span></pre></td></tr></table></figure><p>上面这种方法无需考虑， <code>TRUE</code>  和  <code>FALSE</code>  被 Keil 或者其他 编译器定义了，并且不是正常的数值</p>\n<h3 id=\"浮点的比较\"><a class=\"anchor\" href=\"#浮点的比较\">#</a> 浮点的比较</h3>\n<p>在计算机中，数字都是离散的，所以浮点数的精度也是有限的，浮点变量在进行几次运算后，数值可能就产生了误差<br />\n这时候，对其进行 等价判别必然会产生判。例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">,</span> d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token number\">194268.02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token number\">194268</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    d3 <span class=\"token operator\">=</span> d1 <span class=\"token operator\">-</span> d2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d3 <span class=\"token operator\">></span> d4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d3 <span class=\"token operator\">&lt;</span> d4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f - %f = %f \\n\"</span><span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果:</p>\n<pre><code>&lt; 0.02\n194268.015625 - 194268.000000 = 0.015625\n</code></pre>\n<p>可以看出数据发生了明显的变化，所以在对浮点数进行比较的时候，务必设定一个精度范围<br />\n误差在这个范围即为相等.<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span> EPSINON<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> EPSINON<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>核心就是: <mark>浮点数都是有精度限制的，所以你存的数，不一定就是你要数</mark></p>\n<h2 id=\"另一个条件分支-switch-case\"><a class=\"anchor\" href=\"#另一个条件分支-switch-case\">#</a> 另一个条件分支: switch case</h2>\n<p>其实在很大程度上  <code>if else</code>  已经够用了，但是为了让逻辑更加清晰，以及便于编译器更好的优化代码<br />\n在看 &lt;深入理解操作系统&gt; 这本书的时候 我对  <code>if else</code>  和  <code>switch case</code>  分别生成的分支语句进行了反汇编<br />\n发现 后者 只有在  <code>case</code>  数量超过 4 的时候才会生成条件 转跳表 这个数据结构<br />\n所以建议是，当条件分支数 &gt; 5 时，设置连续的 case 值，进行分支执行</p>\n<h2 id=\"高深莫测的-const\"><a class=\"anchor\" href=\"#高深莫测的-const\">#</a> 高深莫测的 const</h2>\n<p>定义 const 只读变量，具有不可变性。<br />\nconst 的出现是为了节省空间，取代 预编译指令。但是很显然，取代失败了。毕竟 宏函数 还是很香的<br />\n言归正传，<br />\n 通常来说，编译器不为普通 const 只读变量分配存储空间，而是将它们保存在符号表中，这使<br />\n得它成为一个编译期间的值，没有了存储与读内存的操作，使得它的效率也很高</p>\n<h3 id=\"const-修饰数组\"><a class=\"anchor\" href=\"#const-修饰数组\">#</a> const 修饰数组</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> ary<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>const 修饰的数组为，只读数组，不可修改数组内的元素<br />\n当然 数组名本身也是一个常量指针，所以 const 位于什么位置，对于 数组来说并没有什么区别</p>\n<h3 id=\"const-修饰指针\"><a class=\"anchor\" href=\"#const-修饰指针\">#</a> const 修饰指针</h3>\n<p>对于 指针来说，const 的位置就很关键</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 可变，p 指向的对象不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 可变，p 指向的对象不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 不可变，p 指向的对象可变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针 p 和 p 指向的对象都不可变</span></pre></td></tr></table></figure><p>这一块我就不细讲了，之前记录过，具体细节看这篇博客:<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0MlRTglQUYlQUQlRTglQTglODAlRTYlOEMlODclRTklOTIlODglRTclQUMlOTQlRTglQUUlQjAvQyVFOCVBRiVBRCVFOCVBOCU4MCVFNiU4QyU4NyVFOSU5MiU4OCVFNyVBQyU5NCVFOCVBRSVCMC8=\">( •̀ ω •́ )✧</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 * p,p 是指针，*p 是指针指向的对象，不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 * p,p 是指针，*p 是指针指向的对象，不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 p, p 不可变，p 指向的对象可变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前一个 const 修饰 * p, 后一个 const 修饰 p, 指针 p 和 p 指向的对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>都不可变</pre></td></tr></table></figure><h3 id=\"const-修饰函数\"><a class=\"anchor\" href=\"#const-修饰函数\">#</a> const 修饰函数</h3>\n<h4 id=\"const-修饰函数参数\"><a class=\"anchor\" href=\"#const-修饰函数参数\">#</a> const 修饰函数参数</h4>\n<p>const 修饰符也可以修饰函数的参数，当不希望这个参数值被函数体内意外改变时使用。例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>告诉编译器  <code>DATE</code>  在函数体中的不能改变，从而防止了使用者的一些无意的或错误的修改</p>\n<h4 id=\"const-修饰返回值\"><a class=\"anchor\" href=\"#const-修饰返回值\">#</a> const 修饰返回值</h4>\n<p>const 修饰符也可以修饰函数的返回值，返回值不可被改变.<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fun</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在另一连接文件中引用 <span class=\"token keyword\">const</span> 只读变量<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确的声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误！只读变量的值不能改变</span></pre></td></tr></table></figure><h2 id=\"反优化大师-volatile\"><a class=\"anchor\" href=\"#反优化大师-volatile\">#</a> 反优化大师 volatile</h2>\n<p>这个关键字在 非嵌入式平台上十分少用. volatile 的作用是告诉 编译器不对这个变量进行优化，并提供该变量稳定的内存空间.<br />\n 一般来说，在嵌入式中，会存在软延时，例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> timeout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时候如果删除  <code>volatile</code>  可能就会导致 timeout 无法访问，这个函数直接被优化为空，然后延时异常，尤其是在 CCS 上编写 MSP 系列单片机的时候，所有变量都需要加上  <code>volatile</code> .<br />\n 对于这种情况建议是直接 typedef 一下  <code>typedef volatile uint8_t vu8_t;</code>  方便使用，避免重复劳动</p>\n<h2 id=\"跨国护照-extern\"><a class=\"anchor\" href=\"#跨国护照-extern\">#</a> 跨国护照 extern</h2>\n<p>为什么说是跨国护照呢？extern 用于扩大 函数，变量的作用域，当一个变量需要跨文件的时候，就需要，用 extern 来声明，一般放在头文件中.<br />\n 这不就是护照，每个要使用的文件就得包含整个声明，这部就像是签证？<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GPIO_TypeDef</span> GPIO1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 作用域为包含了这个 头文件的所有文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_WritePin</span><span class=\"token punctuation\">(</span>GPIO_TypeDef <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> pin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_WritePin</span><span class=\"token punctuation\">(</span>GPIO_TypeDef <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> pin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 函数默认为 自带 extern 属性，都为跨文件作用域.</span></pre></td></tr></table></figure><p>需要注意的是，extern 是声明，而非定义。这时候对变量进行增删查改，任何一个操作都会导致程序异常，所以在 extern 某个变量后需要手动 定义一下这个变量，才能对变量进行操作</p>\n<h2 id=\"struct\"><a class=\"anchor\" href=\"#struct\">#</a> struct</h2>\n<p>在我看来，如果 C 的灵魂是指针，那么 struct 就是灵魂的载体，有了 strcut 之后，我们就无需局限在基本数据类型上，可以实现自己的数据类型，实现相关结构体，当然要注意的是，这玩意一般传指针，传结构体过于浪费运存，不建议使用</p>\n<h3 id=\"空结构体大小\"><a class=\"anchor\" href=\"#空结构体大小\">#</a> 空结构体大小</h3>\n<p>这里有一个很有意思的问题，如果一个结构体如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stu</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>st</pre></td></tr></table></figure><p>那么  <code>sizeof(st)</code>  的大小是多少呢？书中说是 1 , 但我在 vscode + 64 位的 GCC 编译器下 编译出是 0<br />\narm-linux-gnueabihf-gcc-6.2.1 也是 0<br />\n 所以我觉得可能是编译器版本不同，以及 VC6.0 编译器的自带的一些配置才出现这个问题<br />\n PS: 这个问题得先放一放有空再去深究</p>\n<h3 id=\"柔性数组\"><a class=\"anchor\" href=\"#柔性数组\">#</a> 柔性数组</h3>\n<p>C99 中，结构中的最后一个元素允许是未知大小的数组，这就叫做柔性数组成员，但结构中的柔性数组成员前面必须至少一个其他成员<br />\n例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> type_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 使用 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>type_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type_a<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个操作像极了  <code>int *a = new int [100];</code> ,  (间接证明了 C 语言是可以实现 高级语言的一些操作的，只不过会繁琐一些)</p>\n<h3 id=\"类-不类\"><a class=\"anchor\" href=\"#类-不类\">#</a> 类？不类！</h3>\n<p>struct 和 class 的最大区别在于 Class 对数据进行了封装，非 public 下的成员函数和成员变量，无法进行调用或访问<br />\n在 structurt 中，成员函数还是可以使用 函数指针来模拟</p>\n<h2 id=\"勤俭持家小能手-union\"><a class=\"anchor\" href=\"#勤俭持家小能手-union\">#</a> 勤俭持家小能手 union</h2>\n<p>union 与 struct 的用法非常类似。<br />\nunion 维护足够的空间来置放多个数据成员中的 <strong>一种</strong>，而不是为每一个数据成员配置空间<br />\n在 union 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员，所有的数据成员具有相同的起始地址。<br />\n例子如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> StateMachine</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> character<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">double</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个 union 只配置一个足够大的空间以来容纳最大长度的数据成员，以上例而言，最大<br />\n长度是 double 型态，所以 StateMachine 的空间大小就是 double 数据类型的大小.<br />\nunion 一般用于 缩减内存大小，当某些数据不会被同时访问的时候可以考虑使用 union</p>\n<h3 id=\"大小端问题\"><a class=\"anchor\" href=\"#大小端问题\">#</a> 大小端问题</h3>\n<ul>\n<li>大端模式（Big_endian）: 字数据的高字节存储在低地址中，而字数据的低字节则存放在高地址中。</li>\n<li>小端模式（Little_endian）: 字数据的高字节存储在高地址中，而字数据的低字节则存放在低地址中</li>\n</ul>\n<p>如何检测大小端:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">short</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    un<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0x0102</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 判断这种情况是大端还是小端</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大端模式！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 判断这种情况是大端还是小端</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小端模式！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"enum-要我有何用\"><a class=\"anchor\" href=\"#enum-要我有何用\">#</a> enum: 要我有何用？</h2>\n<p>一开始学枚举的时候，我也觉得枚举并没有什么作用，因为 宏可以干它能干的事情，后来学了状态机。开始整改代码风格的时候，算是理解了  <code>enum</code>  的作用.</p>\n<h3 id=\"define-和-enum-的区别\"><a class=\"anchor\" href=\"#define-和-enum-的区别\">#</a> #define 和 enum 的区别</h3>\n<ol>\n<li>#define 宏常量是在预编译阶段进行简单替换。枚举常量则是在编译的时候确定其值，这里就注定了，宏不可以被调试</li>\n<li>枚举可以一次定义大量的常量，并且视为一种数据类型，无论是在作为返回值还是作为状态参数的时候，都可以使得代码清晰易懂.</li>\n<li>enum 定义的枚举类型 视为一类状态的集合。例如 rtthread 的 rt_error 枚举。能清晰的标识</li>\n<li>sizeof () 枚举变量是整型大小</li>\n</ol>\n<h2 id=\"nvidia-的同门师兄弟-typdef\"><a class=\"anchor\" href=\"#nvidia-的同门师兄弟-typdef\">#</a> Nvidia 的同门师兄弟 typdef</h2>\n<p>当年的 Nvidia 最喜欢干的就是 套马甲，typedef 也是如此.<br />\ntypedef 在官方 的定义上是不会创造新的数据类型的，那么疑问就来了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">uint16_t</span> ODR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">uint16_t</span> IDR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> GPIO_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种又是什么情况呢？其实这属于定义以一个没有名字的结构体，然后重命名为 GPIO_TypeDef, 故称为 套马甲</p>\n<h3 id=\"又双叒叕是-define\"><a class=\"anchor\" href=\"#又双叒叕是-define\">#</a> 又双叒叕是 #define</h3>\n<p><code>#define</code>  总是 喜欢和 其它关键字抢饭吃。所以大部分 C 语言程序员都离不开 宏定义.<br />\n <code>typedef</code>  和  <code>#define</code>  区别还是那句话， <code>#define</code>  是等效替代.<br />\n <code>typedef</code> ,  <code>static</code> ,  <code>auto</code> ,  <code>register</code>  都属于存储类关键字，所以不能重叠使用，这个时候考虑使用  <code>#define</code>  .<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INT32</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> INT32 i <span class=\"token operator\">=</span> <span class=\"token number\">10</span>；</pre></td></tr></table></figure><p>有些时候必须得使用  <code>typedef</code> . 例如，在重命名指针数据类型的时候<br />\n <code>#define</code>  格式如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PCHAR</span> <span class=\"token expression\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PCHAR p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//p4 不是指针</span></pre></td></tr></table></figure><p><code>typedef</code>  格式:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pchar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pchar p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到这重要的关键字总结完毕，以后想起或者遇到什么有趣的应用，再继续完善<br />\n以上 都是本人基于 &lt;&lt;C 语言深度剖析&gt;&gt; 的看法和个人观点，如有不当，恳请斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "学习笔记,C"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E6%B6%82%E9%B8%A6%E9%9D%A2%E8%AF%95/",
            "url": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E6%B6%82%E9%B8%A6%E9%9D%A2%E8%AF%95/",
            "title": "面试锦集-涂鸦面试",
            "date_published": "2021-10-11T08:02:51.000Z",
            "content_html": "<h1 id=\"面试经历\"><a class=\"anchor\" href=\"#面试经历\">#</a> 面试经历</h1>\n<p>真丢脸，上来张嘴就说错了大小端，虽然说后面说对了。基本估计就没啥好印象了.<br />\n 上来先问了一下校园经历，巴拉巴拉说了自己在 ACM、人工智能、Web、ICAN 的经历.<br />\n 然后问了有没有考计算机等级证书 (我突然质疑专业性，不过技术面的感觉还是有很深底子的).<br />\n 问了一下专业骨干课程，计算机就是那几大件，计算机网络，操作系统，组成原理，数据结构<br />\n接着就开始问 C 语言基础知识了，感觉是栽了 (一开始就错了，真丢脸).<br />\n 问了大小端，问了 堆和栈使用的区别 (这里又栽了，全局变量，静态变量存放的位置弄错了), 问了 static 和 const 对变量的影响 (我有点扯多了，整的我好像在背答案).<br />\n 其他的就开始过项目了。让我说一个项目，我分享了一下电磁炮的项目，面试官好像不太感兴趣，就问了一下中断的使用中断的安排.<br />\n 又分享了无线智能节点，面试官问了线程安排和线程管理 (他们似乎对这个很感兴趣), 内存保护，多线程调度，同步等，这一块得好好补一补</p>\n<h1 id=\"知识点总结\"><a class=\"anchor\" href=\"#知识点总结\">#</a> 知识点总结</h1>\n<h2 id=\"大小端\"><a class=\"anchor\" href=\"#大小端\">#</a> 大小端</h2>\n<blockquote>\n<p>小端：低位数据存放在低地址.</p>\n</blockquote>\n<p>记住这一个就好啦，大端相反，以免和我一样，绕进去了<br />\n<strong> PS: 网络流的字节序是大端</strong><br />\n思考一下，为什么要存在大小端.<br />\n 网络中对数据的处理更多的是人指定的协议，对于人来说更加适应大端数据处理的方式，所以网络字节序是大端<br />\n而在机器中使用小端是因为机器不知道高低字节只会按顺序处理，先读第一个字节再读第二个字节依次反复。如果按大端存储就会需要，先读到的就是高位字节，后读到的就是低位字节.<br />\n 还有就是一些历史包袱的缘故导致的两种情况共存</p>\n<h2 id=\"内存分区\"><a class=\"anchor\" href=\"#内存分区\">#</a> 内存分区</h2>\n<h3 id=\"c语言中的内存分区\"><a class=\"anchor\" href=\"#c语言中的内存分区\">#</a> C 语言中的内存分区</h3>\n<table>\n<thead>\n<tr>\n<th>区域</th>\n<th>存放内容</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈区</td>\n<td>据补变量值、函数的参数值</td>\n<td>由编译器自动分配释放 FILO</td>\n</tr>\n<tr>\n<td>堆区</td>\n<td>new/malloc 出来的空间</td>\n<td>一般由程序员分配释放，若程序员不是发，程序结束后由 OS 回收。与数据结构中的堆并不一样，分配方式类似于链表</td>\n</tr>\n<tr>\n<td>常数区</td>\n<td>局部变量 / 全局变量的<strong>值</strong></td>\n<td>常量字符串也存放在这里，程序结束后由 OS 释放</td>\n</tr>\n<tr>\n<td>静态区</td>\n<td>全局变量 / 静态变量</td>\n<td>初始化的全局变量和静态变量在一块区域内 ( <code>RW</code> ), 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域 (ZI), 程序结束后由 OS 统一释放</td>\n</tr>\n<tr>\n<td>代码区</td>\n<td>二进制代码</td>\n<td>存放函数体的二进制代码</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 堆中的数据需要用户自行回收，放置内存泄漏<br />\n PS: 静态变量 和 全局变量<br />\n属于静态存储方式的变量不一定是静态变量，例如全局变量属于静态存储，但是不一定是静态变量，必须由  <code>static</code>  修饰的变量才属于静态外部变量，或称静态全局变量.</p>\n<ul>\n<li>局部变量改为静态变量后改变了其存储方式，即改变列生存周期</li>\n<li>全局变量改为静态变量后改变了其作用域，限制了使用范围 (在链接的过程中会体现)</li>\n</ul>\n<h4 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> Global_var <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 全局初始化区</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>Global_Unknown_ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局未初始化区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> stack_var<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span> stack_str_buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"ABCD\\0\" 在常量区，stack_str_buf 在栈上</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stack_p2<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stack_str_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12345\\0\" 在常量区，stack_str_ptr 在栈上</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> static_var<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 全局 (静态) 变量初始化区</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Global_Unknown_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  stack_p2<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 申请到的 10 和 20 字节的空间在堆区</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Global_Unknown_ptr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//\"12345\\0\" 存放在常量区，编译器可能会将它与 stack_str_ptr 所指向的值优化在一个地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>Global_Unknown_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack_p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"动静态内存分配\"><a class=\"anchor\" href=\"#动静态内存分配\">#</a> 动 / 静态内存分配</h3>\n<p>程序被加载到内存中，这块内存存在两个属性：静态分配内存和动态分配内存</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>静态分配内存</td>\n<td>在编译和链接的时候就确定好内存</td>\n</tr>\n<tr>\n<td>动态分配内存</td>\n<td>在程序加载、调用、执行的时候分配 / 回收内存</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"内存分区详解\"><a class=\"anchor\" href=\"#内存分区详解\">#</a> 内存分区详解</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>.text</code></td>\n<td style=\"text-align:center\">也称为代码段 (Code), 用户来存放程序执行代码，同时也可能会包含一些常量。该段内存为静态分配，只读。这块内存是共享的，当多个相同进程存在时，公用一个 <code>text</code>  段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.data</code></td>\n<td style=\"text-align:center\">也称为 GVAR (Global value) 用来存放已经初始化的非 0 全局变量。静态分配.  <code>data</code>  又可分配为读写 (RW) 区和只读 (RO) 区.(RO) 区保存常量所以也被称为 <code>.constdata</code> ; RW 则是普通全局非 0 变量，静态变量也存储在其中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.bss</code></td>\n<td style=\"text-align:center\">存放程序中初始化的变量和 0 值全局变量。静态分配，在程序开始通常会被清 0</td>\n</tr>\n</tbody>\n</table>\n<p>这三段内存组成了我们编写的程序本体，但是一个程序想要运行起来，还需要更多的数据以及数据间的交互。否则，这个程序就是一个特例化的程序，不具有通用性，没有价值的死程序.<br />\n 所以程序的运行需为数据交互提供一个平台 —— 堆栈.</p>\n<p>PS:  <code>.text</code>  和  <code>data</code>  段都在可执行文件中，由系统从可执行文件中加载； <code>.bss</code>  段不在可执行文件内，由系统初始化.</p>\n<h3 id=\"堆栈\"><a class=\"anchor\" href=\"#堆栈\">#</a> 堆栈</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">栈</td>\n<td style=\"text-align:center\">存放 Automatic Variable, 按内存生长方向由高到低方向生长，其最大值编译确定 (与编译器相关), 速度快，但自由性差，最大空间不大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">堆</td>\n<td style=\"text-align:center\">自由申请的空间，按内存地址由低向高方向生长，其大小由系统内存 / 虚拟内存上限决定。速度慢，但自由性大，可用空间大</td>\n</tr>\n</tbody>\n</table>\n<p>每个线程都会由自己的栈，但是堆的空间是公用的</p>\n<p>具体内存空间分配如图，地址由下往上生长，分别表示  <code>.text</code> ,  <code>.data</code> ,  <code>bss</code>  内存分布<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211012132911.png\" alt=\"\" /><br />\n堆 (Heap) 往高地址方向生长，栈 (Stack) 往低地址方向生长</p>\n<h2 id=\"cc-中的内存分区\"><a class=\"anchor\" href=\"#cc-中的内存分区\">#</a> C/C++ 中的内存分区</h2>\n<p>在 C/C++ 中，通常可以把内存分为 4 个分区：栈、堆、全局 / 静态存储区和常量存储区</p>\n<h3 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h3>\n<p>通常用于在那些编译器件就可以确定大小的变量，用于在函数作用域内创建，离开作用域后自动销毁变量的存储区。通常是局部变量、函数参数等的存储空间。存储空间是连续的买两个紧密挨着定义的局部变量他们的存储空间也是紧挨着的。栈的大小是有限的，不要定义过大的数组.</p>\n<h3 id=\"堆\"><a class=\"anchor\" href=\"#堆\">#</a> 堆</h3>\n<p>通常是用于编译期间无法确定大小的变量，其存储空间不连续，一般为用户动态开辟，自行释放。如果开辟后没有释放那么就会出现内存泄漏的问题.<br />\n 两个紧挨着的指针，开辟出来的空间不一定是相邻的，内存碎片就是这么产生的.<br />\n 堆的大小几乎不受限制，理论上每个程序最大可达 4GB.</p>\n<h3 id=\"全局静态存储区\"><a class=\"anchor\" href=\"#全局静态存储区\">#</a> 全局 / 静态存储区</h3>\n<p>类似于栈，通常用于那些在编译期间就能确定存储大小的变量，但存储在这的<strong>静态变量</strong>和<strong>全局变量</strong>在程序运行期间是全局可见</p>\n<h3 id=\"常量存储区\"><a class=\"anchor\" href=\"#常量存储区\">#</a> 常量存储区</h3>\n<p>用于在编译期间能确定存储大小的常量，在运行期间，存储区内的常量是全局可见的. <strong>这里要特别明确的是，这是一块只允许存放常量，不允许修改的内存</strong></p>\n<h3 id=\"四区对比\"><a class=\"anchor\" href=\"#四区对比\">#</a> 四区对比</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">比较项</th>\n<th style=\"text-align:center\">栈</th>\n<th style=\"text-align:center\">堆</th>\n<th style=\"text-align:center\">全局 / 静态区</th>\n<th style=\"text-align:center\">常量存储区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">存储内容</td>\n<td style=\"text-align:center\">局部变量</td>\n<td style=\"text-align:center\">变量</td>\n<td style=\"text-align:center\">全局变量、静态变量</td>\n<td style=\"text-align:center\">常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用域</td>\n<td style=\"text-align:center\">函数作用域</td>\n<td style=\"text-align:center\">函数作用域或语句块作用域</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">编译期间大小是否确定</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">大小</td>\n<td style=\"text-align:center\">1MB</td>\n<td style=\"text-align:center\">4GB</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存分配方式</td>\n<td style=\"text-align:center\">地址由高向低减少</td>\n<td style=\"text-align:center\">地址由低向高增加</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存是否可修改</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"进程在内存中的映射\"><a class=\"anchor\" href=\"#进程在内存中的映射\">#</a> 进程在内存中的映射</h2>\n<p>若存在如下关系调用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">func_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>则当程序载入操作系统中，其对应的内存映射如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>高地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span>             <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>              <span class=\"token operator\">|</span>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略去了一些无关的区域</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> env <span class=\"token function\">string</span> <span class=\"token punctuation\">(</span>环境变量字符串<span class=\"token punctuation\">)</span>      <span class=\"token operator\">|</span>\\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> \\</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> argv <span class=\"token function\">string</span> <span class=\"token punctuation\">(</span>命令行字符串<span class=\"token punctuation\">)</span>       <span class=\"token operator\">|</span>  \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> env <span class=\"token function\">pointer</span> <span class=\"token punctuation\">(</span>环境变量指针<span class=\"token punctuation\">)</span>       <span class=\"token operator\">|</span>  `SHELL`环境变量和命令行参数保存区</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> argv <span class=\"token function\">pointer</span> <span class=\"token punctuation\">(</span>命令行参数指针<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span>  <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token function\">argc</span> <span class=\"token punctuation\">(</span>命令行参数个数<span class=\"token punctuation\">)</span>            <span class=\"token operator\">|</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span>         main 函数的栈帧          <span class=\"token operator\">|</span>\\</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> \\</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>         func_1 函数栈帧          <span class=\"token operator\">|</span> \\</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   \\</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span>         func_2 函数栈帧          <span class=\"token operator\">|</span>   \\</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>     <span class=\"token function\">stack</span><span class=\"token punctuation\">(</span>栈区<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">|</span>         func_3 函数栈帧          <span class=\"token operator\">|</span>    <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span>                                 <span class=\"token operator\">|</span>  <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>               <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">|</span>                                 <span class=\"token operator\">|</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">|</span>         <span class=\"token function\">heap</span> <span class=\"token punctuation\">(</span>堆区<span class=\"token punctuation\">)</span>             <span class=\"token operator\">|</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">|</span>      <span class=\"token function\">Uninitialized</span><span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span> data    <span class=\"token operator\">|</span> 非初始化数据区</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">|</span>      Initialized data           <span class=\"token operator\">|</span> 初始化数据区</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">|</span>         Text                    <span class=\"token operator\">|</span> 代码区</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">(</span>内存低地址<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"函数的栈帧\"><a class=\"anchor\" href=\"#函数的栈帧\">#</a> 函数的栈帧</h3>\n<p>包含了函数的参数，至于被调用函数的 <strong>参数</strong> 是放在 调用函数的栈帧 还是被调用函数栈帧，则依赖于不同系统的实现.<br />\n 函数的栈帧中的局部变量以及恢复该函数的主调函数的栈帧 (即前一个栈帧) 所需要的数据，包含了主调函数的下一条执行指令的地址<br />\n函数调用时所建立的栈帧包含下面的信息:</p>\n<ol>\n<li>函数的返回地址。返回地址 是存放在 主调函数的栈帧 还是被 调用函数的栈帧 里，取决于不同系统的实现</li>\n<li>主调用函数的帧栈信息，栈底和栈顶</li>\n<li>为函数的局部变量分配栈空间</li>\n<li>为被调用函数的参数分配的空间取决具体的不同系统的系统实现</li>\n</ol>\n<h3 id=\"未初始化数据区bss\"><a class=\"anchor\" href=\"#未初始化数据区bss\">#</a> 未初始化数据区 (BSS)</h3>\n<p>用于存放程序的静态变量，这部分内存都是被初始化为零的；<br />\n 而初始化数据区用于存放可执行文件里的初始化数据.<br />\n 这两个区统称为数据区.</p>\n<p>PS: 并不给该段的数据分配空间，仅仅是记录了数据所需空间的大小</p>\n<h3 id=\"初始化数据区data\"><a class=\"anchor\" href=\"#初始化数据区data\">#</a> 初始化数据区 (Data)</h3>\n<p>初始化数据区用于存放可执行文件里的初始化数据.</p>\n<p>PS: 为数据分配空间，数据保存在目标文件中</p>\n<h3 id=\"代码区text\"><a class=\"anchor\" href=\"#代码区text\">#</a> 代码区 (Text)</h3>\n<p>只读区，存放了程序的代码.<br />\n 任何尝试对该区的写操作会导致段违法出错.<br />\n 代码区是被多个运行该可执行文件的进程所共享的.</p>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>随着函数调用层数的增加，函数栈帧是一块块地向内存低地址方向延伸的<br />\n随着进程中函数调用层数的减少 (即各函数调用的返回), 栈帧会一块块地被遗弃而向内存的高址方向回缩；<br />\n 各函数的栈帧大小随着函数的性质的不同而不等，由函数的局部变量的数目决定；<br />\n 进程对内存的动态申请是发生在 Heap (堆) 里的，随着系统动态分配给进程的内存数量的增加，<strong>Heap (堆) 有可能向高址或低址延伸</strong>，这依赖于不同 CPU 的实现，但一般来说是向内存的高地址方向增长的.<br />\n 在未初始化数据区 (BSS) 或者 Stack (栈区) 的增长耗尽了系统分配给进程的自由内存的情况下，进程将会被阻塞，重新被操作系统用更大的内存模块来调度运行.</p>\n<h2 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> init_global_var <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 全局 RW 区域</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> uninit_global_var<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 全局 ZI 区域</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> init_static_global_var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局 RW 区域</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> uninit_static_global_var<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 全局 ZI 区域</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 定义局部变量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> init_static_local_var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> uninit_static_local_var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> init_loacl_val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"😒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 定义字符串常量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"❤\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"(　o=^•ェ•)o　┏━┓\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 动态分配</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 释放</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈区: 变量地址================================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var:                                    %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init_loacl_val:                         %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_loacl_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str_arr:                                %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_1:                                  %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_1:                                  %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_2:                                  %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"堆区: 动态申请地址============================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc_4:                               %p\\n\"</span><span class=\"token punctuation\">,</span> ptr_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc_4:                               %p\\n\\n\"</span><span class=\"token punctuation\">,</span> ptr_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全局区-全局变量和静态变量======================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".bss段----------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全局外部无初值uninit_global_var:        %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uninit_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态外部无初值uninit_static_global_var: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uninit_static_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部无初值uninit_static_local_var:  %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uninit_static_local_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".data段---------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全局外部有初值init_global_var:          %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态外部有初值init_static_global_var:   %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_static_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部有初值init_static_local_var:    %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_static_local_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".文字常量区---------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文字常量地址str1:                       %p\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文字常量地址str2:                       %p\\n\\n\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".代码区---------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数地址:                               %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数地址:                               %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">int</span> func_var <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数参数                                %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数变量                                %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>func_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*≧︶≦))(￣▽￣* )ゞ\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211014105759.png\" alt=\"Windows\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211014110821.png\" alt=\"Linux\" /></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "面试"
            ]
        }
    ]
}
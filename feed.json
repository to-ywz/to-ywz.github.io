{
    "version": "https://jsonfeed.org/version/1",
    "title": "待风而起",
    "subtitle": "以梦为马 驰骋世间",
    "icon": "https://to-ywz.github.io/images/favicon.ico",
    "description": "如风一般悠长",
    "home_page_url": "https://to-ywz.github.io",
    "items": [
        {
            "id": "https://to-ywz.github.io/CS/Embedded/Keil%E5%88%87%E6%8D%A2%E8%87%B3ARMCC-V6/",
            "url": "https://to-ywz.github.io/CS/Embedded/Keil%E5%88%87%E6%8D%A2%E8%87%B3ARMCC-V6/",
            "title": "Keil切换至ARMCC-V6",
            "date_published": "2021-08-15T08:19:12.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"arm-compiler-6\"><a class=\"anchor\" href=\"#arm-compiler-6\">#</a> ARM Compiler 6</h1>\n<p>Keil V5 默认的编译器 是 ARM 自家的 ARM Compiler Version 5 (下面称为 AC5), 编译速度是很大的问题，不过编译出来的大小还是可以让人满意的.<br />\n 个人觉得 IAR 除了编译速度快，其实和 keil 差不多.<br />\n 但是现在 ARM Compiler Version 6 (下面称为 AC6) 的出现使得 Keil 的编译速度大幅上升.<br />\n 但是 从 AC5 切换到 AC6 并不是无缝切合的，需要进行一些配置.<br />\n 我会在这篇博客记录，我 从 AC5 切换到 AC6 出现过的问题，也方便诸位小伙伴查阅.</p>\n<h1 id=\"keil-如何抛弃-ac6\"><a class=\"anchor\" href=\"#keil-如何抛弃-ac6\">#</a> Keil 如何抛弃 AC6</h1>\n<p>在 keil 官方 是有很完整的一套说明的，诸位英语好可以自行看文档手册.<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vYXBwbm90ZXMvZmlsZXMvYXBudF8yOTgucGRm\"> 传送门</span><br />\n这里还有更加详细的文档:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vc3VwcG9ydC9tYW4vZG9jcy9hcm1jbGFuZ19pbnRyby8=\"> 传送门</span></p>\n<p>我安装 的是 Keil 5.33<br />\n 第一步，选择 AC6 编译器<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gthocvs3r9j30lq0gbq5c.jpg\" alt=\"alt\" /><br />\n 第二步，配置 优化等级<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gthovoonpvj30lq0gbju0.jpg\" alt=\"alt\" /><br />\n 优化等级配置为  <code>O1</code>  , 警告选择  <code>AC5</code>  级别，勾选 短枚举和  <code>wchar</code>  类型<br />\n第三步，修改汇编<br />\n这一步我们可以选择升级 CMSIS 的 pack 包，这样子我们新建的工程就可以直接进行编译了，<br />\n 无需修改汇编代码.<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gthpftmxvzj313i0m9gto.jpg\" alt=\"alt\" /><br />\n 如果，要修改老版本的代码，则需要自己去修改启动文件。和  <code>__weak</code>  等汇编代码<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gthpsba7whj30oh0msq81.jpg\" alt=\"alt\" /><br />\n 这里由于，代码量太多，我就不放了，诸位自行修改</p>\n<p>到这一步，就可以直接编译了.<br />\n 下面看看两个编译时间的对比<br />\n AC5:<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gthq3ciwu4j30i103xq3h.jpg\" alt=\"alt\" /><br />\nAC6:<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gthq440e6sj30hx04174s.jpg\" alt=\"alt\" /><br />\n 差不多快了 7 倍，而且所用的空间也明显减小了</p>\n<h1 id=\"bug2-rt-thrad-在-stm32cubemx-移植\"><a class=\"anchor\" href=\"#bug2-rt-thrad-在-stm32cubemx-移植\">#</a> bug2: RT-Thrad 在 STM32CubeMx 移植</h1>\n<p>我在移植 RT-Thread 的 底层调度器会出问题，会被识别为 C 的源码<br />\n所以需要进行修改<br />\n对文件右键选择 Option for File''<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gthqiyepajj30dl0j6myx.jpg\" alt=\"alt\" /><br />\n 选择汇编代码<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gthqjwe0ndj30lq0gb761.jpg\" alt=\"alt\" /><br />\n 这样子就不会出现 error 了</p>\n<p>正在找其他 bug, 未完...</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "keil",
                "ARMCCV6"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Embedded/DSP/TMS320F28379%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-CCS%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/",
            "url": "https://to-ywz.github.io/CS/Embedded/DSP/TMS320F28379%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-CCS%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/",
            "title": "TMS320F28379学习之旅:CCS工程的建立",
            "date_published": "2021-08-11T05:27:27.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>PS: 图床出问题了，图片会有些糊，新浪直接上传图像有很大失真，等大佬维护好图床之后，或者我找到新图床后，再去更新一下这里的图片</p>\n<p>电赛延期了，虽然我不觉的今年的控制类题会是网上说的什么球形机器人，不过我也对控制题不怎么感兴趣<br />\n刘哥说了要做，那就做呗.<br />\n 第一次说延期的时候打算直接拿 32 做球形机器人，现在开赛遥遥无期，就先学学 TI 的 DSP , 他们说这个搞电机控制非常好.<br />\n 原本是想让我拿一块 TI 的 TMS320F28553 学的，结果莫得，只能拿这个双核的 TMS320F28379 开始我的 DSP 学习之旅.<br />\nTI 的 CCS 和 资料找起来是真的麻烦.(我还是喜欢 MDK)<br />\n 学吧学吧，为了梦想！</p>\n<h1 id=\"最最最最大前提说明\"><a class=\"anchor\" href=\"#最最最最大前提说明\">#</a> 最最最最大前提说明</h1>\n<p><strong>PS: 本教程环境为 Windows10 + CCS 10.4.0.00006 + C2000Ware + VSCode</strong></p>\n<h1 id=\"安装-ccs-1040\"><a class=\"anchor\" href=\"#安装-ccs-1040\">#</a> 安装 CCS 10.4.0</h1>\n<p><strong>PS: CCS 安装路径不能有任何中文，计算机的用户也不能是中文的！！！</strong><br />\n 诸位如果是中文用户名，最简单的方法就是，重装电脑 (狗头).<br />\n 但事实就是重装系统是最省事的方法.<br />\n 不过肯定会有人像我这样，知道鸽子飞起来，不知道鸽子用啥飞的人.<br />\n 如果这样的话，自行搜索 windows 修改电脑用户名称，大部分网上教程还是能说明白的.<br />\n 直接修改是没用的，还要修改注册表，桌面路径，C 盘的用户名称.<br />\nC2000Ware 这玩意我装了三天，删了好多次注册表，才装上去的.<br />\n 再也不用中文用户名了，颓废.</p>\n<p>言归正传，CCS 的 安装包可以直接去官网下载，这里给诸位贴一个下载链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL3Rvb2wvQ0NTVFVESU8=\"> 传送门</span><br />\n进去之后保持英文界面，中文界面可能导致找不到下载界面，但是可以鼠标右键谷歌翻译 (封杀成这样了吗...)<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtew7jnd84j31hc0pejxm.jpg\" alt=\"alt\" /><br />\n 然后点击 Download 进入下载区域<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtewgfetxij317u0b3wge.jpg\" alt=\"alt\" /><br />\n 点击第一个，会弹出一个对话框选择第一个里的 windows 版本<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtewh54xj7j30qk0jimyy.jpg\" alt=\"alt\" /><br />\n 下载完毕后和正常软件安装方式类似<br />\n不过 CCS 这里有一个检测，分别检测 系统，安装路径，中文字符 (Unicode 字符) 和反病毒软件<br />\n其中 Unicode 检测就是中文字符检测，前三个要是 有异常是无法安装 CCS 的.<br />\n 后面杀毒软件是个提示，无关紧要，一般不出问题<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtexd22dbgj30ma0hf40h.jpg\" alt=\"alt\" /><br />\n 然后就是安装路径，安装包选择 (没必要选 full installation),<br />\n 接下去就是选择软件包了，C2000 少不了，顺带安装了 MSP430 和 432<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gtewipift0j30ev0j5ta8.jpg\" alt=\"alt\" /><br />\n 然后是调试器安装，我全选了，诸位按需修改<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtexj3cijqj30jt0853yu.jpg\" alt=\"alt\" /><br />\n 后面就是无脑 next, 在经过数分钟的猫猫摸鱼后，CCS 就安装完毕了</p>\n<h1 id=\"安装-c2000ware\"><a class=\"anchor\" href=\"#安装-c2000ware\">#</a> 安装 C2000Ware</h1>\n<p>安装这是因为，28379 毕竟是 32 位的 DSP 辣么多寄存器，配置不过来，还是得用库函数<br />\n C2000Ware 里有大量的例程，可以用于学习，能在学东西的时候少走些弯路.<br />\n 话又说会来，底层的寄存器在配置的时候发生了什么变化，还是需要知道的<br />\n PS: 安装这一块我就不截图了，放个链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tLmNuL3Rvb2wvY24vQzIwMDBXQVJFP2tleU1hdGNoPUMyMDAwV2FyZSUyMDElMjAwMCUyMDA2JTIwMDAlMjBzZXR1cCZhbXA7dGlzZWFyY2g9U2VhcmNoLUNOLVByb2R1Y3Rz\"> 传送门</span></p>\n<p>C2000Ware 的安装要比 CCS 来的简单，我们只需要选择路径就好，<br />\n 除了 C2000Ware 之外还有一个 软件也有历程，但是说是历程少，我就没怎么留心<br />\n又是几分钟的猫猫摸鱼，装完之后没有快捷方式会出现在你安装路径中<br />\n<strong> PS: 用户名是中文但是修改成英文的猫猫需要注意，可能会出现找不到开始菜单栏的错误，在安装过程中，如果出现这个错误，就乖乖的去把注册表里的你之前的中文用户名相关的信息全部改了我也不太清楚是哪一个东西的问题，我是改了快 6 个点</strong></p>\n<p>安装完毕后大概是这样的<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gtewkm8ef7j30my0bb0ut.jpg\" alt=\"alt\" /><br />\nboards 文件夹是 TI 的 LaunchPad 的历程<br />\n device_support 和 driverlib 都是库函数 具体区别我没分清楚<br />\n libraries 和 example 都是 历程，具体区别我也没分清楚，以后学明白了再回来补充说明</p>\n<h1 id=\"新建-empty-工程\"><a class=\"anchor\" href=\"#新建-empty-工程\">#</a> 新建 Empty 工程</h1>\n<p>这里我比较懒，而且不熟悉 手中的 LaunchPad 到底需要什么 配置我选择直接导入历程中的 empty_project<br />\n 等以后学明白再来更新，徒手建立新工程的方法<br />\n打开 CCS , 选择工作区，自行新建文件夹<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtdwd20zi3j30ns0a7dhc.jpg\" alt=\"alt\" /><br />\n 进去后界面如下，点击 file 然后选择 import<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gtewmg2shoj31hc0sxwih.jpg\" alt=\"alt\" /><br />\n 接着会弹出一个导入类型选择，我们选 CCS project<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gtewn4ojvmj30gl0f2gmx.jpg\" alt=\"alt\" /><br />\n 选完之后会出现一个新的界面，点击 Browse 在 C2000Ware 安装的路径下找到自己型号的 Project<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtewpa3m8jj30gx0mamz9.jpg\" alt=\"alt\" /><br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtewp6fjmqj30vx0jhwhv.jpg\" alt=\"alt\" /><br />\n 然后点击 Finish, 就可以看到这个界面了，同时 import 的工程会在你的工作区中生成，不会在原文件中 修改<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtewr2y4nkj31hc0srgrp.jpg\" alt=\"alt\" /><br />\n 在 CCS 中没有 Download , 只有 DEBUG, 习惯就好，至于其他功能我还在琢磨</p>\n<h1 id=\"学习启动仪式点个灯\"><a class=\"anchor\" href=\"#学习启动仪式点个灯\">#</a> 学习启动仪式：点个灯</h1>\n<p>一个空工程建立完毕了，为了有点仪式感，点个灯庆祝一下.<br />\n 我去翻了一下原理图，D9 和 D10 分别是 pin 31 和 pin 34.<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtdv9v6t7aj30ti0ksq4q.jpg\" alt=\"alt\" /><br />\n 无论啥板子，LED 点亮无非就是 GPIO 操作.<br />\n 把 GPIO 配置成 什么模式，上拉还是下来，输出什么电平，不认识寄存器直接先去查查 库函数<br />\n奈何我英语太差没看明白，直接去翻例程，发现 涉及到几个函数</p>\n<p>配置引脚工作模式<br />\n <code>void GPIO_setPadConfig(uint32_t pin, uint32_t pinType)</code> <br />\n 配置引脚输出方向<br />\n <code>void GPIO_setDirectionMode(uint32_t pin, GPIO_Direction pinIO)</code> <br />\n 配置引脚出电压<br />\n <code>static inline void GPIO_writePin(uint32_t pin, uint32_t outVal)</code></p>\n<p>这些函数在库里都有注释，不过全是英文的，还在我的阅读能力之内.<br />\n 注释可以直接看到参数范围，或者取什么参数.<br />\n 这里我直接贴一下我的源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @file main.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author BlackSheep (blacksheep.208h@gmail.com)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @brief </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @version 0.1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @date 2021-08-11</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @copyright Copyright (c) 2021</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Included Files</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// LED Marco</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LED_ON</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LED_OFF</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEVICE_DELAY_MS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// funcation</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setupLED</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_trunON</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_turnOFF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// Initializes system control, device clock, and peripherals</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">Device_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">Device_initGPIO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// Initializes LED GPIO</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">setupLED</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">Interrupt_initModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">Interrupt_initVectorTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// Enable interrupts and debug event</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    EINT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// E INT: Enable interrupt</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    ERTM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// E RTM:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">250000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">500000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_trunON</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">GPIO_writePin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> LED_ON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_trunOFF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">GPIO_writePin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> LED_OFF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">GPIO_togglePin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setupLED</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED1<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED1<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED2<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED2<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// End of File</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr></table></figure><p>现象是 LED1 闪烁 先亮，然后 250ms 后 LED2 亮，然后熄灭顺序也相同，<br />\n 不过我是用了 gpio 反转的函数 原理和上面差不多</p>\n<h2 id=\"好了-这篇新建工程就这样了以上是我个人观点-如有不正-望大佬斧正\"><a class=\"anchor\" href=\"#好了-这篇新建工程就这样了以上是我个人观点-如有不正-望大佬斧正\">#</a> 好了，这篇新建工程就这样了.<br />\n 以上是我个人观点，如有不正，望大佬斧正</h2>\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "TMS320F28379D",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Embedded/STM32/STM32TIM%E7%BC%96%E7%A0%81%E5%99%A8%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE/",
            "url": "https://to-ywz.github.io/CS/Embedded/STM32/STM32TIM%E7%BC%96%E7%A0%81%E5%99%A8%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE/",
            "title": "STM32TIM编码器模式配置",
            "date_published": "2021-08-09T11:43:23.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"stm32-hal库-编码器模式配置\"><a class=\"anchor\" href=\"#stm32-hal库-编码器模式配置\">#</a> STM32 HAL 库 编码器模式配置</h1>\n<p>前几天准备电赛的时候，朋友编码器数值读不出来，我好奇也就凑合了一下，记录一下配置过程</p>\n<p><strong>PS: 开发环境 STM32 HAL 库 + STM32CubeMX + MDK + VSCode + Windows10</strong></p>\n<h2 id=\"相关硬件\"><a class=\"anchor\" href=\"#相关硬件\">#</a> 相关硬件</h2>\n<h3 id=\"电机\"><a class=\"anchor\" href=\"#电机\">#</a> 电机</h3>\n<p>用的是 370 电机，减速器为 513, 减速比为 1:30<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gtexu7vkzdj30j612c782.jpg\" alt=\"alt\" /></p>\n<h3 id=\"编码器\"><a class=\"anchor\" href=\"#编码器\">#</a> 编码器</h3>\n<p>用的和电机一体的霍尔编码器，不知直到从哪买的，淘宝上查出来是 13pr<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtexu8mnflj30j612cju2.jpg\" alt=\"alt\" /></p>\n<h3 id=\"主控\"><a class=\"anchor\" href=\"#主控\">#</a> 主控</h3>\n<p>用的普中的 407 核心板，换了一个牛角座，没有使用它 usb 转串口<br />\n跳线帽一接上，对接 Xshell Jlink 直接红灯.<br />\n 用了一对 lora 的无线串口，外部高速晶振 8M<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtexx48tm8j30j612cn2q.jpg\" alt=\"alt\" /></p>\n<h2 id=\"hal库配置\"><a class=\"anchor\" href=\"#hal库配置\">#</a> HAL 库配置</h2>\n<h3 id=\"工欲善其事\"><a class=\"anchor\" href=\"#工欲善其事\">#</a> 工欲善其事</h3>\n<p>学习一个功能最好的方法就是直接查阅数据手册.<br />\n 脉冲计数最有可能是定时器的输入捕获功能，所以咱先去看看有没有定时器有没有对应的模式，这种工作模式基本都在 通用或者高级 定时器上，先去看看高级定时器<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gtfgdpzhrgj30zw0ohjxr.jpg\" alt=\"alt\" /><br />\n 哎，有。那再看看通用定时器<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtfgdzibvpj30yk0ln79p.jpg\" alt=\"alt\" /><br />\n 也有，TIM2 和 TIM5 的 counter 还是 32 位的<br />\n这样子就齐活了，现在去看看 编码器转起来的波形密度，决定用哪个定时器<br />\n 13 ppr 我实在是不明白什么意思，只能等转起来直接看数据了<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gtfh4tkcfqj31o00u0q6p.jpg\" alt=\"alt\" /><br />\n 啧，这只能用 TIM2 先顶着了。接下去就去新建工程啦</p>\n<h3 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 基本配置</h3>\n<p>新建 HAL 库的新工程我就不详细说了，不会的可以参见这篇博客: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0VtYmVkZGVkL1NUTTMyLyVFNiU5NiVCMCVFNSVCQiVCQUhBTCVFNSVCQSU5MyVFNSVCNyVBNSVFNyVBOCU4QiVFNyU5QSU4NCVFNiU5NiVCOSVFNiVCMyU5NS8=\">传送门</span>.<br />\n 这里我就简单的说一下基本配置</p>\n<h4 id=\"sys-配置\"><a class=\"anchor\" href=\"#sys-配置\">#</a> SYS 配置</h4>\n<p>为了防止锁死芯片，Debug 选项配置为  <code>Serial Wire</code></p>\n<h4 id=\"时钟配置\"><a class=\"anchor\" href=\"#时钟配置\">#</a> 时钟配置</h4>\n<p>我使用外部高速晶振，<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtf7sq0tlij30kz0910t5.jpg\" alt=\"Encoder Mode\" /><br />\n 外部晶振 8M, 主频 168M, 时钟树如下<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtf8f2dia3j31860jqn0h.jpg\" alt=\"alt\" /></p>\n<p>然后为了便于查看结果开启一路串口 USART1<br />\n 配置如下<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gtfd2ycx0jj30l3075jrx.jpg\" alt=\"alt\" /></p>\n<p>由于 TIM2 的  <code>Counter Period</code>  是 32 位的所以我在这里选择了 TIM2<br />\n 没有进行分频，计数值拉到最大，防止溢出中断，通道 1 和通道 2 被编码器模式复用，所以编程灰色， <code>combined Channels</code>  选择  <code>Encoder Mode</code> <br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtf4uingbxj30ie0m00vd.jpg\" alt=\"alt\" /></p>\n<p>然后成功工程即可</p>\n<h2 id=\"相关函数\"><a class=\"anchor\" href=\"#相关函数\">#</a> 相关函数</h2>\n<p>我们这里就简单的使用 DMA 和 IT 模式以后再探索</p>\n<h3 id=\"启动编码器计数\"><a class=\"anchor\" href=\"#启动编码器计数\">#</a> 启动编码器计数</h3>\n<p>Encoder Mode 的 初始化函数和开启函数如下 如下图:<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gtfdkc78r6j30sz09hgp0.jpg\" alt=\"alt\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_TIM_Encoder_Start</span><span class=\"token punctuation\">(</span>TIM_HandleTypeDef <span class=\"token operator\">*</span>htim<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数是 对应的定时器 htim2, 因为有 A 相位，B 相位 使用两个通道，所以使用参数 <code>TIM_CHANNEL_ALL</code> <br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtfexa2dcej30nw083ab3.jpg\" alt=\"alt\" /></p>\n<h3 id=\"获取编码器数值\"><a class=\"anchor\" href=\"#获取编码器数值\">#</a> 获取编码器数值</h3>\n<p>获取脉冲方向，返回方向 0 或 1</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__HAL_TIM_IS_TIM_COUNTING_DOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取脉冲次数函数，返回脉冲次数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__HAL_TIM_GET_COUNTER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>TIM2 定时器 Encoder 模式读出的数值自带方向 (正负)</p>\n<h2 id=\"简单读取数值测试\"><a class=\"anchor\" href=\"#简单读取数值测试\">#</a> 简单读取数值测试</h2>\n<p>我这里写了一个简单的测试样例</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getEncoderValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> Direction <span class=\"token operator\">=</span> <span class=\"token function\">__HAL_TIM_IS_TIM_COUNTING_DOWN</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>htim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> GetData <span class=\"token operator\">=</span> <span class=\"token function\">__HAL_TIM_GET_COUNTER</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>htim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encoder: %d\\r\\n\"</span><span class=\"token punctuation\">,</span> GetData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果如下<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtgf8wal2oj31950pgq7s.jpg\" alt=\"alt\" /><br />\n 我测出这个电机转一圈会产生 600 次脉冲，TIM2 和 TIM5 读出的 脉冲数自带方向当从 0 开始反向选装 printf 打印出的数据自带符号，</p>\n<p>使用 printf 记得重定向一下  <code>printf</code> <br />\n 这里提供一下全版本的 编译器的 printf 重定向</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span> __CC_ARM <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PUTCHAR_PROTOTYPE</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span>        </span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * Arm Compiler above 6.10.1 (armclang)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>__ARMCC_VERSION<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>__ARMCC_VERSION <span class=\"token operator\">>=</span> <span class=\"token number\">6100100</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PUTCHAR_PROTOTYPE</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * GNU Compiler</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span> __GNUC__ <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* With GCC, small printf (option LD Linker->Libraries->Small printf</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   set to 'Yes') calls __io_putchar() */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PUTCHAR_PROTOTYPE</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token function\">__io_putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>PUTCHAR_PROTOTYPE</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 具体哪个串口可以更改 huart1 为其它串口</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>huart1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h2>\n<p>大概小结一下，开启编码器模式:</p>\n<ol>\n<li>选定定时器，选定 Encoder 模式</li>\n<li>配置 分配因子 和 计数周期</li>\n<li>使用相关函数 获取计数值</li>\n</ol>\n<p>以上皆为个人简单实践，如有错误，望斧正.</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": []
        },
        {
            "id": "https://to-ywz.github.io/CS/Embedded/STM32/RT-Thread-Nano%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5/",
            "url": "https://to-ywz.github.io/CS/Embedded/STM32/RT-Thread-Nano%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5/",
            "title": "RT-Thread 线程间同步",
            "date_published": "2021-08-07T08:42:32.000Z",
            "content_html": "<h2 id=\"前情\"><a class=\"anchor\" href=\"#前情\">#</a> 前情</h2>\n<p>PS: 以下内容参考 RT-Thread 标准版本文档<br />\n RTOS 的加入大大的减少了时序冲突，也带来了新的问题.<br />\n 如何让线程 按照一定顺序执行？<br />\n 线程的执行顺序由优先级决定<br />\n同等优先级读入顺序，顺序执行，单次最大执行时间由时间片决定</p>\n<p>按这种情况，则会存在 一块 RAM 内 在同一时间内，被两个线程操作.<br />\n 例如，LCD 显示 Camera 采集的图像这个需求.<br />\n 仅仅依赖上述限制，就会出现，LCD 开开心心的在画图，摄像头啪的一下，很快啊，LCD 没有闪，LCD 被换了一幅图都没有发觉，然后继续画，就出现 &quot;脏数据&quot; , 图就显示异常了</p>\n<p>这时候就涉及到了 共享内存的排他性，我们需要做到同一时间内有且仅有一个线程对共享内存进行操作，<br />\n 如上面举的例子，LCD 和 Camera 操作内存的时候 需要两个线程需要互斥并且需要按一定顺序去执行，这样子才能实现目标功能<br />\n这种行为就被称为同步.</p>\n<p>几个概念:</p>\n<ol>\n<li>\n<p>什么是同步？<br />\n 同步是指按预定的先后次序进行运行.<br />\n 线程的同步是指 多个线程 通过 特定机制 来控制线程之间的 执行顺序.<br />\n 换而言之，没有同步，线程之间将是无序的.<br />\n 并非说无序不好，如果线程和线程之间 本没有冲突 或 临界资源 那么，无序也无可厚非</p>\n</li>\n<li>\n<p>什么是临界区？<br />\n 多个线程同时 访问或操作 统一块区域 (代码).</p>\n</li>\n<li>\n<p>什么线程互斥<br />\n对于临界资源访问的排他性，当多个线程都需要使用临界资源时，任何时刻最多只允许一个线程去使用.<br />\n 线程互斥可以视为一个特殊的线程同步</p>\n</li>\n</ol>\n<p>对于线程同步，无论使用什么方法，其核心都是: <mark>临界区有且仅有最多一个线程运行</mark></p>\n<h2 id=\"线程同步方式\"><a class=\"anchor\" href=\"#线程同步方式\">#</a> 线程同步方式</h2>\n<h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<h4 id=\"什么是信号量\"><a class=\"anchor\" href=\"#什么是信号量\">#</a> 什么是信号量:</h4>\n<p>RT-Thraed 官方 举的例子很形象，我就发表自己的见解了，下面来自 RT-Thraed 标准文档</p>\n<ol>\n<li>当停车场空的时候，停车场的管理员发现有很多空车位，此时会让外面的车陆续进入停车场获得停车位</li>\n<li>当停车场的车位满的时候，管理员发现已经没有空车位，将禁止外面的车进入停车场，车辆在外排队等候</li>\n<li>当停车场内有车离开时，管理员发现有空的车位让出，允许外面的车进入停车场待空车位填满后，又禁止外部车辆进入</li>\n</ol>\n<p>这个例子中，管理员相当于信号量，空车位的个数为信号量的值，停车区相当于临界区，车辆就相当于线程<br />\n车辆 获取 车位，可以视为 线程 通过尝试拿走信号量的值，来获取 临界资源</p>\n<h4 id=\"工作机制\"><a class=\"anchor\" href=\"#工作机制\">#</a> 工作机制</h4>\n<p>每个信号量对象都有一个信号量值和等待线程队列<br />\n信号量的值对应了信号量对象的实例数目，资源数目<br />\n当信号量值为 0 时，线程再通过 信号量 申请进入临界区的时候，就会被挂起到该信号量的等待队列上，直到新的信号量实例产生</p>\n<h4 id=\"信号量控制\"><a class=\"anchor\" href=\"#信号量控制\">#</a> 信号量控制</h4>\n<p>在 RT-Thread 中，信号量控制块 (scb) 是操作系统控制信号量的一个数据结构，由  <code>struct rt_semaphore</code>  表示，<br />\n 其句柄由  <code>rt_sem_t</code>  表示.<br />\n 简单来说，信号量控制块 在 C 语言 中的体现 是信号量结构体，而句柄就是指向这个数据类型的指针<br />\n在 rt-thraed 中 信号量 由 rt_ipc_object 派生，被 IPC 容器管理，最大值为 65535.</p>\n<p>至于什么是容器，我理解 为同种功能 或 同种 通信方式共同存储的地方，例如 IPC 容器，就只存放进程间通信的 结构体，什么信号量，互斥量，管道，消息队列之类<br />\n更简单点说就是，我们把水果分为 苹果，香蕉，梨... 但是他们都是水果这个容器，但是 西红柿想进来就不行，因为他是蔬菜，不属于水果这个容器</p>\n<p>PS: 初始值为 1 的信号量，为二值信号</p>\n<h4 id=\"信号量的管理\"><a class=\"anchor\" href=\"#信号量的管理\">#</a> 信号量的管理</h4>\n<p>在 RT-Thread 中 关于 信号量的 以共有一下四种:</p>\n<ol>\n<li>创建 / 初始化:  <code>rt_sem_create/init()</code> .  <code>create</code>  为动态创建， <code>init</code>  为静态创建</li>\n<li>获取       :  <code>rt_sem_take/trytake()</code> .  <code>trytake</code>  是非堵塞 获取 信号量.</li>\n<li>释放       :  <code>rt_sem_release()</code> .</li>\n<li>删除 / 脱离  :  <code>rt_sem_delete/detach()</code> .  <code>detach</code>   仅仅是将信号量从链表中移除<br />\n<img data-src=\"https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/ipc1/figures/06sem_ops.png\" alt=\"alt 图片来源: https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/ipc1/ipc1?id=%e4%bf%a1%e5%8f%b7%e9%87%8f\" /></li>\n</ol>\n<h4 id=\"创建信号量\"><a class=\"anchor\" href=\"#创建信号量\">#</a> 创建信号量</h4>\n<p>RT-Thread 中，创建信号量接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_sem_t</span> <span class=\"token function\">rt_sem_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token class-name\">rt_uint32_t</span> value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token class-name\">rt_uint8_t</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当这个函数被调用的时候，系统会从对象管理器中申请一个 semaphore 对象，并初始化这个对象，然后初始化 父类 IPC 对象以及 semaphore 相关部分<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gtexjpags2j30ma0didhc.jpg\" alt=\"alt\" /></p>\n<p>函数参数中有一个 flag. 这个 参数 代表了当信号量值为 0 时，线程等待时的排序方式.<br />\n <code>RT_IPC_FLAG_FIFO</code> : 先进先出，线程采用队列的方式，谁先来谁先处理<br />\n <code>RT_IPC_FLAG_PRIO</code> : 等待队列按优先级排队，</p>\n<p>PS:  <code>RT_IPC_FLAG_FIFO</code>  属于非实时调度方式，除非应用程序非常在意先来后到，否则建议采用 RT_IPC_FLAG_PRIO, 即确保线程的实时性</p>\n<h4 id=\"删除信号量\"><a class=\"anchor\" href=\"#删除信号量\">#</a> 删除信号量</h4>\n<p>删除 create 生成的信号量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当释放 信号量时，有线程正在等待信号量，那么函数会先唤醒等待在该信号量上的线程，然后 再释放信号量资源.<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt9dn3w1lgj30j6077gmu.jpg\" alt=\"alt\" /></p>\n<h4 id=\"初始化信号量-和-脱离信号量\"><a class=\"anchor\" href=\"#初始化信号量-和-脱离信号量\">#</a> 初始化信号量 和 脱离信号量</h4>\n<p>对于静态信号量，内存空间再编译时就被分配了，放在数据段或未初始化的数据段上，就像放在 猫舍的 猫猫<br />\n这时候，只需要 init 信号量即可，让其回到自己家中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span>       sem<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 信号量对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span>     <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 信号量名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    <span class=\"token class-name\">rt_uint32_t</span>    value<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 信号量初始值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token class-name\">rt_uint8_t</span>     flag<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 信号量标志</span></pre></td></tr></table></figure><p>与动态创建相比，init 少了申请内存空间的部分，其他还是一致的<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gt9ew341z5j30ha0aemy3.jpg\" alt=\"alt\" /></p>\n<p>与动态创建的信号量不同的是，静态的信号量无法被释放，只能从内核对象管理器中移除，<br />\n 毕竟空间是编译过程中分配出来的，又不能让程序自己再编译自己一次<br />\n函数接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_detach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>于动态创建的 信号量相似，内核先唤醒挂在该信号等待列表上的线程，然后将这信号量从内核管理器上脱离.<br />\n 等待线程会获得一个错误码.</p>\n<p>PS: 对于那些一直要使用的 信号量 建议直接设置为静态的，这样子可以保证线程启动时，即存在信号量.<br />\n 对于 在一定时间内使用的信号量，或者是间歇性使用的信号量，则 使用 create 来创建，这样子有利于内存资源 的重复利用</p>\n<h4 id=\"获取信号量\"><a class=\"anchor\" href=\"#获取信号量\">#</a> 获取信号量</h4>\n<p>在 RT-Thread 中 存在两种 获取信号量的方式：阻塞获取 和 非阻塞获取</p>\n<p><strong>对于阻塞获取:</strong><br />\n 当线程执行到获取信号量时，如果 信号量 非空，则使信号量 -1, 并执行对应的程序<br />\n如果为空，申请该信号量的线程将根据 time  参数的情况选择直接返回、或挂起等待一段时间、或永久等待，直到其他线程释放信号量或者超时</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_take</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span>    sem<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 信号量对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token class-name\">rt_int32_t</span>  time  <span class=\"token comment\">// 指定的等待时间，单位是操作系统时钟节拍</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>time</code>  参数除了正常 的参数之外有两个宏，分别代表，永久等待 和 直接返回.<br />\n <code>RT_WAITING_NO</code>  和  <code>RT_WAITING_FOREVER</code> .</p>\n<p><strong>对于非阻塞获取:</strong><br />\n 如果 我们不想线程某个线程 在数据采集时 就被挂起，则可以使用 无等待的方式获取信号量<br />\n接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_trytake</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当 信号量值不可用时，线程直接返回  <code>-RT_ETIMOUT</code>  然后回到正常执行线程其他程序<br />\n PS: 当  <code>time</code>  参数设置为  <code>RT_WAITING_NO</code>  时 等价于 非阻塞获取</p>\n<h4 id=\"释放信号量\"><a class=\"anchor\" href=\"#释放信号量\">#</a> 释放信号量</h4>\n<p>释放信号量可以唤醒挂起在该信号量上的线程.<br />\n 接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当 信号量的等待线程中没有线程时，信号量值 +1, 如果存在等待线程则由该线程获取其产生的信号</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtexkb7qy9j30hf0ki40q.jpg\" alt=\"alt\" /></p>\n<h4 id=\"应用场合\"><a class=\"anchor\" href=\"#应用场合\">#</a> 应用场合</h4>\n<p>我觉得 信号量十分适合 传感器数据采集线程 和 显示线程的同步.<br />\n 准确来说，但凡涉及到多个线程同时访问 统一临界资源的时候就很合适，毕竟 &quot;脏数据&quot; 还是很烦人的</p>\n<p>中断和线程之间也可以 使用信号量来 同步<br />\n最典型的就是串口通信.<br />\n 当串口没有收到数据的时候，数据处理线程被挂起<br />\n一旦串口收到数据接收完数据后释放信号量，如上文所属，当等待列表有线程挂起时，信号量已就位就会直接启动等待线程队列的线程<br />\n最典型的例子就是 FinSH, msh 交互时响应速度极快</p>\n<p>还可以用于资源计数器<br />\n这一块就类似 CPU 和高速缓存。可能是数据采集线程过于慢 而 数据处理线程需要数据过多且处理速度快，<br />\n 这样子就可以 初始化信号量不为 1 , 这样子通过多次 take 信号量直到信号量位空才开始工作，就能达到 降速同步的效果</p>\n<p>PS: 一般资源计数类型多是混合方式的线程间同步，因为对于单个的资源处理依然存在线程的多重访问，这就需要对一个单独的资源进行访问、处理，并进行锁方式的互斥操作.</p>\n<h3 id=\"互斥量\"><a class=\"anchor\" href=\"#互斥量\">#</a> 互斥量</h3>\n<h4 id=\"什么是互斥量\"><a class=\"anchor\" href=\"#什么是互斥量\">#</a> 什么是互斥量</h4>\n<p>这一块官方的例子就不太合适了.<br />\n 我来说一说我的理解，我觉得信号量就是一个示波器，当你在使用的时候，其他人就不能使用，只有等你使用完毕后，其他人才能去使用</p>\n<h4 id=\"工作机制-2\"><a class=\"anchor\" href=\"#工作机制-2\">#</a> 工作机制</h4>\n<p>互斥量可以视为 一个比较特殊的 信号量，因为只有 0 和 1.<br />\n 但与信号量不同的地方在于，互斥量支持递归访问，和 避免优先级反转.<br />\n 例如，数据处理优先级的高，但是由于数据并没有次啊及完毕，处理线程只能先挂起，等待采集线程执行完毕<br />\n这时就可以考虑使用互斥锁.<br />\n 互斥量只有两种状态，开锁 | 闭锁。当有线程持有它时，互斥量处于上锁状态。当这个线程解锁互斥量时，互斥量处于 空闲态.<br />\n 当一个线程持有 互斥量时，其他线程无法对齐进行开锁或持有，而且互斥量的拥有者能再此获得这个锁.<br />\n 就类似于你给你的保险柜又套了一个更大的保险柜.</p>\n<p>官方文档里有一句话说的不太明白:<br />\n <code>这个特性与一般的二值信号量有很大的不同：在信号量中, 因为已经不存在实例, 线程递归持有会发生主动挂起（最终形成死锁）</code> <br />\n可能官方认为看到这的都是有很扎实 操作系统功底 的人，所以没有介绍一下 什么是递归持有，什么是死锁以及 递归持有 是如何形成死锁的<br />\n我在这简单的说一下下，毕竟我 OS 学的也很烂，要不然也不至于来看 理解多线程编程</p>\n<p><strong>死锁:</strong><br />\n 所谓的死锁就是 两个或两个以上的线程互相持有对方所需要的资源，如果线程不主动释放资源，两个程序都处于挂起态，一直不被执行<br />\n产生死锁需要满足一些条件:</p>\n<ol>\n<li>互斥：释放和拿走信号都是一个线程，而且这个信号量最大值为 1.</li>\n<li>请求和保持：一个线程中存在释放和获取两个操作</li>\n<li>不剥夺：信号量的最大值为 1</li>\n<li>循环等待：在 RTT 中为 rt_sem_take 使用  <code>RT_WAITING_FOREVER</code>  参数<br />\n一般来说，单线程死锁只可能是递归持有 (虽然我也不明白为什么要递归持有)</li>\n</ol>\n<p>满足以上条件的 代码大概长成这样 (不是死锁):</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thread1_entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>parameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 互斥 只有 0 和 1, 我拿走后，其他线程想用只能等我释放</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">rt_sem_create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sem_lock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> RT_IPC_FLAG_PRIO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 尝试上锁，拿不到就死等，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取信号量，获取成功后就可以对临界区数据写入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">handle_RecData</span><span class=\"token punctuation\">(</span>RecBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里进行数据处理，RecBuf 为临界区数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量，让其他线程可以处理临界区数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 开锁，我不放开，没有人能拿到这个锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现实中死锁的例子大概就像这样:<br />\n<img data-src=\"https://s2.51cto.com/oss/202012/17/0dfeb6e46a3a3266229402c70e8fa12f.jpg-wh_651x-s_1043876250.jpg\" alt=\"alt\" /></p>\n<p>两个线程的死锁大概是这样子的 (写代码有些麻烦，就直接画个图，很丑つ﹏⊂)<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtab842orgj31o00u0tdr.jpg\" alt=\"alt\" /><br />\n 双横线的箭头表示当前执行到的位置，单线箭头表示 语句之间的等待关系<br />\n线程 1 和 线程 2 相互等待所需的资源被释放就形成死锁</p>\n<p><strong>递归持有</strong><br />\n递归还是很熟悉的，所谓的递归持有就是在一个线程中多次 take 了 同一个信号量.<br />\n 但由于 该信号量是二值信号，在第一次被 take 之后，信号量就归为 0. 如果没有外部的线程释放信号量，或者当前线程主动释放信号量，那么就会产生死锁</p>\n<p>代码在 rt-thread 中的 样子大概是这样的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thread1_entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>parameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">/* 临 界 区，上 锁 进 行 操 作 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取信号量，此时信号量为被获取，变成了 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t  操作临界区 1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 想再次获取，但是此时由于信号量为 0, 获取不到就一直等待，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 但是释放信号量的操作在下面，所以信号量根本释放不了，这个线程就锁死在上面那句语句，成了解不开的死锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 所以下面的部分永远不会执行到</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    操作临界区 2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量，让其他线程可以处理临界区数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量，让其他线程可以处理临界区数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用二值信号进行递归持有很容易导致死锁，所以遇到这种情况建议直接使用 互斥量.</p>\n<p><strong>关于优先级反转</strong><br />\n所谓的优先级反转就是，因为逻辑设计不合理而导致线程真正的优先级和预设的优先级不同.<br />\n 当 高优先级的线程  <code>A</code>  和 低优先级的线程  <code>B</code>  共享相同资源 buf 时，<br />\n 会存在 低优先级 <code>B</code>  占用  <code>buf</code> , 而 高优先级的  <code>A</code>  已就绪，<br />\n 这时候就会 切换到  <code>A</code> , 然而  <code>buf</code>  被占用， <code>A</code>  只能先被挂起，等待  <code>B</code>  释放  <code>buf</code> <br />\n 当这时候如果存在一个优先级介于  <code>A</code>   <code>B</code>  之间的线程  <code>C</code> , 且  <code>C</code>  在  <code>B</code>  未释放  <code>buf</code>  的时候就 进入了就绪态<br />\n那么  <code>B</code>  就会被中断，先去执行  <code>C</code> , 这样子就导致  <code>A</code>  线程的优先级比  <code>C</code>  高，但 后于  <code>C</code>  执行<br />\n这就算优先级反转</p>\n<h4 id=\"互斥量的管理方式\"><a class=\"anchor\" href=\"#互斥量的管理方式\">#</a> 互斥量的管理方式</h4>\n<p>与信号量类似，互斥量 也分为 静态和动态 创建，对应的废弃方式也是分为 脱离 和 删除.<br />\n 释放和获取的接口是一致的<br />\n<img data-src=\"https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/ipc1/figures/06mutex_ops.png\" alt=\"alt 图片来源: https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/ipc1/ipc1?id=%e4%ba%92%e6%96%a5%e9%87%8f\" /></p>\n<h4 id=\"创建和删除互斥量\"><a class=\"anchor\" href=\"#创建和删除互斥量\">#</a> 创建和删除互斥量</h4>\n<p>这一块是 动态 创建和删除 互斥量<br />\n<strong>创建互斥量</strong><br />\n接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_mutex_t</span> <span class=\"token function\">rt_mutex_create</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 互斥量的名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                            <span class=\"token class-name\">rt_uint8_t</span> flag   <span class=\"token comment\">// 已作废，均按 RT_IPC_FLAG_PRIO 处理</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虽然官方说作废了，但在两个初始化中还是有赋值的操作的，只不过在 take 时进行了修改，只建议各位手动填入  <code>RT_IPC_FLAG_PRIO</code> .<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtais1d7krj30ig06baai.jpg\" alt=\"alt\" /></p>\n<p><strong>删除互斥量</strong><br />\n接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_delete</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，所有被挂起的线程都会被环形，并获得一个 其他错误的 错误返回值</p>\n<h4 id=\"初始化和脱离互斥量\"><a class=\"anchor\" href=\"#初始化和脱离互斥量\">#</a> 初始化和脱离互斥量</h4>\n<p>以下方法适用于静态互斥量</p>\n<p><strong>初始化互斥量</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_init</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 互斥量对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                       <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 互斥量的名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       <span class=\"token class-name\">rt_uint8_t</span> flag      <span class=\"token comment\">// 该标志已经作废</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>脱离互斥量</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_detach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用该函数接口后，内核先唤醒所有挂在该互斥量上的线程（线程的返回值是 -RT_ERROR）, 然后系统将该互斥量从内核对象管理器中脱离</p>\n<h4 id=\"获取互斥量\"><a class=\"anchor\" href=\"#获取互斥量\">#</a> 获取互斥量</h4>\n<p>任何时刻，互斥量只能被一个线程持有</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_take</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 被申请的互斥量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token class-name\">rt_int32_t</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 超时时间</span></pre></td></tr></table></figure><p>如果互斥量没有被控制，那么线程成功获取该互斥量.<br />\n 如果互斥量已经被当前线程线程控制，则该互斥量的持有计数加 1, 当前线程也不会挂起等待。这样就可以避免递归持有导致锁死<br />\n如果互斥量已经被其他线程占有，则当前线程在该互斥量上挂起等待，直到其他线程释放它或者等待时间超过指定的超时时间</p>\n<h4 id=\"无等待获取互斥量\"><a class=\"anchor\" href=\"#无等待获取互斥量\">#</a> 无等待获取互斥量</h4>\n<p>当用户不想在申请的互斥量上挂起线程进行等待时，可以使用无等待方式获取互斥量，无等待获取互斥量使用下面的函数接口:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_trytake</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"释放互斥量\"><a class=\"anchor\" href=\"#释放互斥量\">#</a> 释放互斥量</h4>\n<p>线程完成互斥量所控制的资源访问后，应该尽快的释放其控制的互斥量，使得其他线程能及时获取该互斥量<br />\n避免加锁过久导致实时性降低</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用该函数的线程必须是该互斥量的所有者，每释放一次该互斥量，持有数就 -1.<br />\n 当该互斥量的持有计数为零时，互斥量回复空闲状态，可被其他线程获取，等待在该信号量上的线程将被唤醒</p>\n<p>如果线程的运行优先级被互斥量提升。那么当互斥量被释放后，线程恢复为持有互斥量前的优先级</p>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtame0grq3j30fo03qdg5.jpg\" alt=\"alt 优先级恢复\" /></p>\n<h4 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h4>\n<p>互斥量的使用比较单一，因为它是信号量的一种，并且它是以锁的形式存在<br />\n在初始化的时候，互斥量永远都处于开锁的状态，而被线程持有的时候则立刻转为闭锁的状态.</p>\n<p>互斥量更适合于:</p>\n<ol>\n<li>单一线程内部信号量多次持有信号量，导致 无法释放 (目前没有遇到，遇到再处理)</li>\n<li>可能会由于多线程同步而造成优先级翻转的情况，这个比较适合用在 单一传感器 需要被多个线程获取境界资源的场景</li>\n</ol>\n<h3 id=\"事件集\"><a class=\"anchor\" href=\"#事件集\">#</a> 事件集</h3>\n<h4 id=\"什么是事件集\"><a class=\"anchor\" href=\"#什么是事件集\">#</a> 什么是事件集</h4>\n<p>事件集是线程同步的一种方式，一个事件集可以包含多个世界，利用事件可以完成一对多，多对多的线程间同步.<br />\n 例如，当按键按下 LED 点亮，或者 ADC 检测到电压过低 OLED , LED, 蜂鸣器同时报警.<br />\nRTT 官方的例子很不错。我就直接搬过来啦<br />\n以下文字来源于 RTT 文档中心 --&gt;RT-Thread 标准版 --&gt; 内核 --&gt; 事件集部分</p>\n<p>以坐公交为例说明事件，在公交站等公交时可能有以下几种情况：<br />\n①P1 坐公交去某地，只有一种公交可以到达目的地，等到此公交即可出发<br />\n②P1 坐公交去某地，有 3 种公交都可以到达目的地，等到其中任意一辆即可出发<br />\n③P1 约另一人 P2 一起去某地，则 P1 必须要等到 “同伴 P2 到达公交站” 与 “公交到达公交站” 两个条件都满足后，才能出发<br />\n将 P1 去某地视为 线程，将 “公交到达公交站”、“同伴 P2 到达公交站” 视为 事件 的发生，<br />\n 情况①是特定事件唤醒线程<br />\n情况②是任意单个事件唤醒线程<br />\n情况③是多个事件同时发生才唤醒线程</p>\n<h4 id=\"工作机制-3\"><a class=\"anchor\" href=\"#工作机制-3\">#</a> 工作机制</h4>\n<p>与信号量不同，它可以实现一对多，多对多的同步.<br />\n 即一个线程和多个事件的关系可设置为:</p>\n<ol>\n<li>任一事件唤醒线程</li>\n<li>多个事件共同唤醒一个线程</li>\n<li>多个线程同步多个事件</li>\n</ol>\n<p>在 RT-Thread 中 事件集的特点:</p>\n<ol>\n<li>事件至于线程相关，事件之间相互独立：每个线程有 32 个事件标志位，采用 32bit 的无符号整型数据进行记录，每一个 bit 代表一个事件；</li>\n<li>事件仅有同步功能，无法传输数据</li>\n<li>事件无排队性，多次向线程发送同一事件 (如果未来得及读走), 其效果等同于之发送一次</li>\n</ol>\n<p>在 RT-Thread 中，每个线程都拥有一个事件信息标记，它有三个属性，</p>\n<ol>\n<li><code>RT_EVENT_FLAG_AND</code>  (逻辑与),</li>\n<li><code>RT_EVENT_FLAG_OR</code>  (逻辑或)</li>\n<li><code>RT_EVENT_FLAG_CLEAR</code>  (清除标记)</li>\n</ol>\n<p>当线程等待事件同步时，可以通过 32 个事件标志 和 这个事件信息标记来判断当前接收的事件是否满足同步条件</p>\n<h4 id=\"管理方式\"><a class=\"anchor\" href=\"#管理方式\">#</a> 管理方式</h4>\n<p>RT-Thread 的接口做的还是很不错的，事件集的接口 和 信号量，互斥量的接口都十分类似<br />\n都分为静态和动态创建删除，再加特有的 发送和接收 函数<br />\n<img data-src=\"https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/ipc1/figures/06event_ops.png\" alt=\"alt 图片来源: https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/ipc1/ipc1?id=%e4%ba%8b%e4%bb%b6%e9%9b%86\" /></p>\n<h4 id=\"创建和删除事件集\"><a class=\"anchor\" href=\"#创建和删除事件集\">#</a> 创建和删除事件集</h4>\n<p>以下为动态创建控制块<br />\n<strong>创建</strong><br />\n创建 信号量的时候，内核会先创建一个 事件集控制块，然后进行初始化</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_event_t</span> <span class=\"token function\">rt_event_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 事件集的名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token class-name\">rt_uint8_t</span> flag     <span class=\"token comment\">// RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>调用该函数接口时，系统会从对象管理器中分配事件集对象，并初始化这个对象，然后初始化父类 IPC 对象<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gtapjr4htqj30gm09pwfg.jpg\" alt=\"alt\" /><br />\n 看看人家，框架设计的好，写代码都轻松很多</p>\n<p><strong>删除</strong><br />\n delete 只能删除 create 出来的事件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"初始化和脱离事件集\"><a class=\"anchor\" href=\"#初始化和脱离事件集\">#</a> 初始化和脱离事件集</h4>\n<p><strong>初始化</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_init</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 事件集对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 事件集的名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token class-name\">rt_uint8_t</span> flag     <span class=\"token comment\">// 事件集的标志</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>调用该接口时，需指定静态事件集对象的句柄（即指向事件集控制块的指针）, 然后系统会初始化事件集对象，并加入到系统对象容器中进行管理</p>\n<p><strong>脱离</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_detach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用户调用这个函数时，系统首先唤醒所有挂在该事件集等待队列上的线程（线程的返回值是 - RT_ERROR）, 然后将该事件集从内核对象管理器中脱离</p>\n<h4 id=\"发送事件\"><a class=\"anchor\" href=\"#发送事件\">#</a> 发送事件</h4>\n<p>发送事件函数可以发送事件集中的一个或多个事件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_send</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 事件集对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token class-name\">rt_uint32_t</span> set   <span class=\"token comment\">// 发送的一个或多个事件的标志值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"接收事件\"><a class=\"anchor\" href=\"#接收事件\">#</a> 接收事件</h4>\n<p>内核使用 32 位的无符号整数来标识事件集，它的每一位代表一个事件，因此一个事件集对象可同时等待接收 32 个事件.<br />\n 内核可以通过指定选择参数 “逻辑与” 或 “逻辑或” 来选择如何激活线程<br />\n使用 “逻辑与” 参数表示只有当所有等待的事件都发生时才激活线程，<br />\n 而使用 “逻辑或” 参数则表示只要有一个等待的事件发生就激活线程</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_recv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 事件集对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                       <span class=\"token class-name\">rt_uint32_t</span> set<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 接收线程感兴趣的事件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       <span class=\"token class-name\">rt_uint8_t</span> option<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 接收选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       <span class=\"token class-name\">rt_int32_t</span> timeout<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定超时时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       <span class=\"token class-name\">rt_uint32_t</span><span class=\"token operator\">*</span> recved  <span class=\"token comment\">// 指向接收到的事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>option</code>  的可选参数如下:</p>\n<ol>\n<li><code>RT_EVENT_FLAG_OR</code>    : 逻辑与</li>\n<li><code>RT_EVENT_FLAG_AND</code>   : 逻辑或</li>\n<li><code>RT_EVENT_FLAG_CLEAR</code> : 选择清除重置事件标志位</li>\n</ol>\n<p>当用户调用接口时，系统根据  <code>set</code>  参数 和 接收选项  <code>option</code>  来判断它要接受的事件是否发生<br />\n如果已经发生，则根据参数  <code>option</code>  上是否设置有  <code>RT_EVENT_FLAG_CLEAR</code>  来决定是否重置事件的相应标志位<br />\n如果没有发生，则把等待的  <code>set</code>  和  <code>option</code>  参数填入线程本身的结构中，然后把线程挂起在此事件上，直到其等待的事件满足条件或等待时间超过指定的超时时间</p>\n<h4 id=\"应用场景-2\"><a class=\"anchor\" href=\"#应用场景-2\">#</a> 应用场景</h4>\n<p>我自己目前没用过，事件集 很难说它的适用场景，下面这段话直接来自于 RT-Thread 官方.<br />\n 等我琢磨明白了我再写篇博客，举个实际的例子 (T_T).</p>\n<p>事件集可使用于多种场合，它能够在一定程度上替代信号量，用于线程间同步.<br />\n 一个线程或中断服务例程发送一个事件给事件集对象，而后等待的线程被唤醒并对相应的事件进行处理.</p>\n<p>但是它与信号量不同的是，事件的发送操作在事件未清除前，是不可累计的，而信号量的释放动作是累计的.</p>\n<p>事件的另一个特性是，接收线程可等待多种事件，即多个事件对应一个线程或多个线程.<br />\n 同时按照线程等待的参数，可选择是 “逻辑或” 触发还是 “逻辑与” 触发.</p>\n<p>这个特性也是信号量等所不具备的，<strong>信号量只能识别单一的释放动作</strong>，而不能同时等待多种类型的释放.</p>\n<h2 id=\"笔记总结\"><a class=\"anchor\" href=\"#笔记总结\">#</a> 笔记总结</h2>\n<p>写的代码太少，以至于很多很难分出 三者之间的应用场景.<br />\n 举不出例子，明天试着拿知识做点小实验.</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "RTOS",
                "RTOS"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Embedded/STM32/RT-Thread-Nano-%E7%A7%BB%E6%A4%8D/",
            "url": "https://to-ywz.github.io/CS/Embedded/STM32/RT-Thread-Nano-%E7%A7%BB%E6%A4%8D/",
            "title": "RT-Thread Nano 移植",
            "date_published": "2021-08-03T23:38:15.000Z",
            "content_html": "<p>电赛延期了，开学就没时间打了，写点博客记录一下调试过的模块，移植过的源码</p>\n<h2 id=\"在-cubemx-上移植-nano\"><a class=\"anchor\" href=\"#在-cubemx-上移植-nano\">#</a> 在 CubeMX 上移植 Nano</h2>\n<h3 id=\"在-cubemx-上-添加-realthread-软件包\"><a class=\"anchor\" href=\"#在-cubemx-上-添加-realthread-软件包\">#</a> 在 CubeMX 上 添加 RealThread 软件包</h3>\n<p>在新建 CubeMX 工程的基础上，我们需要安装一个 软件包，一个 pdsc 的软件包， <code>https://www.rt-thread.org/download/cube/RealThread.RT-Thread.pdsc</code> <br />\n, 点击 help 中的 manage embedded software packs 选择 From URL, 在框中输入 网址，然后点击 check<br />\n<img data-src=\"https://s1.ax1x.com/2020/11/10/BLL476.png\" alt=\"alt 来源:https://blog.bruceou.cn/2020/11/2-2-transplantation-of-rt-thread-nano-based-on-cubemx/314/\" /><br />\n 点击 OK 回到 User Defined Packs Manager 界面，<br />\n 再次点击 OK, CubeMX 自动连接服务器，获取包描述文件.<br />\n<img data-src=\"https://s1.ax1x.com/2020/11/10/BLLThD.png\" alt=\"alt 来源:https://blog.bruceou.cn/2020/11/2-2-transplantation-of-rt-thread-nano-based-on-cubemx/314/\" /></p>\n<p>再次进入 anage embedded software packs 界面的时候 就会出现 RealThread 选项卡，<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt4n23hdtqj30r80isgns.jpg\" alt=\"alt\" /><br />\n 点击之后选择其中一个 (建议 3.1.3 及其以上) 点击 install now, 等待下载<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gt4n1vk97hj30r80is0v5.jpg\" alt=\"alt\" /><br />\n 中间会弹出一个使用许可，记得同意<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4n1zx323j30r80isacf.jpg\" alt=\"alt\" /></p>\n<h3 id=\"在-cubxmx-上-添加-rt-threard-nano-至-工程\"><a class=\"anchor\" href=\"#在-cubxmx-上-添加-rt-threard-nano-至-工程\">#</a> 在 CubxMX 上 添加 RT-Threard Nano 至 工程</h3>\n<p>打开，我们新建的基本 CubeMX 的基本工程，不会建立的点这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0VtYmVkZGVkL1NUTTMyLyVFNiU5NiVCMCVFNSVCQiVCQUhBTCVFNSVCQSU5MyVFNSVCNyVBNSVFNyVBOCU4QiVFNyU5QSU4NCVFNiU5NiVCOSVFNiVCMyU5NS8=\">▶</span>.</p>\n<p>然后点击 Software Packs, 选择 select components, 进入 Software Packs Component Selector<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt4o9c1zf8j31hc0s5dly.jpg\" alt=\"alt\" /><br />\n 勾上 RealThread, 然后 右边就会出现 RT-Trhead 及其版本号，我这里使用 3.1.5, 可以勾选是否使用 shell, kernel, 和 device (这个我没用过，因该是这两个月出的这里先不做 demo), 点击 OK 结束<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt4oa1ota9j30za0iqdhv.jpg\" alt=\"alt\" /><br />\nPS: 如果没有左半边的的界面点击一下粉红色框起的地方点击</p>\n<p>这时候就会在 工程的 最左侧栏最底部多出一个 Software Packs 的 选项 里面有 RealThread RT-Thread 3.1.5 (不同版本号会不同), 点击后 中间会出现  <code>RTOS Kernel</code>  和  <code>RTOS shell</code>  , 勾选上，底部就会出现参数栏<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gt4ofqde0aj31hc0s5agj.jpg\" alt=\"alt\" /></p>\n<p>参数这里按需配置，我打开了小内存管理，其他的一切照常，debug 项会在 RT-Thread Nano 初始胡过程中，打印执行到哪死在哪。看需求进行配置<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4orzyg4bj30o90o1wi2.jpg\" alt=\"alt\" /></p>\n<p>最后，由于我们使用了 RT-Thread Ta 会占用 systick 所以我们需要修改 系统的定时器，这里我改成 TIM5<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gt4owuhcvgj31hc0s57ab.jpg\" alt=\"alt\" /></p>\n<p>到这我们 用 cubemx 移植 RT-Thread 就完成了，生成工程即可，不过需要注释掉 cubeMX 生成的  <code>HardFault_Handler</code>  中断，</p>\n<h3 id=\"配置-shell\"><a class=\"anchor\" href=\"#配置-shell\">#</a> 配置 Shell</h3>\n<p>kernel 配置 完毕，但是编译的时候 Keil 会报一个 未定义的 error<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4uiinkqrj318a03qwfk.jpg\" alt=\"alt\" /></p>\n<p>这里有我写好了的 串口输出代码，相关宏自行修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_console_output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">rt_size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">__HAL_UNLOCK</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token function\">rt_strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是 shell 未定义 输出函数导致的问题，当然当你写好了 输出函数后，他又会报另一个错<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gt4v2lcy1nj318a03qab2.jpg\" alt=\"alt\" /><br />\n 因为这个，函数在这里被调用了<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt4v47eyhij30yy0evn02.jpg\" alt=\"alt\" /><br />\n 之所以 接收函数 没有报错是因为，在 链接的时候 输出函数在 输入函数之前，在检测出函数异常后，直接中断链接过程</p>\n<p>接收函数 就比较麻烦。除了接收中断之外 为了保证 接收的数据的稳定性，我们需要加上 一个 环形缓冲区，所以代码量就会上升一些<br />\n这里我就不细说了，直接贴个代码</p>\n<h4 id=\"ringbufferh\"><a class=\"anchor\" href=\"#ringbufferh\">#</a> ringbuffer.h</h4>\n<p>环形缓冲区头文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @file ringbuffer.h</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author BlackSheep (ywz_123xxx@163.com)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @brief   环形缓冲区</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @version 0.1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @copyright Copyright (c) 2021</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__RINGBUFFER_H__</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__RINGBUFFER_H__</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdint.h\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ALIGN_SIZE</span> <span class=\"token expression\"><span class=\"token number\">4</span> </span><span class=\"token comment\">// 字节对齐</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// * 返回对齐数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ALIGN_DOWN</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> align<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>align<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ringbuffer_space_len</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>buffer_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> read_mirror <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> read_index <span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> write_mirror <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> write_index <span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">int16_t</span> buffer_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ringbuffer_state</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    RINGBUFFER_EMPTY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    RINGBUFFER_FULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">/* half full is neither full nor empty */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    RINGBUFFER_HALFFULL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ringbuffer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> <span class=\"token class-name\">int16_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ringbuffer_state</span> <span class=\"token function\">ringbuffer_status</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"ringbufferc\"><a class=\"anchor\" href=\"#ringbufferc\">#</a> ringbuffer.c</h4>\n<p>环形缓冲区 .c 文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           获取 ringbuffer 状态</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @retval           ringbuffer 枚举</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *                      空  :   RINGBUFFER_EMPTY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *                      满  :   RINGBUFFER_FULL</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *                      半满:   RINGBUFFER_HALFFULL</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ringbuffer_state</span> <span class=\"token function\">ringbuffer_status</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>write_index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_mirror <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>write_mirror<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> RINGBUFFER_EMPTY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> RINGBUFFER_FULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> RINGBUFFER_HALFFULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @brief           获取缓冲区中数据大小</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * @retval          缓冲区中现有数据</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ringbuffer_status</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">case</span> RINGBUFFER_EMPTY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">case</span> RINGBUFFER_FULL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> rb<span class=\"token operator\">-></span>buffer_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">case</span> RINGBUFFER_HALFFULL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">></span> rb<span class=\"token operator\">-></span>read_index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span> rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">-</span> rb<span class=\"token operator\">-></span>read_index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span> rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">-</span> rb<span class=\"token operator\">-></span>write_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre> * @brief           初始化 ringbuffer 实例</pre></td></tr><tr><td data-num=\"60\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"61\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"62\"></td><td><pre> * @param pool      缓冲区数组首地址</pre></td></tr><tr><td data-num=\"63\"></td><td><pre> * @param size      缓冲区数组大小</pre></td></tr><tr><td data-num=\"64\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"65\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"66\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"67\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ringbuffer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                     <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                     <span class=\"token class-name\">int16_t</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">/* 初始化读写索引 */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    rb<span class=\"token operator\">-></span>read_mirror <span class=\"token operator\">=</span> rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    rb<span class=\"token operator\">-></span>write_mirror <span class=\"token operator\">=</span> rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">/* 配置缓冲区首地址 和 大小 */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    rb<span class=\"token operator\">-></span>buffer_ptr <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">=</span> <span class=\"token function\">ALIGN_DOWN</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> ALIGN_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"83\"></td><td><pre> * @brief           缓冲区存入 1 字节</pre></td></tr><tr><td data-num=\"84\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"85\"></td><td><pre> * @param rb        缓冲区对象</pre></td></tr><tr><td data-num=\"86\"></td><td><pre> * @param ch        存入缓冲区的数据</pre></td></tr><tr><td data-num=\"87\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"88\"></td><td><pre> * @retval          执行结果</pre></td></tr><tr><td data-num=\"89\"></td><td><pre> *                      0:  error</pre></td></tr><tr><td data-num=\"90\"></td><td><pre> *                      1:  succee</pre></td></tr><tr><td data-num=\"91\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"92\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">/* 缓冲区满 */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ringbuffer_space_len</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    rb<span class=\"token operator\">-></span>buffer_ptr<span class=\"token punctuation\">[</span>rb<span class=\"token operator\">-></span>write_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/* 翻转检测 */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        rb<span class=\"token operator\">-></span>write_mirror <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>rb<span class=\"token operator\">-></span>write_mirror<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        rb<span class=\"token operator\">-></span>write_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        rb<span class=\"token operator\">-></span>write_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"116\"></td><td><pre> * @brief           从缓冲区中读取 1 字节</pre></td></tr><tr><td data-num=\"117\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"118\"></td><td><pre> * @param rb        缓冲区实体</pre></td></tr><tr><td data-num=\"119\"></td><td><pre> * @param ch        读取的字节</pre></td></tr><tr><td data-num=\"120\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"121\"></td><td><pre> * @retval          执行结果:</pre></td></tr><tr><td data-num=\"122\"></td><td><pre> *                      0:  error</pre></td></tr><tr><td data-num=\"123\"></td><td><pre> *                      1:  succee</pre></td></tr><tr><td data-num=\"124\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"125\"></td><td><pre> * @date 2021-05-16</pre></td></tr><tr><td data-num=\"126\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token class-name\">uint32_t</span> <span class=\"token function\">ringbuffer_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ringbuffer</span> <span class=\"token operator\">*</span>rb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">/* 缓存区为 NULL */</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ringbuffer_data_len</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">/* 存入字节 */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token operator\">*</span>ch <span class=\"token operator\">=</span> rb<span class=\"token operator\">-></span>buffer_ptr<span class=\"token punctuation\">[</span>rb<span class=\"token operator\">-></span>read_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">==</span> rb<span class=\"token operator\">-></span>buffer_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        rb<span class=\"token operator\">-></span>read_mirror <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>rb<span class=\"token operator\">-></span>read_mirror<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        rb<span class=\"token operator\">-></span>read_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        rb<span class=\"token operator\">-></span>read_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"finshdriverh\"><a class=\"anchor\" href=\"#finshdriverh\">#</a> FinSHDriver.h</h4>\n<p>FinSH 串口驱动头文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;rtthread.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ringbuffer.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// tShell</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART1</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART2</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART3</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART4</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART5</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART6</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART7</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SHELL_USING_UART8</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UART_RX_BUF_LEN</span> <span class=\"token expression\"><span class=\"token number\">16</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SHELL_USING_UART1</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_UART</span> <span class=\"token expression\">USART1              </span><span class=\"token comment\">// * tShell 串口</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_IRQn</span> <span class=\"token expression\">USART1_IRQn          </span><span class=\"token comment\">// * tShell 中断号</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSHELL_IRQHandler</span> <span class=\"token expression\">USART1_IRQHandler </span><span class=\"token comment\">// * tShell 中断服务函数</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">SHELL_USING_UART2</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_UART</span> <span class=\"token expression\">USART2              </span><span class=\"token comment\">// * tShell 串口</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_IRQn</span> <span class=\"token expression\">USART2_IRQn          </span><span class=\"token comment\">// * tShell 中断号</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSHELL_IRQHandler</span> <span class=\"token expression\">USART2_IRQHandler </span><span class=\"token comment\">// * tShell 中断服务函数</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TSHELL_AF</span>   <span class=\"token expression\">GPIO_AF7_USART2</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FIN_SHELL_BAUDRATE</span> <span class=\"token expression\"><span class=\"token number\">115200</span> </span><span class=\"token comment\">// * tShell 波特率</span></span></pre></td></tr></table></figure><h4 id=\"finshdriverc\"><a class=\"anchor\" href=\"#finshdriverc\">#</a> FinSHDriver.c</h4>\n<p>FinSH 源文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief       移植控制台，实现控制台输出，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *              对接 rt_hw_console_output</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param str   需要输出的 字符</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @date 2021-07-30</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rt_hw_console_output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">rt_size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'\\r'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">__HAL_UNLOCK</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    size <span class=\"token operator\">=</span> <span class=\"token function\">rt_strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UartHandle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @brief       移植 FinSH, 实现命令行交互 中断方式</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> *              然后再对接 rt_hw_console_getchar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @retval </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @date 2021-07-30</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token function\">rt_hw_console_getchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token comment\">/* 从 ringbuffer 中拿出数据 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ringbuffer_getchar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uart_rxcb<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shell_rx_sem<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * @brief       tshell 接收 </pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"52\"></td><td><pre> * @date 2021-07-30</pre></td></tr><tr><td data-num=\"53\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">TSHELL_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> ch <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token class-name\">rt_base_t</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">/* enter interrupt */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">rt_interrupt_enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在中断中一定要调用这对函数，进入中断</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UART_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_IT_SOURCE</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UART_IT_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            ch <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">__HAL_UART_GET_FLAG</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>UartHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> UART_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                ch <span class=\"token operator\">=</span> UartHandle<span class=\"token punctuation\">.</span>Instance<span class=\"token operator\">-></span>DR <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">/* 读取到数据，将数据存入 ringbuffer */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token function\">ringbuffer_putchar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uart_rxcb<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shell_rx_sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token comment\">/* leave interrupt */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">rt_interrupt_leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在中断中一定要调用这对函数，离开中断</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到这里，才算是移植结束，Nano 可带命令行 操作</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "RTOS",
                "RTOS"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Embedded/STM32/%E6%96%B0%E5%BB%BAHAL%E5%BA%93%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95/",
            "url": "https://to-ywz.github.io/CS/Embedded/STM32/%E6%96%B0%E5%BB%BAHAL%E5%BA%93%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%96%B9%E6%B3%95/",
            "title": "新建HAL库工程的方法",
            "date_published": "2021-08-03T23:37:39.000Z",
            "content_html": "<h1 id=\"新建hal库工程的方法\"><a class=\"anchor\" href=\"#新建hal库工程的方法\">#</a> 新建 HAL 库工程的方法</h1>\n<p>由于有小姐姐反反复复的问 CubeMX 如何新建工程，网上的教程版本又太老，故在此记录一下<br />\n下面以 STM32F407ZGT6 为例子</p>\n<h2 id=\"第一步-新建工程选择芯片型号\"><a class=\"anchor\" href=\"#第一步-新建工程选择芯片型号\">#</a> 第一步：新建工程，选择芯片型号</h2>\n<p>点击 file, 然后点击 new project, 或者直接 按下快捷键  <code>CTRL+N</code> <br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt4gmg1cmbj317q0nj44m.jpg\" alt=\"alt\" /><br />\n 就会进入下面这个界面<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gt4gmuuyg4j30zm0jrq9h.jpg\" alt=\"alt\" /><br />\n 这里就是芯片选择型号的界面，可以使用 鼠标滚轮 或者 直接拖动滑动条 来查找芯片型号，当然我更喜欢直接搜索，这样子会更快一些<br />\n STM32 一个系列的芯片会有不同型号，代表不同封装，不同功能以及引脚数... , 这一块需要你自己去查看芯片上的芯片型号<br />\n然后双击进去，进入这个界面<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gt4gmzbadjj318g0njq6s.jpg\" alt=\"alt\" /></p>\n<h2 id=\"第二步-配置时钟\"><a class=\"anchor\" href=\"#第二步-配置时钟\">#</a> 第二步：配置时钟</h2>\n<p>STM32 有内部振荡器，可以自己产生时钟，还可以使用外部晶振产生时钟。这里我选择外部晶振作为时钟<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gt4gn5gv2yj318g0njafs.jpg\" alt=\"alt\" /><br />\n 接着配置时钟树，这个需要查看原理图才能知道，当然使用直插的晶振的板子直接看板子上的晶振也能知道 晶振的频率<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4gqiyqroj30u01o0teg.jpg\" alt=\"alt\" /><br />\n 如果使用开发板要注意，开发板上不止一个晶振，建议直接查看原理图<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4gnda1smj30zy06bmyn.jpg\" alt=\"alt\" /><br />\n 确定晶振后，修改 input frequency 的值，默认一般是 25MHz 的位置<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gt4gnhwi5xj318g0nj78q.jpg\" alt=\"alt\" /><br />\n 图上粉红色处修改成 外部晶振的频率，绿色处修改为 HSE, 红色处 配置为 PLL 锁相环使能，<br />\n 黄色处为时钟主频最大为 168MHz, 这里我直接拉满，改完后敲击回车，即可生成所需呀的主频.<br />\n 系统时钟主频直接看情况配置。其他参数，等以后熟悉 RCC 配置再具体去修改.<br />\n 最终的时钟配置界面<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4h1hk701j30v70evgnu.jpg\" alt=\"alt\" /></p>\n<h2 id=\"其他配置生成工程\"><a class=\"anchor\" href=\"#其他配置生成工程\">#</a> 其他配置，生成工程</h2>\n<p><mark>敲黑板</mark><br />\n除了这些东西之外，还需要配置一下 SYS 选项卡里的 Debug 项，<br />\n 改为 Serial Wire, 防止芯片下载一次就自闭<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gt4h7zl839j318g0nj439.jpg\" alt=\"alt\" /><br />\n 剩下的就是工程杂项配置了<br />\n<mark>敲黑板</mark><br />\n<strong>工程名 和 工程路径绝对绝对不能有中文</strong><br />\n开发软件 选择 <strong>keilv5.27</strong><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gt4hfp7vqzj318g0njq80.jpg\" alt=\"alt\" /></p>\n<p>建议勾选上生成独立的 .c .h , 要不然代码会出现在一个文件夹下，<br />\n 如果生成一次就不在使用 CubeMX 了，那么建议直接，选择复制所有 HAL 库文件，<br />\n 如果后面还要使用 CubeMX 生成则可以考虑，选择仅复制所需文件，这样子文件所占空间会比较小，编译起来也比较快<br />\n最后一个选项是直接把库文件的所在位置放到 keil 的 编译链接里，不复制任何文件到 当前工程中，这样子可以大大的节省存储空间，和提升编译速度<br />\n但是无法跨放到其他人的电脑或者移动到其他位置上进行编译。可移植性比较差<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gt4hex3sa1j318g0nj79y.jpg\" alt=\"alt\" /></p>\n<h2 id=\"the-end\"><a class=\"anchor\" href=\"#the-end\">#</a> THE END</h2>\n<p>keil 上基本就没有什么需要特别配置的地方，直接编译下载就好了.<br />\n 创建 5 分钟，编译两小时 (没这么夸张)</p>\n<p>编译通过后，可以之后可以随便点亮一个 LED, 看看是不是没有问题</p>\n<p>好了，至此本教程结束，以上仅代表个人观点，如有错误，望诸位斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "STM32"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Embedded/%E7%A1%AC%E4%BB%B6%E5%A4%A7%E5%85%A8_%E9%9F%A6%E4%B8%9C%E5%B1%B1/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%A6%82%E5%BF%B5%E5%8F%8A%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/",
            "url": "https://to-ywz.github.io/CS/Embedded/%E7%A1%AC%E4%BB%B6%E5%A4%A7%E5%85%A8_%E9%9F%A6%E4%B8%9C%E5%B1%B1/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%A6%82%E5%BF%B5%E5%8F%8A%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90/",
            "title": "嵌入式概念及硬件组成",
            "date_published": "2021-07-10T00:52:27.000Z",
            "content_html": "<h1 id=\"嵌入式概念及硬件组成\"><a class=\"anchor\" href=\"#嵌入式概念及硬件组成\">#</a> 嵌入式概念及硬件组成</h1>\n<h2 id=\"处理器的区分mcu_mpu_ap\"><a class=\"anchor\" href=\"#处理器的区分mcu_mpu_ap\">#</a> 处理器的区分 MCU_MPU_AP</h2>\n<h3 id=\"mpu\"><a class=\"anchor\" href=\"#mpu\">#</a> MPU</h3>\n<p>目前主流计算机的架构为: CPU + RAM + Stronger<br />\n 对于微型计算机的 CPU 也被称为 MPU<br />\n8086, 80186, 80286 等早期生成的 CPU 芯片都是 MPU<br />\nMPU 是一个较为老的概念，现在个人电脑上的芯片被称为 CPU</p>\n<h3 id=\"mcu\"><a class=\"anchor\" href=\"#mcu\">#</a> MCU</h3>\n<p>MPU 成长路线的另一个分支为 MCU<br />\nMCU: 集 CPU+RAM+FLASH (存储器，FLASH 最为常简)+ 其他模块 为一体的芯片<br />\n MCU 的内存 RAM 一般都在 KB 级别，FLASH 一般在 KB ~ MB 级别，资源较少<br />\n MCU 可以运行 裸机 或 RTOS, 但是功能基本专一化</p>\n<h3 id=\"ap\"><a class=\"anchor\" href=\"#ap\">#</a> AP</h3>\n<p>AP (Application processor) 应用处理器一般被视为 MCU 的超级加倍<br />\n AP 内部一般会有 CPU+RAM+FLSH+DSP+GPU+LCD, 当内存不够了可以外接极大的 DDR, 存储空间不够可以外接极大的 FLASH<br />\nAP 可以运行不同版本的操作系统，例如 Linux,IOS,Windows ..., 功能更加通用化<br />\n跟 MCU 进行比较，Application Processors 有以下不同:</p>\n<ul>\n<li>集成了更多的模块:<br />\nApplication Processors 内部集成了更多的模块，比如用于数据处理的 DSP、用于图形显示的 GPU, 甚至有多个处理器.<br />\n 在手机电路板中，可用空间非常小，Application Processors 还需要搭配内存芯片才可以使用.<br />\n 于是发展出了一种名为 package-on-package (PoP) 的工艺：在电路板上先焊接 Application Processors, 在 Application Processors 上面再焊接内存芯片，即 2 个芯片叠在一起.</li>\n<li>运行的操作系统不同:<br />\nMCU 上一般不运行操作系统，或是运行一些资源耗费较小的小型实时操作系统 (RTOS).<br />\nMCU 一般用来处理实时性要求高的事情，处理一些比较简单的事情.<br />\nApplication Processors 基本上都会运行比较复杂的操作系统 (比如 Linux), 在操作系统上运行多个 APP.</li>\n</ul>\n<p>上面又引入一个概念 “片上系统”(SoC, System on Chip), SoC 的本意是在一个芯片上就可以搭建完整的系统.<br />\n 但是这个概念在日常使用中比较宽泛: MCU 芯片也可以称为 SoC, Application Processors 也可以称为 SoC, 即使它们还必须外接内存 / Flash 等外设才可以运行.<br />\n 在以前的文档中涉及 SoC 时，意指比较复杂的系统；这时候 MCU 不属于 SoC, 因为 MCU 比较简单。但是时代在发展，MCU 也越来越复杂了，所以把 MCU 也当作 SoC 也是可以的.</p>\n<h3 id=\"三者之间的的关系\"><a class=\"anchor\" href=\"#三者之间的的关系\">#</a> 三者之间的的关系</h3>\n<p>MCU 和 AP 是 MPU 分支成长成不同 处理器<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gsbm8ubqp0j30xj0clabs.jpg\" alt=\"alt\" /><br />\n<strong>PS: 现在有些公司把和 MCU 相对应的，可以运行 Linux 的处理器 (AP) 也可以称为 MPU, 总之无是 MPU 还是 AP 都是 MCU 的对立面的处理器</strong></p>\n<h2 id=\"嵌入式硬件组成\"><a class=\"anchor\" href=\"#嵌入式硬件组成\">#</a> 嵌入式硬件组成</h2>\n<p>一句话引出嵌入式操作系统: <mark>支持 多种设备启动</mark><br />\n补充知识:<br />\nXIP: eXecute In Place, 本地执行。可以不用将代码拷贝到内存，而直接在代码的存储空间运行.</p>\n<h3 id=\"系统从哪开始执行程序\"><a class=\"anchor\" href=\"#系统从哪开始执行程序\">#</a> 系统从哪开始执行程序？</h3>\n<h4 id=\"系统上电一定会执行程序那么系统从哪里开始执行程序\"><a class=\"anchor\" href=\"#系统上电一定会执行程序那么系统从哪里开始执行程序\">#</a> 系统上电一定会执行程序，那么系统从哪里开始执行程序？</h4>\n<p>一般理解为：系统从哪启动就从哪执行.<br />\n 如果系统从 SPI FLASH 启动，SPI 设备不是  <code>XIP</code>  设备 CPU 无法直接访问</p>\n<h4 id=\"cpu-如何执行-spi-flash-上的代码-cpu-上电后第一个程序的第一条指令在哪里\"><a class=\"anchor\" href=\"#cpu-如何执行-spi-flash-上的代码-cpu-上电后第一个程序的第一条指令在哪里\">#</a> CPU 如何执行 SPI FLASH 上的代码？CPU 上电后第一个程序的第一条指令在哪里？</h4>\n<p>上电后 CPU 只能和 XIP 设备沟通，还需要有存储功能，那么毫无疑问就是 片内 ROM<br />\nROM 中的程序会进行必要的初始化，比如设置时钟、设置内存；再从 &quot;非 XIP 设备&quot; 中把程序读到内存；最后启动这上程序</p>\n<h4 id=\"可读可写的变量存储在哪\"><a class=\"anchor\" href=\"#可读可写的变量存储在哪\">#</a> 可读可写的变量存储在哪？</h4>\n<p>上面说过 嵌入式操作系统是支持多种设备启动的，ROM 的 功能会非常强大，一般有由 C 语言来实现<br />\n C 语言对变量的操作，必然是由读和写构成的，但是 ROM 是 Read Only Memory, 无法进行写入<br />\n如果 ROM 可写，极有可能会导致系统被破坏。那么，这些可读写的变量又该存储在哪呢？<br />\n 前面提到过 AP 中会有 RAM, 而 RAM 是 Random Access Memory, 随机访问存储器.<br />\nRAM 就是专门用于存储 这些易变，需要读写的变量的，但是由于成本过于高昂，所以 RAM 基本很小<br />\n随着我们功能越来越复杂，需要内存也就越来越大，这时候就会外置 DDR 内存，当然 DDR 属于 DRAM, 片内 RAM 一般为 SRAM. 二者速度和工作方式还是有较大差别</p>\n<h4 id=\"cpu-如何管理-这么多控制器呢\"><a class=\"anchor\" href=\"#cpu-如何管理-这么多控制器呢\">#</a> CPU 如何管理 这么多控制器呢？</h4>\n<p>无论是什么外置接口，都会有相应的控制器，例如: SPI FLASH 会有 SPI 控制器，LCD 会有 LCD 控制器，DDR 会有 DDR 控制器 ...<br />\nCPU 不可能与他们直连，一般通过寻址的方式来和各个芯片交互<br />\n然而 CPU 不可能什么都亲力亲为，所以就有了 内存控制器 来帮助 CPU 管理分发地址</p>\n<h3 id=\"嵌入式设备最简硬件组成图\"><a class=\"anchor\" href=\"#嵌入式设备最简硬件组成图\">#</a> 嵌入式设备最简硬件组成图</h3>\n<p>这是最简单的 嵌入式设备的模板<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gsbp71xwsyj30p70mt79p.jpg\" alt=\"alt\" /><br />\nps: 图片来源于韦东山硬件大全视频</p>\n<h2 id=\"嵌入式系统启动流程概述\"><a class=\"anchor\" href=\"#嵌入式系统启动流程概述\">#</a> 嵌入式系统启动流程概述</h2>\n<p>主芯片内部有 ROM, ROM 程序协助从非 XIP 设备启动.<br />\n 以 SD 卡启动为例.<br />\n 我们知道 CPU 只能运行 XIP 设备中的程序，ROM 程序做什么？<br />\n 显然: ROM 需要把 SD 卡上的程序读到内存里 (片内 RAM 或是片外的 DDR)</p>\n<h3 id=\"rom-要做的事情\"><a class=\"anchor\" href=\"#rom-要做的事情\">#</a> ROM 要做的事情</h3>\n<ol>\n<li>\n<ul>\n<li>初始化硬件</li>\n<li>初始化时钟，提高 CPU、外设速度</li>\n<li>初始化内存：DDR 需要初始化才能使用</li>\n<li>初始化其他硬件，比如看门狗、SD 卡等</li>\n</ul>\n</li>\n<li>\n<p>从外设把程序复制到内存</p>\n<ul>\n<li>\n<p>支持那么多的启动方式，SD 卡、SPI FLASH、USB DISK, 怎么选择？</p>\n<ul>\n<li>通过跳线，选择某个设备</li>\n<li>通过跳线，选择一个设备列表，按列表顺序逐个尝试</li>\n<li>不让客户选择，按固定顺序逐个尝试</li>\n</ul>\n</li>\n<li>\n<p>内存那么大，把程序从 SD 卡等设备，复制到内存哪个位置？复制多长？</p>\n<ul>\n<li>烧写在 SD 卡等设备上的程序，含有一个头部信息，里面指定了内存地址和长度；</li>\n<li>不给客户选择，程序被复制到内存固定的位置，长度也固定</li>\n</ul>\n</li>\n<li>\n<p>程序在 SD 卡上怎么存？</p>\n<ul>\n<li>原始二进制 (raw bin),</li>\n<li>作为一个文件保存在分区</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>执行新程序</p>\n</li>\n</ol>\n<h2 id=\"哈佛架构-和-冯诺依曼架构\"><a class=\"anchor\" href=\"#哈佛架构-和-冯诺依曼架构\">#</a> 哈佛架构 和 冯诺依曼架构</h2>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gsbt5ov4qfj30og0ejdg6.jpg\" alt=\"alt\" /><br />\nCPU 架构可以分为哈弗架构与冯诺伊曼架构</p>\n<ul>\n<li>哈弗架构中指令与数据分开存放，CPU 可以同时读入指令、读写数据</li>\n<li>冯诺伊曼架构中指令、数据混合存放，CPU 依次读取指令、读写数据，不可同时操作指令和数据</li>\n</ul>\n<h3 id=\"改进的哈弗结构\"><a class=\"anchor\" href=\"#改进的哈弗结构\">#</a> 改进的哈弗结构</h3>\n<p>RM 公司的芯片，ARM7 及之前的芯片是冯诺伊曼架构，ARM7 之后使用 “改进的哈弗架构”<br />\n“改进的哈弗结构” 如下所示:<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gsbt61tfbbj30fw0ejmxh.jpg\" alt=\"alt\" /><br />\n “改进的哈弗架构” 里，指令和数据在外部存储器中混合存放；CPU 运行时，从指令 cache 中获得指令，从数据 cache 中读写数据</p>\n<h2 id=\"cisc-和-risc\"><a class=\"anchor\" href=\"#cisc-和-risc\">#</a> CISC 和 RISC</h2>\n<p>CISC (Complex Instruction Set Computers, 复杂指令集计算集) 和 RISC (Reduced Instruction Set Computers, 精减指令集计算集) 是两大类主流的 CPU 指令集类型<br />\n其中 CISC 以 Intel、AMD 的 X86 CPU 为代表<br />\n而 RISC 以 ARM、IBM Power 为代表<br />\n开源的 RISC-V 也是 RISC 指令集，RISC 的设计初衷针对 CISC CPU 复杂的弊端，选择一些可以在单个 CPU 周期完成的指令，以降低 CPU 的复杂度，将复杂性交给编译器</p>\n<p>在此，总结一下 CISC 和 RISC 的主要区别：</p>\n<table>\n<thead>\n<tr>\n<th>指令集</th>\n<th>CISC</th>\n<th>RISC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>指令能力</td>\n<td>指令能力强，单多数指令使用率低却增加了 CPU 的复杂度，指令是可变长格式；</td>\n<td>指令大部分为单周期指令，指令长度固定.RISC 内存只有 <code>load</code>  和 <code>store</code>  才做，数据运算由 CPU 完成</td>\n</tr>\n<tr>\n<td>寻址方式</td>\n<td>支持多种寻址方式</td>\n<td>支持的寻址方式少</td>\n</tr>\n<tr>\n<td>实现方式</td>\n<td>通过微程序控制技术实现</td>\n<td>增加了通用寄存器，硬布线逻辑控制为主，采用流水线方式执行</td>\n</tr>\n<tr>\n<td>研发周期</td>\n<td>CISC 的研制周期长</td>\n<td>RISC 硬件简单，需要优化编译器</td>\n</tr>\n</tbody>\n</table>\n<p><strong>PS: ARM 公司的芯片都使用 RISC 指令集，对内存只有 load/store 操作，数据的处理是在 CPU 寄存器上进行</strong></p>\n<h2 id=\"概念巩固测试\"><a class=\"anchor\" href=\"#概念巩固测试\">#</a> 概念巩固测试</h2>\n<ol>\n<li class=\"quiz\">\n<p>现代主流计算机的三大主件是<span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li class=\"correct\">CPU、内存条、硬盘 </li>\n<li>CPU、内存条、显卡</li>\n<li>CPU、硬盘、显卡</li>\n<li>硬盘、显卡、内存条</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>微型计算机 CPU 常常叫做什么<span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>MCU</li>\n<li class=\"correct\">MPU</li>\n<li>CMU</li>\n<li>CMP</li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>:MPU (Microprocessor Unit) 微处理器，微机中的中央处理器（CPU）称为微处理器（MPU）</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>MCU 又可以叫什么<span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>AP</li>\n<li>CPU</li>\n<li class=\"correct\">单片机 </li>\n<li>微型计算机</li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>: 微控制单元 (Microcontroller Unit; MCU) , 又称单片微型计算机 (Single Chip Microcomputer ) 或者单片机</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "嵌入式",
                "学习笔记",
                "STM32"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%88%A4%E6%96%AD%E9%A2%98/",
            "url": "https://to-ywz.github.io/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%88%A4%E6%96%AD%E9%A2%98/",
            "title": "编译原理判断题",
            "date_published": "2021-07-06T01:09:53.000Z",
            "content_html": "<h1 id=\"编译原理判断题\"><a class=\"anchor\" href=\"#编译原理判断题\">#</a> 编译原理判断题</h1>\n<ol>\n<li class=\"quiz false\">\n<p>计算机高级语言翻译成低级语言只有解释一种方式。</p>\n</li>\n<li class=\"quiz false\">\n<p>在编译中进行语法检查的目的是为了发现程序中所有错误。</p>\n</li>\n<li class=\"quiz false\">\n<p>“用高级语言书写的源程序都必须通过编译，产生目标代码后才能投入运行” 这种说法。</p>\n</li>\n<li class=\"quiz false\">\n<p>编译程序与具体的机器有关，与具体的语言无关。</p>\n</li>\n<li class=\"quiz false\">\n<p>编译程序是对高级语言程序的解释执行。</p>\n</li>\n<li class=\"quiz false\">\n<p>程序语言的语言处理程序是一种应用软件。</p>\n</li>\n<li class=\"quiz false\">\n<p>正则文法其产生式为 A-&gt;a，A-&gt;Bb, A,B∈VN，a,b∈VT。</p>\n</li>\n<li class=\"quiz false\">\n<p>若一个句型中出现了某产生式的右部，则此右部一定是该句型的句柄。</p>\n</li>\n<li class=\"quiz true\">\n<p>一个句型的句柄一定是文法某产生式的右部。</p>\n</li>\n<li class=\"quiz false\">\n<p>产生式是用于定义词法成分的一种书写规则。</p>\n</li>\n<li class=\"quiz true\">\n<p>如果一个文法存在某个句子对应两棵不同的语法树，则称这个文法是二义的。</p>\n</li>\n<li class=\"quiz true\">\n<p>正规文法产生的语言都可以用上下文无关文法来描述。</p>\n</li>\n<li class=\"quiz true\">\n<p>归约和规范推导是互逆的两个过程。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个上下文无关文法的开始符，可以是终结符或非终结符。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个句型的直接短语是唯一的。 </p>\n</li>\n<li class=\"quiz false\">\n<p>一个句型一定句子。 </p>\n</li>\n<li class=\"quiz true\">\n<p>如果一个文法存在某个句子对应两棵不同的语法树，则文法是二义性的。 </p>\n</li>\n<li class=\"quiz false\">\n<p>从一个句型到另一个句型的推导过程是唯一的。</p>\n</li>\n<li class=\"quiz false\">\n<p>二义文法不是上下文无关文法。</p>\n</li>\n<li class=\"quiz true\">\n<p>文法是描述语言的语法结构的形式规则。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个有限状态自动机中，有且仅有一个唯一的终态。</p>\n</li>\n<li class=\"quiz true\">\n<p>两个正规集相等的必要条件是他们对应的正规式等价。</p>\n</li>\n<li class=\"quiz false\">\n<p>r 和 s 分别是正规式，则有 L (r|s)=L (r) L (s)。</p>\n</li>\n<li class=\"quiz true\">\n<p>确定的自动机以及不确定的自动机都能正确地识别正规集</p>\n</li>\n<li class=\"quiz true\">\n<p>正规文法产生的语言都可以用上下文无关文法来描述。</p>\n</li>\n<li class=\"quiz false\">\n<p>编译过程中，语法分析器的任务是分析单词是怎样构成的。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个确定有限状态自动机中，有且仅有一个唯一的终态。</p>\n</li>\n<li class=\"quiz true\">\n<p>设 R 和 S 分别是字母表∑上的正规式，则有 L (R|S)=L (R)∪L (S)。</p>\n</li>\n<li class=\"quiz false\">\n<p>自动机 M1 和 M2 的状态数不同，则二者必不等价。</p>\n</li>\n<li class=\"quiz true\">\n<p>对任何正规式 e，都存在一个 NFA M，满足 L (M)=L (e)。</p>\n</li>\n<li class=\"quiz false\">\n<p>每个文法都能改写为 LL (1) 文法。</p>\n</li>\n<li class=\"quiz true\">\n<p>递归下降法不允许任一非终极符是直接左递归的。</p>\n</li>\n<li class=\"quiz true\">\n<p>递归下降分析法是自顶向下分析方法。</p>\n</li>\n<li class=\"quiz true\">\n<p>一个 LL (l) 文法一定是无二义的。</p>\n</li>\n<li class=\"quiz false\">\n<p>语法分析时必须先消除文法中的左递归 。</p>\n</li>\n<li class=\"quiz true\">\n<p>并不是每个文法都能改写成 LL (1) 文法。</p>\n</li>\n<li class=\"quiz false\">\n<p>要构造行之有效的自上而下的分析器，则必须消除左递归。</p>\n</li>\n<li class=\"quiz false\">\n<p>自底而上语法分析方法的主要问题是候选式的选择。</p>\n</li>\n<li class=\"quiz false\">\n<p>简单优先文法允许任意两个产生式具有相同右部。</p>\n</li>\n<li class=\"quiz false\">\n<p>算符优先分析法每次都是对句柄进行归约。</p>\n</li>\n<li class=\"quiz false\">\n<p>LR 分析法是自顶向下语法分析方法。 </p>\n</li>\n<li class=\"quiz true\">\n<p>LR 分析法在自左至右扫描输入串时就能发现错误，但不能准确地指出出错地点。</p>\n</li>\n<li class=\"quiz true\">\n<p>LR 分析器的任务就是产生 LR 分析表。 </p>\n</li>\n<li class=\"quiz false\">\n<p>lR 分析技术无法适用二义文法。 </p>\n</li>\n<li class=\"quiz false\">\n<p>综合属性是用于 “自上而下” 传递信息。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个语义子程序描述了一个文法所对应的翻译工作。 </p>\n</li>\n<li class=\"quiz true\">\n<p>程序中的表达式语句在语义翻译时不需要回填技术。 </p>\n</li>\n<li class=\"quiz false\">\n<p>树形表示和四元式不便于优化，而三元式和间接三元式则便于优化。 </p>\n</li>\n<li class=\"quiz true\">\n<p>进行代码优化时应着重考虑循环的代码优化，这对提高目标代码的效率将起更大作用。</p>\n</li>\n<li class=\"quiz true\">\n<p>仅考虑一个基本块，不能确定一个赋值是否真是无用的。 </p>\n</li>\n<li class=\"quiz true\">\n<p>削减运算强度破坏了临时变量在一基本块内仅被定义一次的特性。 </p>\n</li>\n<li class=\"quiz false\">\n<p>在中间代码优化中循环上的优化主要有不变表达式外提和削减运算强度。</p>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "编译原理",
                "编译原理"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%A1%AB%E7%A9%BA%E9%A2%98/",
            "url": "https://to-ywz.github.io/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%A1%AB%E7%A9%BA%E9%A2%98/",
            "title": "编译原理填空题",
            "date_published": "2021-07-05T08:13:43.000Z",
            "content_html": "<h1 id=\"编译原理填空题\"><a class=\"anchor\" href=\"#编译原理填空题\">#</a> 编译原理填空题</h1>\n<ol>\n<li class=\"quiz fill\">\n<p>编译程序是将 <span class=\"gap\">高级语言程序</span> 翻译成 <span class=\"gap\">汇编语言或机器语言程序</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译程序的工作过程一般可以划分为 <span class=\"gap\">词法分析</span>，<span class=\"gap\">语法分析</span>，<span class=\"gap\">语义分析</span>，中间代码生成，中间代码优化，目标代码生成几个基本阶段，同时还会伴有 <span class=\"gap\">表格处理</span>，<span class=\"gap\">出错处理</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>对编译程序而言，输入数据是 <span class=\"gap\">源程序</span>，输出结果是 <span class=\"gap\">目标程序</span>  。</p>\n</li>\n<li class=\"quiz fill\">\n<p>程序设计语言的单词符号一般可分成下列 5 种 <span class=\"gap\">保留字</span>，<span class=\"gap\">标识符</span>，<span class=\"gap\">常数</span>，<span class=\"gap\">算符</span>，<span class=\"gap\">界符</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一个程序设计语言是一个记号系统，如同自然语言一样，它的完整的定义应包括 <span class=\"gap\">语法</span>和 <span class=\"gap\">语义</span>两个方面。</p>\n</li>\n<li class=\"quiz fill\">\n<p>文法中的终结符和非终结符的交集是 <span class=\"gap\">空集</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>最左推导是指每都对句型中的 <span class=\"gap\">最左</span> 非终结符进行扩展。</p>\n</li>\n<li class=\"quiz fill\">\n<p>在语法分析中，最常见的两种方法，一是 <span class=\"gap\">自底向上</span> 分析法，另一是 <span class=\"gap\">自顶向下</span>   分析法。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一个句型中的最左简单短语称为该句型的 <span class=\"gap\">句柄</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>若 A={a , b} , B={c , d} , 则集合 AB = <span class=\"gap\">{ac , ad , bc , bd}</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>设 x=AB , 则 x0= <span class=\"gap\">ε</span> , x1= <span class=\"gap\">AB</span> , x2 = <span class=\"gap\">ABAB</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>文法描述的语言是该文法一切 <span class=\"gap\">句子</span>的集合。</p>\n</li>\n<li class=\"quiz fill\">\n<p>设文法 G 有两条产生式（1）S→0S1 （2）S→01 , 则该文法的语言 <span class=\"gap\">L(G)={0n1n│n≥1} </span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一种描述字符串集合的工具叫文法，它是由一个四元式组组成的，分别是 <span class=\"gap\">VT（终极符集）</span> , <span class=\"gap\">VN（非终极符集合）</span> , <span class=\"gap\">P（产生式集合）</span> , <span class=\"gap\">S（开始符）</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>乔姆斯基把文法分成四种类型，即 0 型，1 型，2 型和 3 型。其中 <span class=\"gap\">2 型</span>文法又称为上下文无关文法，<span class=\"gap\">3 型</span>文法又称为正规文法。 </p>\n</li>\n<li class=\"quiz fill\">\n<p><span class=\"gap\">上下文无关文法</span> 有足够的能力描述现今程序设计语言的语法结构，比如描述算术表达式，描述各种语句等。</p>\n</li>\n<li class=\"quiz fill\">\n<p><span class=\"gap\">最右推导</span>  称为规范推导。</p>\n</li>\n<li class=\"quiz fill\">\n<p>最右推导亦称为 <span class=\"gap\">规范推导</span>，由此得到的句型称为 <span class=\"gap\">规范</span> 句型。</p>\n</li>\n<li class=\"quiz fill\">\n<p>令 ={a,b} , 上的正规式（a|b）* 对应的正规集为:  <span class=\"gap\">{ε , a , b , aa , ab… , 所有 a , b 组成的串}</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>令 ={d,.,e,+,-}, 则上的正规式 d*(.dd*|ε)(e (+|-|ε) dd*|ε) 表示的是 <span class=\"gap\">无符号数</span>  。</p>\n</li>\n<li class=\"quiz fill\">\n<p>设 Σ={a , b} , 则 Σ 上的正规式（a∣b）(a∣b) 相应的正规集为 <span class=\"gap\">{aa,ab,ba,bb}</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一种描述字符串集合的工具叫自动机，它是由一个五元组组成的，分别是 <span class=\"gap\">字母表</span>，<span class=\"gap\">状态集</span>，<span class=\"gap\">开始状态</span>，<span class=\"gap\">末态集</span>，<span class=\"gap\">映射集</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>确定有限自动机 DFA 是 <span class=\"gap\">NFA</span> 的一个特例。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译技术中的词法分析阶段，常用的描述单词词法的工具主要包括正规文法和 <span class=\"gap\">正规式</span>    。</p>\n</li>\n<li class=\"quiz fill\">\n<p>词法分析阶段，常用的识别单词的有效工具是 <span class=\"gap\">有穷自动机</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>所谓一个语言的 <span class=\"gap\">语法</span> 是指一组规则，用它可以形成和产生一个合适的程序。</p>\n</li>\n<li class=\"quiz fill\">\n<p>自顶向下的语法分析方法的基本思想是：从文法的 <span class=\"gap\">开始符号</span> 开始，根据给定的输入串并按照文法的产生式一步一步的向下进行 <span class=\"gap\">直接推导</span>，试图推导出文法的 <span class=\"gap\">句子</span>，使之与给定的输入串 <span class=\"gap\">匹配</span> 。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>预测分析法属于 <span class=\"gap\">自顶向下</span>  的语法分析方法。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译技术中，常用的确定的自顶向下语法分析技术有预测分析法和 <span class=\"gap\">递归下降法</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>预测分析程序是使用一张 <span class=\"gap\">分析表</span> 和一个 <span class=\"gap\">符号栈</span>      进行联合控制的。</p>\n</li>\n<li class=\"quiz fill\">\n<p>自底向上的语法分析方法的基本思想是：从输入串入手，利用文法的产生式一步一步地向上进行 <span class=\"gap\">直接归约</span>，力求归约到文法的 <span class=\"gap\">开始符</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>自底向上分析法采用 <span class=\"gap\">移进</span>，归约，错误处理，<span class=\"gap\">接受</span>      等四种操作。</p>\n</li>\n<li class=\"quiz fill\">\n<p>分析句型时，应用算符优先分析技术时，每步被直接归约的是 <span class=\"gap\">最左素短语</span>，而应用 LR 分析技术时，每步被直接归约的是 <span class=\"gap\">句柄</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>已知算符文法 G: S→b|∧|(T) T→T,S|S 则 F IRSTVT ((T)=  <span class=\"gap\">  <code>b,  ∧,  ( ,   ,</code>  </span>。 </p>\n</li>\n<li class=\"quiz fill\">\n<p><span class=\"gap\">自下而上</span> 语法分析的关键问题是精确定义可归约串的概念。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>LR 分析法属于 <span class=\"gap\">自底向上</span>  的语法分析方法。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>LR 分析器由 <span class=\"gap\">总控程序</span>，<span class=\"gap\">分析表</span>，<span class=\"gap\">分析栈</span> 3 个部分组成。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>活前缀是指 <span class=\"gap\">规范句型</span>  的一个前缀，这种前缀不含 <span class=\"gap\">句柄</span> 之后的任何符号。</p>\n</li>\n<li class=\"quiz fill\">\n<p>LR 语法分析技术的 LR (0) 项目中，根据分隔符所在位置及分隔符后符号的类别，我们称 A→α.[n] 称为<span class=\"gap\">归约</span> 项目 ；对文法开始符号 S΄ , 称 S΄→α.[n] 为 <span class=\"gap\">接受</span>  项目；称 A→α.aβ[n]（a 为终结符）为 <span class=\"gap\">移进</span>  项目。</p>\n</li>\n<li class=\"quiz fill\">\n<p>假定一个 LR (0) 规范族中含有的项目集 (状态) I , I={X→α.bβ[n] , A→γ.[m] , B→δ.[k]} , 则该项目集中含有 <span class=\"gap\">移进 - 归约</span> 冲突和 <span class=\"gap\">归约 - 归约</span> 冲突。</p>\n</li>\n<li class=\"quiz fill\">\n<p>属性文法中，文法符号的属性有两种，一种称为 <span class=\"gap\">继承属性</span>，另一种称为 <span class=\"gap\">综合属性</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>在编译技术中，常用的中间代码表示有 <span class=\"gap\">抽象语法树（AST）</span> , <span class=\"gap\">四元式（TAC）</span> , P-code,Bytecode 及 SSA。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译技术中，常用的两种语义计算模型有 <span class=\"gap\">属性文法</span> 和 <span class=\"gap\">翻译模式</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>根据属性文法中包含属性的类别，属性文法可分为 <span class=\"gap\">S - 属性</span> 文法和 <span class=\"gap\">L - 属性</span>文法。</p>\n</li>\n<li class=\"quiz fill\">\n<p>翻译模式在形式上类似于属性文法，但允许用 { } 括起来的语义动作出现在产生式右端的 <span class=\"gap\">任意</span> 位置，和属性文法相对应，翻译模式分为 <span class=\"gap\">S - 翻译模式</span> 和 <span class=\"gap\">L - 翻译模式</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>优化就是对程序进行各种 <span class=\"gap\">等价</span> 变换，使之能生成更有效的 <span class=\"gap\">目标代码</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>依据优化所涉及的程序范围，编译过程中可以进行的优化可以分为 <span class=\"gap\">局部优化</span>，<span class=\"gap\"> 循环优化</span>，<span class=\"gap\"> 全局优化</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>局部优化是在 <span class=\"gap\">基本块</span> 范围内进行的一种优化。</p>\n</li>\n<li class=\"quiz fill\">\n<p>在程序流图中，对任意两个结点 m 和 n 而言，如果从流图的首结点出发，到达 n 的任一通路都要经过 m , 则称 m 是 n 的 <span class=\"gap\">支配结点（必经结点）</span> 。</p>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "编译原理",
                "编译原理"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E9%80%89%E6%8B%A9%E9%A2%98/",
            "url": "https://to-ywz.github.io/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E9%80%89%E6%8B%A9%E9%A2%98/",
            "title": "编译原理选择题",
            "date_published": "2021-07-05T08:13:43.000Z",
            "content_html": "<h1 id=\"编译原理选择题练习\"><a class=\"anchor\" href=\"#编译原理选择题练习\">#</a> 编译原理选择题练习</h1>\n<ol>\n<li class=\"quiz\">\n<p>编译程序是一种常用的<span class=\"gap\"></span>软件 。</p>\n<ul class=\"options\">\n<li>应用</li>\n<li class=\"correct\">系统</li>\n<li>支撑</li>\n<li>自动化</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>编译程序分成若干个 “遍” 是为了 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>提高程序的执行效率</li>\n<li class=\"correct\">使程序的结构更加清晰</li>\n<li>利用有限的机器内存并提高机器的执行效率</li>\n<li>利用有限的机器内存但降低了机器的执行效率</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>对于使用的函数没有定义的错误信息，是编译的<span class=\"gap\"></span>阶段报告的。</p>\n<ul class=\"options\">\n<li>词法分析</li>\n<li>语法分析</li>\n<li class=\"correct\">语义分析</li>\n<li>代码生成</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>和代码优化部分不是每个编译程序都必需的。</p>\n<ul class=\"options\">\n<li>语法分析</li>\n<li class=\"correct\">中间代码生成</li>\n<li>词法分析</li>\n<li>目标代码生成</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析器用于识别<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>字符串</li>\n<li>语句</li>\n<li class=\"correct\">单词</li>\n<li>标识符</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>语法分析器则可以发现源程序中的<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>语义错误</li>\n<li>语法和语义错误</li>\n<li>错误并校正</li>\n<li class=\"correct\">语法错误</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>编译程序绝大多数时间花费在<span class=\"gap\"></span>上。</p>\n<ul class=\"options\">\n<li>出错处理</li>\n<li>词法分析</li>\n<li>目标代码生成</li>\n<li class=\"correct\">表格管理</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>不可能是目标代码的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>汇编指令代码</li>\n<li>可重定位指令代码</li>\n<li>绝对指令代码</li>\n<li class=\"correct\">中间代码</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>描述一个语言的文法是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>唯一的</li>\n<li class=\"correct\">不唯一的</li>\n<li>可能唯一，也可能不唯一</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若文法 G 定义的语言是无限集，则文法必然是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>前后文无关文法</li>\n<li>正规文法</li>\n<li>二义性文法</li>\n<li class=\"correct\">递归文法</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>给定文法 G [A]：A→bA∣cc 试问在下面的符号串中，为文法句子的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">cc   </li>\n<li>bcbc</li>\n<li>bcbcc</li>\n<li>bccbcc</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>由文法的开始符经 0 步或多步推导产生的文法符号序列是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>短语</li>\n<li>句柄</li>\n<li class=\"correct\">句型   </li>\n<li>句子</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G 产生的<span class=\"gap\"></span>的全体是该文法描述的语言。</p>\n<ul class=\"options\">\n<li>句型</li>\n<li>终结符集</li>\n<li>非终结符集</li>\n<li class=\"correct\">句子</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>一个文法所描述的语言是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">唯一的      </li>\n<li>不唯一的</li>\n<li>可能唯一，好可能不唯一</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设有以下方法</p>\n<pre><code>GN: N→N’\n    N’ → D | N’D\n    D →  0|1|2……|9\n</code></pre>\n<p>下列哪个句型中有最右推导<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>2D</li>\n<li>D6D</li>\n<li class=\"correct\">N‘88      </li>\n<li>DND</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设有文法</p>\n<pre><code>G[S]：S→ABS|Aa|b\nA→a\nB→b|SBB|ε\n</code></pre>\n<p>该文法的一个句子：abbaa 对应的语法树如图，试问根据该语法树，求得该句子的短语有<span class=\"gap\"></span>个。</p>\n<ul class=\"options\">\n<li class=\"correct\">8 个  </li>\n<li>6 个</li>\n<li>7 个</li>\n<li>9 个</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设有文法 G [I]： I→I0  | I1  | I a  | Ic  | a  | b  | c 下列符号串中是该文法的句子的有 </p>\n<pre><code>①ab0\n②a0c01\n③aaa\n④bc10\n</code></pre>\n<p>可选项有:<span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>①</li>\n<li>②③④</li>\n<li class=\"correct\">③④          </li>\n<li>①②③④</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G：S→xSx|y 所识别的语言是</p>\n<ul class=\"options\">\n<li>xyx</li>\n<li>(xyx)*</li>\n<li class=\"correct\">xnyxn (n&gt;=0)      </li>\n<li>x*y+</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G [N]=（{b}, {N, B}, N, {N→b│bB, B→bN}）, 该文法所描述的语言是</p>\n<ul class=\"options\">\n<li><code>L(G[N])=&#123;b^(i)│i≥0&#125;</code></li>\n<li><code>L(G[N])=&#123;b^(2i)│i≥0&#125;</code></li>\n<li class=\"correct\"><code>L(G[N])=&#123;b^(2i+1)│i≥0&#125;</code> </li>\n<li><code>L(G[N])=&#123;b^(2i+1)│i≥1&#125;</code></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设文法为：S→SA|A A→a|b 则对句子 aba, 下面 <span class=\"gap\"></span>是规范推导。</p>\n<ul class=\"options\">\n<li>S-&gt;SA-&gt;SAA-&gt;AAA-&gt;aAA-&gt;abA-&gt;aba</li>\n<li>S-&gt;SA-&gt;SAA-&gt;AAA-&gt;AAa-&gt;Aba-&gt;aba</li>\n<li>S-&gt;SA-&gt;SAA-&gt;SAa-&gt;Sba-&gt;Aba-&gt;aba</li>\n<li class=\"correct\">S-&gt;SA-&gt;Sa-&gt;SAa-&gt;Sba-&gt;Aba-&gt;aba    </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>如果文法 G 是无二义性的，则它的任何句子 <span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">最左推导和最右推导对应的语法树必定相同</li>\n<li>最左推导和最右推导对应的语法树可能不同</li>\n<li>最左推导和最右推导必定相同</li>\n<li>可能存在两个不同的最左推导，但它们对应的语法树相同</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在编译中产生语法树是为了<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">语法分析     </li>\n<li>语义分析</li>\n<li>词法分析</li>\n<li>产生目标代码</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>一个句型中的最左<span class=\"gap\"></span>称为该句型的句柄。</p>\n<ul class=\"options\">\n<li>短语</li>\n<li class=\"correct\">简单短语     </li>\n<li>素短语</li>\n<li>终结符号</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G 所描述的语言是的集合。</p>\n<ul class=\"options\">\n<li>文法 G 的字母表 V 中所有符号组成的符号串</li>\n<li>文法 G 的字母表 V 的闭包 V * 中的所有符号串</li>\n<li class=\"correct\">由文法的开始符号推出的所有终极符串</li>\n<li>由文法的开始符号推出的所有符号串</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设 G 是一个给定的文法，S 是文法的开始符号，如果 S-&gt;x (其中 x∈V*), 则称 x 是文法 G 的一个 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>候选式</li>\n<li class=\"correct\">句型   </li>\n<li>单词</li>\n<li>产生式</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法</p>\n<pre><code>G[E]:   E-&gt;T | E+T\n        T-&gt;F | T*F\n        F-&gt;a | (E)\n该文法句型 E ＋ F ﹡(E ＋ T) 的简单短语\n①（E ＋ T）\n② E ＋ T\n③ F\n④ F﹡(E ＋ T)\n</code></pre>\n<p>是下列符号串中的<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>① 和 ③</li>\n<li class=\"correct\">② 和 ③    </li>\n<li>③ 和 ④</li>\n<li>③</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若一个文法是递归的，则它所产生的语言的句子<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">是无穷多个     </li>\n<li>是有穷多个</li>\n<li>是可枚举的</li>\n<li>个数是常量</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>如果 L (M1)=L (M2), 则 M1 与 M2<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">等价            </li>\n<li>都是二义的</li>\n<li>都是无二义的</li>\n<li>它们的状态数相等</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G： <code>E→E+T|T</code>   <code>T→T*P|P</code>   <code>P→(E)|i</code>  则句型  <code>P+T+i</code>  的句柄为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>P+T</li>\n<li class=\"correct\">P        </li>\n<li>P+T+i</li>\n<li>i</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 <code>G:S→S+T|T1</code>   <code>T→T*P|P</code>   <code>P→(S)|i</code>  句型 P+T+i 的短语有<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>i,P+T</li>\n<li class=\"correct\">P,P+T,i,P+T+i       </li>\n<li>P+T+i</li>\n<li>P, P+T, i</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>正则式的 “*” 读作<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>并且</li>\n<li>或者</li>\n<li>连接</li>\n<li class=\"correct\">闭包    </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>LL (1) 文法的条件是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">对形如 U→X1︱X2︱…︱Xn 的产生式，要求 SELECT（U→Xi）∩SELECT（U→Xj）＝, （i≠j）</li>\n<li>对形如 U→X1︱X2︱…︱Xn 的产生式，若 Xiε, 要求 FIRST（Xi）∩FOLLOW（U）＝</li>\n<li>A 和 B</li>\n<li>都不是</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在语法分析处理中，FIRST 集合、 FOLLOW 集合、 SELECT 集合均是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>非终极符集</li>\n<li class=\"correct\">终极符集     </li>\n<li>字母表</li>\n<li>状态集</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>高级语言编译程序常用的语法分析方法中，递归下降分析法属于<span class=\"gap\"></span> 分析方法。</p>\n<ul class=\"options\">\n<li><code>自左至右</code></li>\n<li class=\"correct\"><code>自顶向下</code>         </li>\n<li><code>自底向上</code></li>\n<li><code>自右向左</code></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>采用自上而下分析，必须<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>消除左递归</li>\n<li>消除右递归</li>\n<li class=\"correct\">消除回溯            </li>\n<li>提取公共左因子</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析所依据的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>语义规则</li>\n<li class=\"correct\">构词规则  </li>\n<li>语法规则</li>\n<li>等价变换规则</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析器的输出结果是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>单词的种别编码</li>\n<li>单词在符号表中的位置</li>\n<li class=\"correct\">单词的种别编码和自身的值  </li>\n<li>单词自身值</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>正规式 M1 和 M2 等价是指<span class=\"gap\"></span>_。</p>\n<ul class=\"options\">\n<li>M1 和 M2 状态数相等</li>\n<li>M1 和 M2 的有向弧条数相等</li>\n<li class=\"correct\">M1 和 M2 所识别的语言集合相等   </li>\n<li>M1 和 M2 状态数和有向弧条数相等</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在状态转换图中，结点代表<span class=\"gap\"></span> 用圆圈表示。</p>\n<ul class=\"options\">\n<li><code>输入缓冲区</code></li>\n<li><code>向前搜索</code></li>\n<li class=\"correct\"><code>状态</code>        </li>\n<li><code>字符串</code></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析器的输入是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>单词符号串</li>\n<li class=\"correct\">源程序  </li>\n<li>语法单位</li>\n<li>目标程序</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>有限状态自动机能识别<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>上下文无关文法</li>\n<li>上下文有关文法</li>\n<li class=\"correct\">正规文法          </li>\n<li>短语文法</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在自底向上的语法分析方法中，分析的关键是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li class=\"correct\">寻找句柄      </li>\n<li>寻找句型</li>\n<li>消除递归</li>\n<li>选择候选式</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>算符优先分析每次归约的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>最左直接短语</li>\n<li>直接短语</li>\n<li class=\"correct\">最左素短语      </li>\n<li>控制结点</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G：S→b|∧|(T) T→T∨S|S 则 FIRSTVT (T)=<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li><code>&#123; b, ∧, ( &#125; </code></li>\n<li><code>&#123; b, ∧, ) &#125;</code></li>\n<li class=\"correct\"><code>&#123; b, ∧, (, ∨ &#125;</code>     </li>\n<li><code>&#123; b, ∧, ）, ∨ &#125;</code></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>有文法 G：E→E*T  |  T   T→T+I  |  i 句子 1+2*8+6 按该文法 G 归约，其值为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>23</li>\n<li class=\"correct\">42    </li>\n<li>30</li>\n<li>17</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>如果文法是无二义的，那么规范归约是指<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>最左推导的逆过程</li>\n<li class=\"correct\">最右推导的逆过程 </li>\n<li>规范推导</li>\n<li>最左归约的逆过程</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在 LR 分析法中，分析栈中存放的状态是识别规范句型 <span class=\"gap\"></span>  的 DFA 状态。</p>\n<ul class=\"options\">\n<li>句柄</li>\n<li>前缀</li>\n<li class=\"correct\">活前缀        </li>\n<li>LR (0) 项目</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若项目集 Ik 含有 A-&gt;r.[n] 和 B-&gt;α.a [m] 项目，则在状态 Ik 时，仅当面临的输入符号 a∈FOLLOW (A) 时，才采取 “A-&gt;α.[n]” 动作的一定是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>LALR 文法</li>\n<li>LR (0) 文法</li>\n<li>LR (1) 文法</li>\n<li class=\"correct\">SLR (1) 文法      </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在 LR (0) 的 ACTION 子表中，如果某一行中存在标记为 “rj” 的栏，则____。</p>\n<ul class=\"options\">\n<li class=\"correct\">该行必定填满 rj   </li>\n<li>该行未填满 rj</li>\n<li>其他行也有 rj</li>\n<li>goto 子表中也有 rj</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若状态 Ik 含有项目 “A→α.[n]”, 且仅当输入符号 a∈FOLLOW (A) 时，才用规则 “A →α[n]” 归约的语法分析方法是<span class=\"gap\"></span>__。</p>\n<ul class=\"options\">\n<li>LALR 分析法</li>\n<li>LR (0) 分析法</li>\n<li>LR (1) 分析法</li>\n<li class=\"correct\">SLR (1) 分析法</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>使用<span class=\"gap\"></span>可以定义一个程序的意义。</p>\n<ul class=\"options\">\n<li class=\"correct\">语义规则  </li>\n<li>词法规则</li>\n<li>产生规则</li>\n<li>左结合规则</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>终结符具有<span class=\"gap\"></span>__属性。</p>\n<ul class=\"options\">\n<li>传递</li>\n<li>继承</li>\n<li>抽象</li>\n<li class=\"correct\">综合  </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>有文法 G 及其语法制导翻译如下所示：则分析句子 1∧2∧3#4 其值为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>10</li>\n<li>34</li>\n<li class=\"correct\">14  </li>\n<li>54</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>数组 <code>A[1..20,1..10]</code>  的首地址偏移量为 0, 按行存储，每个元素占一个字节，存储器按字编址，则 <code>A[i,j]</code>  的偏移地址为<span class=\"gap\"></span>__。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>(i-1)×10+(j-1)</code>  </li>\n<li><code>(i-1)×20+(j-1)</code></li>\n<li><code>(i-1)+ (j-1)×10</code></li>\n<li><code>(i-1)+ (j-1)×20</code></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>中间代码生成时所依据的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>语法规则</li>\n<li>词法规则</li>\n<li class=\"correct\">语义规则    </li>\n<li>等价变换规则</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>四元式之间的联系是通过<span class=\"gap\"></span>__实现的。</p>\n<ul class=\"options\">\n<li>指示器</li>\n<li class=\"correct\">临时变量      </li>\n<li>符号表</li>\n<li>程序变量</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>下面<span class=\"gap\"></span>_不能作为一个基本块的入口。</p>\n<ul class=\"options\">\n<li>程序的第一个语句</li>\n<li>条件语句转移到的语句</li>\n<li class=\"correct\">无条件语句之后的下一条语句      </li>\n<li>无条件语句转移到的语句</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>一个控制流程图就是具有<span class=\"gap\"></span>_的有向图。</p>\n<ul class=\"options\">\n<li>唯一入口结点</li>\n<li>唯一出口结点</li>\n<li class=\"correct\">唯一首结点         </li>\n<li>唯一尾结点</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>基本块内的优化为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>代码外提，删除归纳变量</li>\n<li class=\"correct\">删除多余运算，删除无用赋值 </li>\n<li>强度削弱，代码外提</li>\n<li>循环展开，循环合并</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>下列<span class=\"gap\"></span>优化方法不是针对循环优化进行的。</p>\n<ul class=\"options\">\n<li>强度削弱</li>\n<li>删除归纳变量</li>\n<li class=\"correct\">删除多余运算      </li>\n<li>代码外提</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>优化<span class=\"gap\"></span>行事件较短。</p>\n<ul class=\"options\">\n<li>占用存储空间较小</li>\n<li>运行事件短但占用内存空间大</li>\n<li class=\"correct\">运行时间短且占用存储空间小 </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>代码优化的目的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>节省时间</li>\n<li>节省空间</li>\n<li class=\"correct\">节省时间和空间        </li>\n<li>把编译程序进行等价交换</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "编译原理",
                "编译原理"
            ]
        },
        {
            "id": "https://to-ywz.github.io/blog/prism%E4%B8%8B%E7%89%B9%E6%9C%89%E6%B8%B2%E6%9F%93/",
            "url": "https://to-ywz.github.io/blog/prism%E4%B8%8B%E7%89%B9%E6%9C%89%E6%B8%B2%E6%9F%93/",
            "title": "prism下特有渲染",
            "date_published": "2021-07-05T01:21:14.000Z",
            "content_html": "<h1 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h1>\n<p>使用 markdown-it-prism 进行代码高亮，支持显示行号、行高亮 mark 、命令行提示符 command 、代码块标题。</p>\n<p>基本格式： [language] [title] [url] [link text] [mark] [command]</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>行高亮</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The bigger number is %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h1 id=\"练习与答案\"><a class=\"anchor\" href=\"#练习与答案\">#</a> 练习与答案</h1>\n<hr />\n<h2 id=\"title-练习题与答案quiz-true\"><a class=\"anchor\" href=\"#title-练习题与答案quiz-true\">#</a> title: 练习题与答案<br />\n quiz: true</h2>\n<ol>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz multi\">\n<p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://to-ywz.github.io/CS/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/",
            "url": "https://to-ywz.github.io/CS/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/",
            "title": "C语言深度剖析",
            "date_published": "2021-07-03T05:02:54.018Z",
            "content_html": "<h1 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h1>\n<h2 id=\"关键字数量\"><a class=\"anchor\" href=\"#关键字数量\">#</a> 关键字数量</h2>\n<p>C89 因该是 32 个，C99 多出了 5 个，多出的 5 个如下</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>定义一个类的内联函数，引入它的主要原因是用它替代 C 中表达式形式的宏定义</td>\n</tr>\n<tr>\n<td>restrict</td>\n<td>只用于限定指针，所有修改该指针所指向内容的操作全部都是基于 (base on) 该指针的，即不存在其它进行修改操作的途径</td>\n</tr>\n<tr>\n<td>_Bool</td>\n<td>用于表示布尔值，引入  <code>&lt;stdbool.h&gt;</code> , 可以用 bool 代替</td>\n</tr>\n<tr>\n<td>_Complex 和 Imaginary</td>\n<td>添加了复数类型</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于-sizeof-不得不说的那些事\"><a class=\"anchor\" href=\"#关于-sizeof-不得不说的那些事\">#</a> 关于 sizeof 不得不说的那些事</h2>\n<p>其实挺致命的 sizeof 平常都是 sizeof () 这么用的，一直以为它是个函数，到了今天才知道它是个关键字<br />\n sizeof 不带括号也可以使用，sizeof (int) 和 sizeof int 没有什么区别，但是由于 sizeof () 用的多，建议用着一种形式<br />\n至于为什么 sizeof () 用的多我估计是和 不用 <code>#define max(a,b) a&gt;b?a:b</code> , 而用 <code>#define max(a,b) (a)&gt;(b)?(a):(b)</code>  的原因是一致的</p>\n<h2 id=\"关于-声明-和-定义-不得不说的二三事\"><a class=\"anchor\" href=\"#关于-声明-和-定义-不得不说的二三事\">#</a> 关于 声明 和 定义 不得不说的二三事</h2>\n<p>声明和定义是由明显区别的，体现在两个地方：内存 和 出现次数</p>\n<ul>\n<li>在内存上，<br />\n 定义必然占用内存空间<br />\n声明不一定占用内存空间，只有当被声明的对象被定义后才会占用空间<br />\n这一块的区别可以去看以先 汇编 上对内存的分配<br />\n测试代码如下:<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//extern int small = 0; /* extern 声明的 同时不能被定义 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> big<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x <span class=\"token operator\">+=</span> i <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>出现次数，<br />\n 定义只能出现一次，要不然就是重定义，鬼知道编译器会给你优化成什么东西<br />\n声明能出现多次，编译器会认为当前的这写声明都是一个变量，一般用于多文件编译跨文件的变量</li>\n</ul>\n<h2 id=\"register\"><a class=\"anchor\" href=\"#register\">#</a> register</h2>\n<p>这个关键字目的在于告诉编译器 把变量存放到 CPU 内部寄存器中，减少变量从内存中的读取次数来提升效率<br />\n当然，你定义是你定义，编译器听不听这你就管不着了。人家怎么开心怎么来<br />\n有个要注意的地方，register 变量可能不存放在内存中，所以不能用取址运算符 “&amp;” 来获取 register 变量的地址<br />\n对了，寄存器是无法存入自定义类型的，所以传参记得传指针</p>\n<h2 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h2>\n<p>这玩意可亲切了，毕竟干嵌入式出身，CPU 内部有寄存器，这是唯一一个和 CPU 处理速度能搭上拍的存储器<br />\n但是由于造价高，所以数量少。但凡数据读取都会经过寄存器，哪怕在内存上读取，也是从内存到高速缓存，再到寄存器<br />\n至于为什么快，一是小，而是距离近，其他原因我也没法解释了</p>\n<h2 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h2>\n<h3 id=\"修饰变量\"><a class=\"anchor\" href=\"#修饰变量\">#</a> 修饰变量</h3>\n<p>变量又分为局部和全局变量，但它们都存在内存的静态区</p>\n<ul>\n<li>静态全局变量，作用域仅限于变量被定义的文件中，从哪定义的就从哪开始，在定义之前的地方调用，就需要 用  <code>extern</code>  来声明</li>\n<li>静态局部变量，在函数体里面定义的，就只能在这个函数里用了，同一个文档中的其他函数也用不了.<br />\n 由于被 static 修饰的变量总是存在内存的静态区，所以即使这个函数运行结束，这个静态变量的值还是不会被销毁，函数下次使用时仍然能用到这个值</li>\n</ul>\n<h3 id=\"修饰函数\"><a class=\"anchor\" href=\"#修饰函数\">#</a> 修饰函数</h3>\n<p>修饰函数。函数前加 static 使得函数成为静态函数。但此处 “static” 的含义<br />\n不是指存储方式，而是指对函数的作用域仅局限于本文件</p>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<h3 id=\"什么是数据类型\"><a class=\"anchor\" href=\"#什么是数据类型\">#</a> 什么是数据类型</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs67q9n232j30p60jl76j.jpg\" alt=\"alt \" /><br />\n数据类型其实就是一个模子，每定义一个变量就是用模子在内存里打一个相应大小的空间.<br />\n 数据类型当然不仅如此，数据结构的定义就是数据及在数据上的操作，简单来说，除了有空间，还得有使用方法</p>\n<h3 id=\"变量命名规则\"><a class=\"anchor\" href=\"#变量命名规则\">#</a> 变量命名规则</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs6997qbhgj30ti06kwf6.jpg\" alt=\"alt\" /><br />\nc 语言是一个精简高效的语言，所以我们变量名也要简洁有力，但是非常用英语词汇最好不要使用缩写，尤其是专业英语</p>\n<h4 id=\"作用域前缀命名规则\"><a class=\"anchor\" href=\"#作用域前缀命名规则\">#</a> 作用域前缀命名规则</h4>\n<table>\n<thead>\n<tr>\n<th>标识符类型</th>\n<th>作用域前缀</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Global Variable</td>\n<td>g</td>\n</tr>\n<tr>\n<td>File Static Variable(native)</td>\n<td>n</td>\n</tr>\n<tr>\n<td>Function Static Variable</td>\n<td>f</td>\n</tr>\n<tr>\n<td>Auto Variable</td>\n<td>a</td>\n</tr>\n<tr>\n<td>Global Function</td>\n<td>g</td>\n</tr>\n<tr>\n<td>Static Function</td>\n<td>n</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据类型前缀命名规则\"><a class=\"anchor\" href=\"#数据类型前缀命名规则\">#</a> 数据类型前缀命名规则</h4>\n<table>\n<thead>\n<tr>\n<th>Prefix</th>\n<th>Suffix</th>\n<th>Data Type</th>\n<th>Example</th>\n<th>Remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bt</td>\n<td></td>\n<td>bit</td>\n<td>Bit btVariable</td>\n</tr>\n<tr>\n<td>b</td>\n<td></td>\n<td>boolean</td>\n<td>boolean bVariable</td>\n</tr>\n<tr>\n<td>c</td>\n<td></td>\n<td>char</td>\n<td>char cVariable;</td>\n</tr>\n<tr>\n<td>i</td>\n<td></td>\n<td>int</td>\n<td>int iVariable;</td>\n</tr>\n<tr>\n<td>s</td>\n<td></td>\n<td>short[int]</td>\n<td>short[int] sVariable;</td>\n</tr>\n<tr>\n<td>l</td>\n<td></td>\n<td>long[int]</td>\n<td>long[int] lVariable;</td>\n</tr>\n<tr>\n<td>u</td>\n<td></td>\n<td>unsigned[int]</td>\n<td>unsigned[int] uiVariable;</td>\n</tr>\n<tr>\n<td>d</td>\n<td></td>\n<td>double</td>\n<td>double dVariable;</td>\n</tr>\n<tr>\n<td>f</td>\n<td></td>\n<td>float</td>\n<td>float fVariable;</td>\n</tr>\n<tr>\n<td>p</td>\n<td></td>\n<td>pointer</td>\n<td>void *vpVariable; 指针前缀</td>\n</tr>\n<tr>\n<td>v</td>\n<td></td>\n<td>void</td>\n<td>void vVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>enum</td>\n<td>enum A stVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>struct</td>\n<td>struct A stVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>union</td>\n<td>union A stVariable;</td>\n</tr>\n<tr>\n<td>fp</td>\n<td></td>\n<td>function point</td>\n<td>void(* fpGetModeFuncList_a[])( void )</td>\n</tr>\n<tr>\n<td></td>\n<td>_a</td>\n<td>array of</td>\n<td>char cVariable_a[TABLE_MAX];</td>\n</tr>\n<tr>\n<td></td>\n<td>_st  _pst</td>\n<td>typedefenum/struct/union</td>\n<td>typedef struct SM_EventOpt { unsigned char unsigned int char }SM_EventOpt_st,*SM_EventOpt_pst;</td>\n<td>当自定义结构数据类型时使用_st 后缀；当自定义结构数据类型为指针类型时使用_pst 后缀；</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"含义标识命名规则\"><a class=\"anchor\" href=\"#含义标识命名规则\">#</a> 含义标识命名规则</h4>\n<p>变量命名使用名词性词组，函数命名使用动词性词组。</p>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>目标词</th>\n<th>动词 (的过去分词)</th>\n<th>状语</th>\n<th>目的地</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataGotFromSD</td>\n<td>Data</td>\n<td>Got</td>\n<td>From</td>\n<td>SD</td>\n<td>从 SD 中取得的数据</td>\n</tr>\n<tr>\n<td>DataDeletedFromSD</td>\n<td>Data</td>\n<td>Deleted</td>\n<td>From</td>\n<td>SD</td>\n<td>从 SD 中删除的数据</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 变量含义标识符构成：目标词 + 动词 (的过去分词)+ [状语] + [目的地];</p>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>目标词</th>\n<th>动词 (的过去分词)</th>\n<th>状语</th>\n<th>目的地</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GetDataFromSD</td>\n<td>Get</td>\n<td>Data</td>\n<td>From</td>\n<td>SD</td>\n<td>从 SD 中取得数据</td>\n</tr>\n<tr>\n<td>DeleteDataFromSD</td>\n<td>Delete</td>\n<td>Data</td>\n<td>From</td>\n<td>SD</td>\n<td>从 SD 中删除数据</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 函数含义标识符构成：动词 (一般现时)+ 目标词 +[状语]+[目的地];</p>\n<h4 id=\"其他命名规则\"><a class=\"anchor\" href=\"#其他命名规则\">#</a> 其他命名规则</h4>\n<ul>\n<li>程序中不得出现仅靠大小写区分的相似的标识符</li>\n<li>一个函数名禁止被用于其它之处</li>\n</ul>\n<h2 id=\"再谈-sizeof\"><a class=\"anchor\" href=\"#再谈-sizeof\">#</a> 再谈 sizeof</h2>\n<p>sizeof 不是函数<br />\n sizeof 不是函数<br />\n sizeof 不是函数<br />\n在计算 数据类型的时候<strong>不能</strong>省略 (), 在计算变量所占用空间的时候可以省略，<mark>建议都不要省略</mark></p>\n<h3 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h3>\n<p>PS: 以下情况为 64 位操作系统，gcc-x86-64 环境下</p>\n<ol>\n<li class=\"quiz fill\">\n<p><code>sizeof(int) *p</code>  的含义<span class=\"gap\">表示计算 int 型所占字节数，然后再乘以 p</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>当  <code>int *p = NULL;</code>  时， <code>sizeof(p)</code>  的值是<span class=\"gap\"> 8</span>,  <code>sizeof(*p)</code>  的值是 [4].{.gap}。</p>\n</li>\n<li class=\"quiz fill\">\n<p>当  <code>int a[100];</code>  sizeof (a) 的值<span class=\"gap\"> 400</span>,  <code>sizeof(a[100])</code>  的值<span class=\"gap\"> 4</span>,  <code>sizeof(&amp;a)</code>  的值 [8].{.gap}。</p>\n</li>\n<li>\n<p>当  <code class=\"quiz fill\">int b[100];</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>sizeof (b) 的值是 [8].{gap}。</p>\n<h2 id=\"关于-if-else-的那些事\"><a class=\"anchor\" href=\"#关于-if-else-的那些事\">#</a> 关于 if ... else ... 的那些事</h2>\n<h3 id=\"关于-true-和-false\"><a class=\"anchor\" href=\"#关于-true-和-false\">#</a> 关于 TRUE 和 FALSE</h3>\n<p>在 C99 标准中 添加了 bool 数据类型，多了两个宏  <code>true</code>  和   <code>flase</code> <br />\n 但是 在单片机中 编译器可能不支持 &lt;stdbool.h&gt; 这个头文件，所以可以考虑使用 宏来替代<br />\n例如  <code>#define TRUE  1</code> <br />\n 当然 如果 状态仅仅有 0 1 两种，下面的方法 会更加好一些</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为 0 执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 非 0 执行</span></pre></td></tr></table></figure><p>上面这种方法无需考虑， <code>TRUE</code>  和  <code>FALSE</code>  被 Keil 或者其他 编译器定义了，并且不是正常的数值</p>\n<h3 id=\"浮点的比较\"><a class=\"anchor\" href=\"#浮点的比较\">#</a> 浮点的比较</h3>\n<p>在计算机中，数字都是离散的，所以浮点数的精度也是有限的，浮点变量在进行几次运算后，数值可能就产生了误差<br />\n这时候，对其进行 等价判别必然会产生判。例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">,</span> d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token number\">194268.02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token number\">194268</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    d3 <span class=\"token operator\">=</span> d1 <span class=\"token operator\">-</span> d2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d3 <span class=\"token operator\">></span> d4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d3 <span class=\"token operator\">&lt;</span> d4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f - %f = %f \\n\"</span><span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果:</p>\n<pre><code>&lt; 0.02\n194268.015625 - 194268.000000 = 0.015625\n</code></pre>\n<p>可以看出数据发生了明显的变化，所以在对浮点数进行比较的时候，务必设定一个精度范围<br />\n误差在这个范围即为相等.<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span> EPSINON<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> EPSINON<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>核心就是: <mark>浮点数都是有精度限制的，所以你存的数，不一定就是你要数</mark></p>\n<h2 id=\"另一个条件分支-switch-case\"><a class=\"anchor\" href=\"#另一个条件分支-switch-case\">#</a> 另一个条件分支: switch case</h2>\n<p>其实在很大程度上  <code>if else</code>  已经够用了，但是为了让逻辑更加清晰，以及便于编译器更好的优化代码<br />\n在看 &lt;深入理解操作系统&gt; 这本书的时候 我对  <code>if else</code>  和  <code>switch case</code>  分别生成的分支语句进行了反汇编<br />\n发现 后者 只有在  <code>case</code>  数量超过 4 的时候才会生成条件 转跳表 这个数据结构<br />\n所以建议是，当条件分支数 &gt; 5 时，设置连续的 case 值，进行分支执行</p>\n<h2 id=\"高深莫测的-const\"><a class=\"anchor\" href=\"#高深莫测的-const\">#</a> 高深莫测的 const</h2>\n<p>定义 const 只读变量，具有不可变性。<br />\nconst 的出现是为了节省空间，取代 预编译指令。但是很显然，取代失败了。毕竟 宏函数 还是很香的<br />\n言归正传，<br />\n 通常来说，编译器不为普通 const 只读变量分配存储空间，而是将它们保存在符号表中，这使<br />\n得它成为一个编译期间的值，没有了存储与读内存的操作，使得它的效率也很高</p>\n<h3 id=\"const-修饰数组\"><a class=\"anchor\" href=\"#const-修饰数组\">#</a> const 修饰数组</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> ary<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>const 修饰的数组为，只读数组，不可修改数组内的元素<br />\n当然 数组名本身也是一个常量指针，所以 const 位于什么位置，对于 数组来说并没有什么区别</p>\n<h3 id=\"const-修饰指针\"><a class=\"anchor\" href=\"#const-修饰指针\">#</a> const 修饰指针</h3>\n<p>对于 指针来说，const 的位置就很关键</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 可变，p 指向的对象不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 可变，p 指向的对象不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 不可变，p 指向的对象可变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针 p 和 p 指向的对象都不可变</span></pre></td></tr></table></figure><p>这一块我就不细讲了，之前记录过，具体细节看这篇博客:<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0MlRTglQUYlQUQlRTglQTglODAlRTYlOEMlODclRTklOTIlODglRTclQUMlOTQlRTglQUUlQjAvQyVFOCVBRiVBRCVFOCVBOCU4MCVFNiU4QyU4NyVFOSU5MiU4OCVFNyVBQyU5NCVFOCVBRSVCMC8=\">( •̀ ω •́ )✧</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 * p,p 是指针，*p 是指针指向的对象，不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 * p,p 是指针，*p 是指针指向的对象，不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 p, p 不可变，p 指向的对象可变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前一个 const 修饰 * p, 后一个 const 修饰 p, 指针 p 和 p 指向的对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>都不可变</pre></td></tr></table></figure><h3 id=\"const-修饰函数\"><a class=\"anchor\" href=\"#const-修饰函数\">#</a> const 修饰函数</h3>\n<h4 id=\"const-修饰函数参数\"><a class=\"anchor\" href=\"#const-修饰函数参数\">#</a> const 修饰函数参数</h4>\n<p>const 修饰符也可以修饰函数的参数，当不希望这个参数值被函数体内意外改变时使用。例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>告诉编译器  <code>DATE</code>  在函数体中的不能改变，从而防止了使用者的一些无意的或错误的修改</p>\n<h4 id=\"const-修饰返回值\"><a class=\"anchor\" href=\"#const-修饰返回值\">#</a> const 修饰返回值</h4>\n<p>const 修饰符也可以修饰函数的返回值，返回值不可被改变.<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fun</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在另一连接文件中引用 <span class=\"token keyword\">const</span> 只读变量<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确的声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误！只读变量的值不能改变</span></pre></td></tr></table></figure><h2 id=\"反优化大师-volatile\"><a class=\"anchor\" href=\"#反优化大师-volatile\">#</a> 反优化大师 volatile</h2>\n<p>这个关键字在 非嵌入式平台上十分少用. volatile 的作用是告诉 编译器不对这个变量进行优化，并提供该变量稳定的内存空间.<br />\n 一般来说，在嵌入式中，会存在软延时，例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> timeout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时候如果删除  <code>volatile</code>  可能就会导致 timeout 无法访问，这个函数直接被优化为空，然后延时异常，尤其是在 CCS 上编写 MSP 系列单片机的时候，所有变量都需要加上  <code>volatile</code> .<br />\n 对于这种情况建议是直接 typedef 一下  <code>typedef volatile uint8_t vu8_t;</code>  方便使用，避免重复劳动</p>\n<h2 id=\"跨国护照-extern\"><a class=\"anchor\" href=\"#跨国护照-extern\">#</a> 跨国护照 extern</h2>\n<p>为什么说是跨国护照呢？extern 用于扩大 函数，变量的作用域，当一个变量需要跨文件的时候，就需要，用 extern 来声明，一般放在头文件中.<br />\n 这不就是护照，每个要使用的文件就得包含整个声明，这部就像是签证？<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GPIO_TypeDef</span> GPIO1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 作用域为包含了这个 头文件的所有文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_WritePin</span><span class=\"token punctuation\">(</span>GPIO_TypeDef <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> pin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_WritePin</span><span class=\"token punctuation\">(</span>GPIO_TypeDef <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> pin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 函数默认为 自带 extern 属性，都为跨文件作用域.</span></pre></td></tr></table></figure><p>需要注意的是，extern 是声明，而非定义。这时候对变量进行增删查改，任何一个操作都会导致程序异常，所以在 extern 某个变量后需要手动 定义一下这个变量，才能对变量进行操作</p>\n<h2 id=\"struct\"><a class=\"anchor\" href=\"#struct\">#</a> struct</h2>\n<p>在我看来，如果 C 的灵魂是指针，那么 struct 就是灵魂的载体，有了 strcut 之后，我们就无需局限在基本数据类型上，可以实现自己的数据类型，实现相关结构体，当然要注意的是，这玩意一般传指针，传结构体过于浪费运存，不建议使用</p>\n<h3 id=\"空结构体大小\"><a class=\"anchor\" href=\"#空结构体大小\">#</a> 空结构体大小</h3>\n<p>这里有一个很有意思的问题，如果一个结构体如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stu</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>st</pre></td></tr></table></figure><p>那么  <code>sizeof(st)</code>  的大小是多少呢？书中说是 1 , 但我在 vscode + 64 位的 GCC 编译器下 编译出是 0<br />\narm-linux-gnueabihf-gcc-6.2.1 也是 0<br />\n 所以我觉得可能是编译器版本不同，以及 VC6.0 编译器的自带的一些配置才出现这个问题<br />\n PS: 这个问题得先放一放有空再去深究</p>\n<h3 id=\"柔性数组\"><a class=\"anchor\" href=\"#柔性数组\">#</a> 柔性数组</h3>\n<p>C99 中，结构中的最后一个元素允许是未知大小的数组，这就叫做柔性数组成员，但结构中的柔性数组成员前面必须至少一个其他成员<br />\n例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> type_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 使用 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>type_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type_a<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个操作像极了  <code>int *a = new int [100];</code> ,  (间接证明了 C 语言是可以实现 高级语言的一些操作的，只不过会繁琐一些)</p>\n<h3 id=\"类-不类\"><a class=\"anchor\" href=\"#类-不类\">#</a> 类？不类！</h3>\n<p>struct 和 class 的最大区别在于 Class 对数据进行了封装，非 public 下的成员函数和成员变量，无法进行调用或访问<br />\n在 structurt 中，成员函数还是可以使用 函数指针来模拟</p>\n<h2 id=\"勤俭持家小能手-union\"><a class=\"anchor\" href=\"#勤俭持家小能手-union\">#</a> 勤俭持家小能手 union</h2>\n<p>union 与 struct 的用法非常类似。<br />\nunion 维护足够的空间来置放多个数据成员中的 <strong>一种</strong>，而不是为每一个数据成员配置空间<br />\n在 union 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员，所有的数据成员具有相同的起始地址。<br />\n例子如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> StateMachine</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> character<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">double</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个 union 只配置一个足够大的空间以来容纳最大长度的数据成员，以上例而言，最大<br />\n长度是 double 型态，所以 StateMachine 的空间大小就是 double 数据类型的大小.<br />\nunion 一般用于 缩减内存大小，当某些数据不会被同时访问的时候可以考虑使用 union</p>\n<h3 id=\"大小端问题\"><a class=\"anchor\" href=\"#大小端问题\">#</a> 大小端问题</h3>\n<ul>\n<li>大端模式（Big_endian）: 字数据的高字节存储在低地址中，而字数据的低字节则存放在高地址中。</li>\n<li>小端模式（Little_endian）: 字数据的高字节存储在高地址中，而字数据的低字节则存放在低地址中</li>\n</ul>\n<p>如何检测大小端:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">short</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    un<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0x0102</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 判断这种情况是大端还是小端</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大端模式！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 判断这种情况是大端还是小端</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小端模式！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"enum-要我有何用\"><a class=\"anchor\" href=\"#enum-要我有何用\">#</a> enum: 要我有何用？</h2>\n<p>一开始学枚举的时候，我也觉得枚举并没有什么作用，因为 宏可以干它能干的事情，后来学了状态机。开始整改代码风格的时候，算是理解了  <code>enum</code>  的作用.</p>\n<h3 id=\"define-和-enum-的区别\"><a class=\"anchor\" href=\"#define-和-enum-的区别\">#</a> #define 和 enum 的区别</h3>\n<ol>\n<li>#define 宏常量是在预编译阶段进行简单替换。枚举常量则是在编译的时候确定其值，这里就注定了，宏不可以被调试</li>\n<li>枚举可以一次定义大量的常量，并且视为一种数据类型，无论是在作为返回值还是作为状态参数的时候，都可以使得代码清晰易懂.</li>\n<li>enum 定义的枚举类型 视为一类状态的集合。例如 rtthread 的 rt_error 枚举。能清晰的标识</li>\n<li>sizeof () 枚举变量是整型大小</li>\n</ol>\n<h2 id=\"nvidia-的同门师兄弟-typdef\"><a class=\"anchor\" href=\"#nvidia-的同门师兄弟-typdef\">#</a> Nvidia 的同门师兄弟 typdef</h2>\n<p>当年的 Nvidia 最喜欢干的就是 套马甲，typedef 也是如此.<br />\ntypedef 在官方 的定义上是不会创造新的数据类型的，那么疑问就来了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">uint16_t</span> ODR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">uint16_t</span> IDR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> GPIO_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种又是什么情况呢？其实这属于定义以一个没有名字的结构体，然后重命名为 GPIO_TypeDef, 故称为 套马甲</p>\n<h3 id=\"又双叒叕是-define\"><a class=\"anchor\" href=\"#又双叒叕是-define\">#</a> 又双叒叕是 #define</h3>\n<p><code>#define</code>  总是 喜欢和 其它关键字抢饭吃。所以大部分 C 语言程序员都离不开 宏定义.<br />\n <code>typedef</code>  和  <code>#define</code>  区别还是那句话， <code>#define</code>  是等效替代.<br />\n <code>typedef</code> ,  <code>static</code> ,  <code>auto</code> ,  <code>register</code>  都属于存储类关键字，所以不能重叠使用，这个时候考虑使用  <code>#define</code>  .<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INT32</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> INT32 i <span class=\"token operator\">=</span> <span class=\"token number\">10</span>；</pre></td></tr></table></figure><p>有些时候必须得使用  <code>typedef</code> . 例如，在重命名指针数据类型的时候<br />\n <code>#define</code>  格式如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PCHAR</span> <span class=\"token expression\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PCHAR p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//p4 不是指针</span></pre></td></tr></table></figure><p><code>typedef</code>  格式:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pchar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pchar p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到这重要的关键字总结完毕，以后想起或者遇到什么有趣的应用，再继续完善<br />\n以上 都是本人基于 &lt;&lt;C 语言深度剖析&gt;&gt; 的看法和个人观点，如有不当，恳请斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一</p>\n",
            "tags": [
                "C",
                "学习笔记,C"
            ]
        },
        {
            "id": "https://to-ywz.github.io/blog/to-Build-shoka/to-Build-shoka/",
            "url": "https://to-ywz.github.io/blog/to-Build-shoka/to-Build-shoka/",
            "title": "搭建 shoka 主题出现的问题",
            "date_published": "2021-07-01T05:03:01.000Z",
            "content_html": "<h2 id=\"hexo-更换-shoka-主题-出现的问题\"><a class=\"anchor\" href=\"#hexo-更换-shoka-主题-出现的问题\">#</a> hexo 更换 shoka 主题 出现的问题</h2>\n<p>PS: 由于出现问题的时候没有及时截图，所以下面的文章里没有相关图片，十分抱歉</p>\n<h2 id=\"hexo-g-出现-yamlsafeload-is-remove\"><a class=\"anchor\" href=\"#hexo-g-出现-yamlsafeload-is-remove\">#</a> hexo g 出现 yaml.safeLoad () is remove</h2>\n<p>错误信息大概是这样的，主要是第一句</p>\n<pre><code class=\"language-sh-\">err: Error: Function yaml.safeLoad is removed in js-yaml 4. Use yaml.load instead, which is now safe by default.\nat Object.safeLoad (D:Github_Hexo\\hexo\\node_modules\\js-yaml\\index.js:10:11)\nat Hexo. (D:Github_Hexo\\hexo\\themes\\shoka\\scripts\\generaters\\config.js:41:41)\nat Hexo.tryCatcher (D:Github_Hexo\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\nat Hexo. (D:Github_Hexo\\hexo\\node_modules\\bluebird\\js\\release\\method.js:15:34)\nat D:Github_Hexo\\hexo\\node_modules\\hexo\\lib\\extend\\filter.js:67:52\nat tryCatcher (D:Github_Hexo\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n</code></pre>\n<p>这玩意挺坑人的，查了半天文档才知道  <code>yaml.safeLoad</code>  已经弃用，得用 <code>yaml.load</code>  代替<br />\n可苦了我这个搞嵌入式的<br />\n去  <code>theme\\shoka\\scripts\\generaters\\config.js</code>  文件的 第 41 行 将  <code>yaml.safeLoad</code>  修改为  <code>yaml.load</code></p>\n<h2 id=\"hexo-g-出现-template-render-error\"><a class=\"anchor\" href=\"#hexo-g-出现-template-render-error\">#</a> hexo g 出现 Template render error</h2>\n<p><strong>ps: 果然和我想的一样这篇博客 hexo g 就出错，诸位自行把 <mark>全角符号修改为半角符号</mark>即可</strong><br />\n我被这个问题折磨了一天，怎么说呢出现这个问题的原因有很多，我是通过新建博客一步步排查，查出来的...<br />\n 可能只适用于我自己和当前博客主题<br />\n我这边出现这个问题的原因是两个</p>\n<ol>\n<li>文章中可能出现了 <code>｛｛``｝｝</code> ,  <code>｛％</code>   <code>％｝</code> 这种 hexo 无法转义的字符，核心原因就是 hexo 转义时候发生的错误，｛％ ％｝ ｛｛｝｝ 是 yaml 的一个语法<br />\n网上都是这么说的，让后你自己一查发现没有。这都是假象，你用 git 的 bash 去查找的时候会发现一个极其怪异的现象<br />\n所有图片都被翻译成了  <code>｛｛</code>   <code>｝｝</code>   <code>｛％</code>   <code>％｝</code> , 而且还不是一对的..., 我没有太大的兴趣去琢磨为什么，所以就只是简单的对图片用了外链接<br />\n git bash 查找 这几个符号的命令如下</li>\n</ol>\n<pre><code class=\"language-sh-\">grep -r '｛｛' source\ngrep -r '｝｝' source\ngrep -r '｛％' source\ngrep -r '％｝' source\n</code></pre>\n<ol start=\"2\">\n<li>对应的 js 未安装也会导致这个问题<br />\n当我改完了这个 bug 之后，我发觉还是没有解决，重新新建本地博客后，发现一开统计点击量就会 error 然后去补装了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">hexo-symbols-count-time</span><br />\n 也可以复制这个直接安装  <code>npm install hexo-symbols-count-time</code></li>\n</ol>\n<h2 id=\"hexo-d-发布到-github时出现-openssl-433-或-time-out-433\"><a class=\"anchor\" href=\"#hexo-d-发布到-github时出现-openssl-433-或-time-out-433\">#</a> hexo d 发布到 GitHub 时出现 openssl 433 或 time out 433</h2>\n<p>这里我电脑上是因为，运行了小猫咪所以出现这个问题。诸位如果使用其他 VPN 需要自行修改端口<br />\n如果使用小猫咪，没有修改过端口的话，直接复制可用 (不要着急 cv)</p>\n<pre><code class=\"language-sh-\">git config --global http.proxy 127.0.0.1:7890\ngit config --global https.proxy 127.0.0.1:7890\n</code></pre>\n<p>配置完毕后，建议先  <code>hexo clean</code>  之后再执行  <code>hexo g -d</code> <br />\n 如果你配置过代理，那么请先取消后再尝试一次，取消命令如下</p>\n<pre><code class=\"language-sh-\">git config --global --unset http.proxy  #取消git的http代理配置\ngit config --global --unset https.proxy #取消git的https代理配置\n</code></pre>\n<p>在取消之前或者配置之前先最好先查看一下代理配置相关信息，命令如下</p>\n<pre><code class=\"language-sh-\">git config --global http.proxy  #查看git的http代理配置\ngit config --global https.proxy #查看git的https代理配置\ngit config --global -l #查看git的所有配置\n</code></pre>\n<h2 id=\"hexo-部署-github-pages-自定义域名失效的问题\"><a class=\"anchor\" href=\"#hexo-部署-github-pages-自定义域名失效的问题\">#</a> Hexo 部署 Github Pages 自定义域名失效的问题</h2>\n<p>之前在这写博客少，也不想动脑子解决问题，所以每一次手动添加 CNAME. 现在忍不了，动手改了改<br />\n找到 hexo 博客根目录下的 source 文件.(注意，不是主题的 source 文件).<br />\n 当 hexo 生成静态页面时，根目录下的 source 文件夹中的内容，就会在生成的网页根目录中<br />\n你可以在部署到 github 后，在仓库中查看，此时本地根目录下 source 文件夹的内容就在仓库的根目下.<br />\n 从此之后，再也不需要手动上传 CNAME 了</p>\n<h2 id=\"写在最后\"><a class=\"anchor\" href=\"#写在最后\">#</a> 写在最后</h2>\n<p>上面的问题都是基于我自己的主题和环境配置，测试出来的问题<br />\n以后遇到什么问题也会在这里继续跟新的<br />\n如果没到帮到各位表示十分抱歉 (#_&lt;-)<br />\n 能帮到大家就更好啦（＾∀＾●）ﾉｼ</p>\n",
            "tags": [
                "blog",
                "blog"
            ]
        },
        {
            "id": "https://to-ywz.github.io/blog/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%86%99%E6%B3%95/",
            "url": "https://to-ywz.github.io/blog/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%86%99%E6%B3%95/",
            "title": "数学公式写法",
            "date_published": "2021-05-01T05:03:01.000Z",
            "content_html": "<h2 id=\"数学公式写法\"><a class=\"anchor\" href=\"#数学公式写法\">#</a> 数学公式写法</h2>\n<p><strong>ps: 下面内容不一定所有 markdown 编辑全部支持，若出现 <code>ParseError: KaTeX parse error:</code>  则表示不支持该语法</strong><br />\n由于本文更换了 markdown 的渲染所以在博客上看见的基本都是乱码，可以直接复制到本地编辑器查看，基本不会有太大误差</p>\n<h3 id=\"行内与独行\"><a class=\"anchor\" href=\"#行内与独行\">#</a> 行内与独行</h3>\n<p>行内公式：将公式插入到本行内，符号:  <code>$公式内容$</code> , 如: <code> $xyz$</code> <br />\n 独行公式：将公式插入到新的一行内，并且居中，符号:  <code>$$公式内容$$</code> , 如:  <code>$$xyz$$</code></p>\n<h3 id=\"上标-下标与组合\"><a class=\"anchor\" href=\"#上标-下标与组合\">#</a> 上标、下标与组合</h3>\n<p 2=\"\">上标符号，符号: ^, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span><br />\n 下标符号，符号: _, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br />\n 组合符号，符号: {}, 如: {16}_{8}O{2+}_</p>\n<h3 id=\"汉字-字体与格式\"><a class=\"anchor\" href=\"#汉字-字体与格式\">#</a> 汉字、字体与格式</h3>\n<p x_1,\\dots,x_n=\"\">汉字形式，符号: \\mbox<ruby>}, 如: $V_{\\mbox {初始}}$\n字体控制，符号: \\displaystyle, 如: $\\displaystyle \\frac {x+y}{y+z}$\n下划线符号，符号: \\underline, 如: $\\underline {x+y}$\n标签，符号 \\tag {数字}, 如: $\\tag {11}$\n上大括号，符号: \\overbrace {算式}, 如: $\\overbrace {a+b+c+d}<rp>(</rp><rt>{2.0</rt><rp>)</rp></ruby>$<br />\n 下大括号，符号: \\underbrace {算式}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><munder><munder><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>1.0</mn></munder><mo>+</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">a+\\underbrace{b+c}_{1.0}+d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.076878em;vertical-align:-1.382438em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-1.617562em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span class=\"svg-align\" style=\"top:-2.26867em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.73133em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.382438em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span><br />\n 上位符号，符号: \\stacrel {上位符号}{基位符号}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo>⃗</mo></mover><mo><mover><mo><mo>=</mo></mo><mrow><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">f</mi></mrow></mover></mo></mrow><annotation encoding=\"application/x-tex\">\\vec{x}\\stackrel{\\mathrm{def}}{=}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.152978em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.714em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.20772em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.152978em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">=</span></span></span><span style=\"top:-3.5668699999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">d</span><span class=\"mord mathrm mtight\">e</span><span class=\"mord mathrm mtight\" style=\"margin-right:0.07778em;\">f</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"占位符\"><a class=\"anchor\" href=\"#占位符\">#</a> 占位符</h3>\n<p>两个 quad 空格，符号: \\qquad, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mspace width=\"2em\"/><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\qquad y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\nquad 空格，符号: \\quad, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mspace width=\"1em\"/><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\quad y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 大空格，符号，如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mtext> </mtext><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\ y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 中空格，符号:, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x : y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 小空格，符号，，如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x , y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 没有空格，符号 ``, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">xy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 紧贴，符号！，如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">!</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x ! y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<h3 id=\"定界符与组合\"><a class=\"anchor\" href=\"#定界符与组合\">#</a> 定界符与组合</h3>\n<p>括号，符号: () \\big (\\big) \\Big (\\Big) \\bigg (\\bigg) \\Bigg (\\Bigg), 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>（）</mtext><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">（）\\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">）</span><span class=\"mord\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"delimsizing size1\">)</span></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mord\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"delimsizing size3\">)</span></span><span class=\"mord\"><span class=\"delimsizing size4\">(</span></span><span class=\"mord\"><span class=\"delimsizing size4\">)</span></span></span></span></span><br />\n 中括号，符号: [], 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x+y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span><br />\n 大括号，符号: { }, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">{x+y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><br />\n 自适应括号，符号: \\left \\right, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\left(x\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mi>x</mi><mrow><mi>y</mi><mi>z</mi></mrow><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\left(x{yz}\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span><br />\n 组合公式，符号: {上位公式 \\choose 下位公式}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">{n+1 \\choose k}={n \\choose k}+{n \\choose k-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.253331em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.745392em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></span><br />\n 组合公式，符号: {上位公式 \\atop 下位公式}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mfrac linethickness=\"0px\"><mrow><msub><mi>k</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo>&gt;</mo><mn>0</mn></mrow><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>=</mo><mi>n</mi></mrow></mfrac></msub><msub><mi>A</mi><msub><mi>k</mi><mn>0</mn></msub></msub><msub><mi>A</mi><msub><mi>k</mi><mn>1</mn></msub></msub><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{k_0,k_1,\\ldots&gt;0 \\atop k_0+k_1+\\cdots=n}A_{k_0}A_{k_1}\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.50218em;vertical-align:-0.75218em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3447999999999999em;\"><span style=\"top:-2.3448em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.69164em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9880571428571429em;\"><span style=\"top:-2.1349714285714283em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">1</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">⋯</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-2.9920285714285715em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">1</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"minner mtight\">…</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5790571428571429em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.75218em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span></span></span></span></p>\n<h3 id=\"四则运算\"><a class=\"anchor\" href=\"#四则运算\">#</a> 四则运算</h3>\n<p>加法运算，符号: +, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 减法运算，符号: -, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>−</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x-y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 加减运算，符号: \\pm, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>±</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\pm y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 减甲运算，符号: \\mp, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∓</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\mp y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∓</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 乘法运算，符号: \\times, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>×</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\times y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 点乘运算，符号: \\cdot, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\cdot y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 星乘运算，符号: \\ast, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\ast y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 除法运算，符号: \\div, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>÷</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\div y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 斜法运算，符号: /, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x/y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 分式表示，符号: \\frac {分子}{分母}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{x+y}{y+z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.335547em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854439em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br />\n 分式表示，符号: {分子} \\voer {分母}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">{x+y} \\over {y+z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.335547em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854439em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br />\n 绝对值表示，符号: ||, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|x+y|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span></span></span></span></p>\n<h3 id=\"高级运算\"><a class=\"anchor\" href=\"#高级运算\">#</a> 高级运算</h3>\n<p>平均数运算，符号: \\overline<ruby> 算式}, 如: $\\overline {xyz}$\n开二次方运算，符号: \\sqrt, 如: $\\sqrt x$\n开方运算，符号: \\sqrt [开方数]{被开方数}, 如: $\\sqrt [3]{x+y}$\n对数运算，符号: \\log, 如: $\\log (x)$\n极限运算，符号: \\lim, 如: $\\lim<rp>(</rp><rt>{x \\to \\infty</rt><rp>)</rp></ruby><em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>极<rp> (</rp><rt>{x</rt><rp>)</rp> 限<rp> (</rp><rt>\\to</rt><rp>)</rp> 运算<rp> (</rp><rt>\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\displaystyle \\lim, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\displaystyle \\lim<rt></rt></ruby></em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>求<rp> (</rp><rt>{x</rt><rp>)</rp> 和<rp> (</rp><rt>\\to</rt><rp>)</rp> 运算<rp> (</rp><rt>\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\sum, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\sum<rt></rt></ruby><em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>求<rp> (</rp><rt>{x</rt><rp>)</rp> 和<rp> (</rp><rt>\\to</rt><rp>)</rp> 运算<rp> (</rp><rt>\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\displaystyle \\sum, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\displaystyle \\sum<rt></rt></ruby></em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>积分运算<rp> (</rp><rt>{\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\int, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\int<rt></rt></ruby><em 0=\"\" xdx=\"\"><ruby>0}{xdx}$\n<rt></rt>积分运算<rp> (</rp><rt>{\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\displaystyle \\int, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\displaystyle \\int<rt></rt></ruby></em>$<br />\n 微分运算，符号: \\partial, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial x}{\\partial y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3612159999999998em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br />\n 矩阵表示，符号: \\begin {matrix} \\end {matrix}, 如: \\left[ \\begin{matrix} 1 &2 &\\cdots &4\\5 &6 &\\cdots &8\\\\vdots &\\vdots &\\ddots &\\vdots\\13 &14 &\\cdots &16\\end{matrix} \\right]</p>\n<h3 id=\"逻辑运算\"><a class=\"anchor\" href=\"#逻辑运算\">#</a> 逻辑运算</h3>\n<p>等于运算，符号: =, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 大于运算，符号: &gt;, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&gt;</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y&gt;z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 小于运算，符号: &lt;, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&lt;</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y&lt;z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 大于等于运算，符号: \\geq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≥</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\geq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 小于等于运算，符号: \\leq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≤</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\leq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不等于运算，符号: \\neq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo mathvariant=\"normal\">≠</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\neq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不大于等于运算，符号: \\ngeq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≱</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\ngeq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.09657em;vertical-align:-0.30274em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≱</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不大于等于运算，符号: \\not\\geq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≱</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\not\\geq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不小于等于运算，符号: \\nleq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≰</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\nleq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.09657em;vertical-align:-0.30274em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≰</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不小于等于运算，符号: \\not\\leq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≰</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\not\\leq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 约等于运算，符号: \\approx, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≈</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\approx z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6775599999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 恒定等于运算，符号: \\equiv, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≡</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\equiv z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65819em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></p>\n<h3 id=\"集合运算\"><a class=\"anchor\" href=\"#集合运算\">#</a> 集合运算</h3>\n<p>属于运算，符号: \\in, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 不属于运算，符号: \\notin, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 不属于运算，符号: \\not\\in, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∉</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\not\\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 子集运算，符号: \\subset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊂</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 子集运算，符号: \\supset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊃</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\supset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 真子集运算，符号: \\subseteq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊆</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subseteq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非真子集运算，符号: \\subsetneq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊊</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subsetneq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⊊</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 真子集运算，符号: \\supseteq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊇</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\supseteq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊇</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非真子集运算，符号: \\supsetneq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊋</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\supsetneq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⊋</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非子集运算，符号: \\not\\subset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊄</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\not\\subset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非子集运算，符号: \\not\\supset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊅</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\not\\supset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 并集运算，符号: \\cup, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∪</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\cup y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 交集运算，符号: \\cap, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∩</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\cap y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 差集运算，符号: \\setminus, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∖</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\setminus y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 同或运算，符号: \\bigodot, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⨀</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\bigodot y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨀</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 同与运算，符号: \\bigotimes, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⨂</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\bigotimes y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨂</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 实数集合，符号: \\mathbb {R}, 如: \\mathbb {R}<br />\n 自然数集合，符号: \\mathbb {Z}, 如: \\mathbb {Z}<br />\n 空集，符号: \\emptyset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span></p>\n<h3 id=\"数学符号\"><a class=\"anchor\" href=\"#数学符号\">#</a> 数学符号</h3>\n<p>无穷，符号: \\infty, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span><br />\n 虚数，符号: \\imath, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ı</mi></mrow><annotation encoding=\"application/x-tex\">\\imath</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\"></span></span></span></span><br />\n 虚数，符号: \\jmath, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ȷ</mi></mrow><annotation encoding=\"application/x-tex\">\\jmath</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\"></span></span></span></span><br />\n 数学符号，符号 \\hat {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\check {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˇ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\check{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.62847em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.62847em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˇ</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\breve {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>˘</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\breve{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">˘</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\tilde {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>~</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\tilde{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6678599999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6678599999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">~</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\bar {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\bar{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.56778em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.56778em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span><br />\n 矢量符号，符号 \\vec {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.714em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.714em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\acute {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˊ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\acute{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˊ</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\grave {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˋ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\grave{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˋ</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\mathring {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>˚</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\mathring{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.375em;\"><span class=\"mord\">˚</span></span></span></span></span></span></span></span></span></span><br />\n 一阶导数符号，符号 \\dot {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>˙</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\dot{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.13889em;\"><span class=\"mord\">˙</span></span></span></span></span></span></span></span></span></span><br />\n 二阶导数符号，符号 \\ddot {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>¨</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\ddot{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">¨</span></span></span></span></span></span></span></span></span></span><br />\n 上箭头，符号: \\uparrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↑</mo></mrow><annotation encoding=\"application/x-tex\">\\uparrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">↑</span></span></span></span><br />\n 上箭头，符号: \\Uparrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇑</mo></mrow><annotation encoding=\"application/x-tex\">\\Uparrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">⇑</span></span></span></span><br />\n 下箭头，符号: \\downarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↓</mo></mrow><annotation encoding=\"application/x-tex\">\\downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">↓</span></span></span></span><br />\n 下箭头，符号: \\Downarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇓</mo></mrow><annotation encoding=\"application/x-tex\">\\Downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">⇓</span></span></span></span><br />\n 左箭头，符号: \\leftarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>←</mo></mrow><annotation encoding=\"application/x-tex\">\\leftarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">←</span></span></span></span><br />\n 左箭头，符号: \\Leftarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇐</mo></mrow><annotation encoding=\"application/x-tex\">\\Leftarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇐</span></span></span></span><br />\n 右箭头，符号: \\rightarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span><br />\n 右箭头，符号: \\Rightarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span><br />\n 底端对齐的省略号，符号: \\ldots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1,2,\\ldots,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span><br />\n 中线对齐的省略号，符号: \\cdots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>x</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">x_1^2 + x_2^2 + \\cdots + x_n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0622159999999998em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0622159999999998em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span><br />\n 竖直对齐的省略号，符号: \\vdots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mrow><annotation encoding=\"application/x-tex\">\\vdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.03em;\"></span><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span></span><br />\n 斜对齐的省略号，符号: \\ddots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋱</mo></mrow><annotation encoding=\"application/x-tex\">\\ddots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.82em;vertical-align:0em;\"></span><span class=\"minner\">⋱</span></span></span></span></p>\n<h3 id=\"希腊字母\"><a class=\"anchor\" href=\"#希腊字母\">#</a> 希腊字母</h3>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>实现</th>\n<th>字母</th>\n<th>实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>A</td>\n<td>α</td>\n<td>\\alhpa</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B</td>\n<td>β</td>\n<td>\\beta</td>\n</tr>\n<tr>\n<td>Γ</td>\n<td>\\Gamma</td>\n<td>γ</td>\n<td>\\gamma</td>\n</tr>\n<tr>\n<td>Δ</td>\n<td>\\Delta</td>\n<td>δ</td>\n<td>\\delta</td>\n</tr>\n<tr>\n<td>E</td>\n<td>E</td>\n<td>ϵ</td>\n<td>\\epsilon</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>Z</td>\n<td>ζ</td>\n<td>\\zeta</td>\n</tr>\n<tr>\n<td>H</td>\n<td>H</td>\n<td>η</td>\n<td>\\eta</td>\n</tr>\n<tr>\n<td>Θ</td>\n<td>\\Theta</td>\n<td>θ</td>\n<td>\\theta</td>\n</tr>\n<tr>\n<td>I</td>\n<td>I</td>\n<td>ι</td>\n<td>\\iota</td>\n</tr>\n<tr>\n<td>K</td>\n<td>K</td>\n<td>κ</td>\n<td>\\kappa</td>\n</tr>\n<tr>\n<td>Λ</td>\n<td>\\Lambda</td>\n<td>λ</td>\n<td>\\lambda</td>\n</tr>\n<tr>\n<td>M</td>\n<td>M</td>\n<td>μ</td>\n<td>\\mu</td>\n</tr>\n<tr>\n<td>N</td>\n<td>N</td>\n<td>ν</td>\n<td>\\nu</td>\n</tr>\n<tr>\n<td>Ξ</td>\n<td>\\Xi</td>\n<td>ξ</td>\n<td>\\xi</td>\n</tr>\n<tr>\n<td>O</td>\n<td>O</td>\n<td>ο</td>\n<td>\\omicron</td>\n</tr>\n<tr>\n<td>Π</td>\n<td>\\Pi</td>\n<td>π</td>\n<td>\\pi</td>\n</tr>\n<tr>\n<td>P</td>\n<td>P</td>\n<td>ρ</td>\n<td>\\rho</td>\n</tr>\n<tr>\n<td>Σ</td>\n<td>\\Sigma</td>\n<td>σ</td>\n<td>\\sigma</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>τ</td>\n<td>\\tau</td>\n</tr>\n<tr>\n<td>Υ</td>\n<td>\\Upsilon</td>\n<td>υ</td>\n<td>\\upsilon</td>\n</tr>\n<tr>\n<td>Φ</td>\n<td>\\Phi</td>\n<td>ϕ</td>\n<td>\\phi</td>\n</tr>\n<tr>\n<td>X</td>\n<td>X</td>\n<td>χ</td>\n<td>\\chi</td>\n</tr>\n<tr>\n<td>Ψ</td>\n<td>\\Psi</td>\n<td>ψ</td>\n<td>\\psi</td>\n</tr>\n<tr>\n<td>Ω</td>\n<td>\\v</td>\n<td>ω</td>\n<td>\\omega</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "blog",
                "blog,markdown"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Databases/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4MySQL%E8%80%81%E9%A1%BD%E5%9B%BA/",
            "url": "https://to-ywz.github.io/CS/Databases/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4MySQL%E8%80%81%E9%A1%BD%E5%9B%BA/",
            "title": "论如何删除 MySQL老顽固",
            "date_published": "2021-04-20T00:51:17.000Z",
            "content_html": "<h1 id=\"论如何删除-mysql老顽固\"><a class=\"anchor\" href=\"#论如何删除-mysql老顽固\">#</a> 论如何删除 MySQL 老顽固</h1>\n<p>去年的时候，因为课程需要所以安装了 MySQL 进行数据库配置， 因为各种原因 删了又装装了又删……<br />\n 万年老非酋就不该瞎折腾，在卸载 mysql x86 版本的时候，遗留下了一个 删不掉的 东西 <strong>mysql Connectornet/net x.x.x</strong>. 用官方的安装器覆盖安装，只会提示你是否更新，一更新就更新失败，去目录下面看连文件夹都找不到，最后去官网上问，说是 bug 等待更新，一等就等到现在……<br />\n 今天我给别人装 MySQL 的时候突然突发奇想，我拷贝了一份这个  <strong>mysql Connectornet/net x.x.x</strong> 从 完整的 mysql 中 然后粘贴到这个文件显示的安装目录下，然后尝试删除，结果美滋滋，直接删除成功！！！<br />\n能暴力 的问题果然，不能等最优解啊。<br />\n版本号对不上也没事的</p>\n<p>图片我找不到了，所以从网上找了一张<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20190911124626431.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfeXpfeW91bmc=,size_16,color_FFFFFF,t_70\" alt=\"alt\" /><br />\n 这个界面是你运行 mysql 安装器进行一次卸载失败后剩余的界面，点一下你要删除的选项就会显示 安装在哪，然后拿着文末的链接里的 东西粘贴后再卸载一次就可以成功了</p>\n<h2 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h2>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXNTbDd5YW56WXJSaFQzT0ZBU29PMGc=\">https://pan.baidu.com/s/1sSl7yanzYrRhT3OFASoO0g</span><br />\n 提取码：4rrn</p>\n",
            "tags": [
                "mysql",
                "数据库"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%872/",
            "url": "https://to-ywz.github.io/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%872/",
            "title": "python提升2",
            "date_published": "2021-03-21T07:45:54.000Z",
            "content_html": "<h2 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<p>定义一个类 Animals:</p>\n<ol>\n<li>数据成员\n<ul>\n<li>名称</li>\n<li>种类</li>\n<li>年龄</li>\n<li>性别</li>\n<li>状态</li>\n</ul>\n</li>\n<li>构造函数</li>\n</ol>\n<p>代码实现:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> singledispatch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animals</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    specie <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    geander <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">toWalk</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要散步\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">toEat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要食物\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">toDrink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要喝水\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 成员变量</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    specie <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    age <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> specie<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>specie <span class=\"token operator\">=</span> specie</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">miaomiaomiao</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大橘: 喵喵喵\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">setWeight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        self<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@singledispatch</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 想吃\"</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@Eat<span class=\"token punctuation\">.</span>register</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要吃 \"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 个\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>cat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token string\">'大橘'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中华田园'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>cat<span class=\"token punctuation\">.</span>toEat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>cat<span class=\"token punctuation\">.</span>toDrink<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>cat<span class=\"token punctuation\">.</span>miaomiaomiao<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>cat<span class=\"token punctuation\">.</span>setWeight<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" kg 重\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>cat<span class=\"token punctuation\">.</span>Eat<span class=\"token punctuation\">(</span><span class=\"token string\">\"小鱼干\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>cat<span class=\"token punctuation\">.</span>Eat<span class=\"token punctuation\">(</span><span class=\"token number\">99999</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>\n<p>通过 <code>@staticmethod</code>  装饰器即可把其装饰的方法变为一个静态方法.<br />\n 什么是静态方法呢？其实不难理解，普通的方法，可以在实例化后直接调用，并且在方法里可以通过 <code>self.</code>  调用实例变量或类变量.<br />\n 但静态方法<strong>是不可以访问实例变量或类变量的</strong>，一个不能访问实例变量和类变量的方法，其实相当于跟类本身已经没什么关系了，它与类唯一的关联就是需要通过类名来调用这个方法.</p>\n</li>\n<li>\n<p>类方法通过 <code>@classmethod</code>  装饰器实现，类方法和普通方法的区别是，类方法只能访问类变量，不能访问<strong>实例变量</strong>.</p>\n</li>\n<li>\n<p>属性方法的作用就是通过 <code>@property</code>  把一个方法变成一个静态属性，调用时与调用属性的方式相同.</p>\n<ul>\n<li>把一个方法变成静态属性的作用:<br />\n 当某个属性的值是一系列动作后才得到的结果.<br />\n 当每次调用时，其实它都要经过一系列的动作才返回结果的，但这些动作过程不需要用户关心，用户只关心得到这个属性的值即可，也就是说用户只需要调用这个属性就可以了.</li>\n</ul>\n<ol>\n<li>\n<p>修改属性值<br />\n将由 <code>@proerty</code>  装饰器（把一个方法变成一个静态属性）使用 <code>@proerty.setter</code>  装饰器再装饰一下，此时 你需要写一个新方法（同名）,  对这个属性值进行更改.</p>\n</li>\n<li>\n<p>删除属性</p>\n</li>\n</ol>\n<ul>\n<li>将由 <code>@proerty</code>  装饰器（把一个方法变成一个静态属性）使用 <code>@proerty.deleter</code>  装饰器再装饰一下，此时 你需要写一个新方法（同名）.</li>\n<li>使用 <code>del</code>  删除该实例所对应的属性方法（属性） 例如:  <code>del 对象.属性</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"python-json\"><a class=\"anchor\" href=\"#python-json\">#</a> python JSON</h2>\n<p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写。<br />\njson.dumps 用于将 python 对象编码成 JSON 字符串。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了提高可读性，dumps 方法提供了一些可选的参数。<br />\n <code>sort_keys=True</code>  表示按照字典排序 (a 到 z) 输出。<br />\n <code>indent</code>  参数，代表缩进的位数<br />\n <code>separators</code>  参数的作用是去掉，和 <code>:</code>  后面的空格，传输过程中数据越精简越好</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>separators<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>json.loads</code>  用于解码 JSON 数据。该函数返回 python 字段的数据类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jsonData <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>text <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#将 string 转换为 dict</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "python摸鱼"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%87/",
            "url": "https://to-ywz.github.io/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%87/",
            "title": "python提升",
            "date_published": "2021-03-14T12:08:41.000Z",
            "content_html": "<h1 id=\"python-提升百度飞桨\"><a class=\"anchor\" href=\"#python-提升百度飞桨\">#</a> python 提升 (百度飞桨)</h1>\n<p>熟悉 python 的基础语法，并掌握 NumPy, Pandas 及其他基础工具模块的使用</p>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul>\n<li>python 数据结构</li>\n<li>python 面向对象</li>\n<li>python JSON</li>\n<li>python 异常处理</li>\n<li>常见 Linux 命令</li>\n</ul>\n<h2 id=\"python数据结构\"><a class=\"anchor\" href=\"#python数据结构\">#</a> python 数据结构</h2>\n<p>数字、字符串、列表、元祖、字典</p>\n<h3 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h3>\n<p>python Number 数据类型用于存储数值<br />\n python Number 数据类型用于存储数值，包括整型、长整型、浮点型、复数</p>\n<h4 id=\"python-math-模块\"><a class=\"anchor\" href=\"#python-math-模块\">#</a> python math 模块:</h4>\n<pre><code>python 中数学运算常用的函数基本都在 math 模块\n</code></pre>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向上取整</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向下取整</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 绝对值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 开平方</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回自然常数的 n 次幂</span></pre></td></tr></table></figure><h4 id=\"python随机数\"><a class=\"anchor\" href=\"#python随机数\">#</a> python 随机数:</h4>\n<p><strong>示例:</strong>:<br />\n 导入 random 后，使用 random 随机生成  <code>[0, 1)</code>  的 实数:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ranNumber <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ranNumber<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>与 C 语言相反。调用 random.random () 生成随机数时，每一次生成的数都是随机的.<br />\n 这时候就可以  <code>seed</code> , 当预先使用 random.seed (x) 设定好种子之后，其中的 x 可以是任意数字，此时使用 random () 生成的随机数将会是同一个</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"------- 设置种子 seed -------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Random number with seed 10 : \"</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 生成同一个随机数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Random number with seed 10 : \"</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"randint\"><a class=\"anchor\" href=\"#randint\">#</a> randint()</h3>\n<p>生成一个随机整数<br />\n<strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ran <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<p>作用：类似其他语言中的数组</p>\n<h3 id=\"获取和检测-列表成员\"><a class=\"anchor\" href=\"#获取和检测-列表成员\">#</a> 获取和检测 列表成员</h3>\n<p>声明一个列表，并通过下标或索引获取元素</p>\n<p><strong>示例 1</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#声明一个列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tonney'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'superman'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'jay'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#通过下标或索引获取元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#获取第一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#遍历列表，获取元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#查询 names 里面有没有 superman</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">'superman'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#更简单的方法，来查询 names 里有没有 superman</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'superman'</span> <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表元素添加\"><a class=\"anchor\" href=\"#列表元素添加\">#</a> 列表元素添加</h3>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#声明一个空列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>girls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#append (), 末尾追加</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>girls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'杨超越'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>girls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#extend (), 一次添加多个。把一个列表添加到另一个列表，列表合并. </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>models <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘雯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'奚梦瑶'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>girls<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#girls = girls + models</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>girls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#insert (): 指定位置添加</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>girls<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'虞书欣'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>girls<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表元素修改\"><a class=\"anchor\" href=\"#列表元素修改\">#</a> 列表元素修改</h3>\n<p>通过下标找到元素，然后用 = 赋值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'香蕉'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'草莓'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fruits<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'strawberry'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>将fruits列表中的‘香蕉’替换为‘banana’</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> fruit <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">'香蕉'</span> <span class=\"token keyword\">in</span> fruit<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fruit <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">'香蕉'</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fruits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表删除元素\"><a class=\"anchor\" href=\"#列表删除元素\">#</a> 列表删除元素</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pen'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pencil'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pen'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pencil'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>words<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pen'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pencil'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>words<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表切片\"><a class=\"anchor\" href=\"#列表切片\">#</a> 列表切片</h3>\n<p>在 python 中处理列表的部分元素，称之为切片.<br />\n 创建切片，可指定要使用的第一个元素和最后一个元素的索引.<br />\n<strong>PS: 左开右闭</strong><br />\n将截取的结果再次存放在一个列表中，所以还是返回列表</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>animals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tiger'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'snake'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'mouse'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bird'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表排序\"><a class=\"anchor\" href=\"#列表排序\">#</a> 列表排序</h3>\n<ul>\n<li>随机生成 10 个不同的整数，并进行排序</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生成10个不同的随机整数, 并存至列表中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span>  random</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>random_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ran <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> ran <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>  random_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        random_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#默认升序</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>new_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#降序</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>new_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">,</span>reverse <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h2>\n<p>列表类似，元祖中的内容不可修改</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tuple2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tuple2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>PS: 元组中只有一个元素时，需要在后面加逗号！</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tuple3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>元组不能修改，所以不存在往元组里加入元素.<br />\n 那作为容器的元组，如何存放元素？</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>random_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ran <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    random_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>random_tuple <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组的修改\"><a class=\"anchor\" href=\"#元组的修改\">#</a> 元组的修改</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组相关函数\"><a class=\"anchor\" href=\"#元组相关函数\">#</a> 元组相关函数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"统计元组成员个数\"><a class=\"anchor\" href=\"#统计元组成员个数\">#</a> 统计元组成员个数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"存在检测\"><a class=\"anchor\" href=\"#存在检测\">#</a> 存在检测</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> random_tuple<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#返回元组中 4 所对应的下标，不会报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组的拆包与装包\"><a class=\"anchor\" href=\"#元组的拆包与装包\">#</a> 元组的拆包与装包</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#定义一个元组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#将元组赋值给变量 a,b,c</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token operator\">=</span> t3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#打印 a,b,c</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#当元组中元素个数与变量个数不一致时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#定义一个元组，包含 5 个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#将 t4 [0],t4 [1] 分别赋值给 a,b; 其余的元素装包后赋值给 c</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> t4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h2>\n<ul>\n<li><strong>定义</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dict2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'李明'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'weight'</span><span class=\"token punctuation\">:</span><span class=\"token number\">61</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>list 转字典</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict3 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'李明'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict3<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>修改</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dict4<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'虞书欣'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dict4<span class=\"token punctuation\">[</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">43</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict4<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "python摸鱼"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/Python/Python%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80/",
            "url": "https://to-ywz.github.io/CS/Python/Python%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80/",
            "title": "python 基础",
            "date_published": "2021-03-13T12:22:15.000Z",
            "content_html": "<h1 id=\"python-基础\"><a class=\"anchor\" href=\"#python-基础\">#</a> python 基础</h1>\n<h2 id=\"基础操作\"><a class=\"anchor\" href=\"#基础操作\">#</a> 基础操作</h2>\n<p>python 的  <code>+ - * / =</code>  运算基本与其他语言类似，除法有个专门的整除运算符  <code>//</code> <br />\npython 的  <code>print</code>  可以使用  <code>%</code>  来控制数据类型 输出</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>  \t\t<span class=\"token comment\"># 声明一个变量 age 用来存储一个数字 20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\t\t        <span class=\"token comment\"># 基础数学加法，在 IDLE 中，直接打印出结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s'</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 打印 Hello World!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"语句结构\"><a class=\"anchor\" href=\"#语句结构\">#</a> 语句结构</h2>\n<p>与 其他语言不同 python 采用缩进进行格式控制， <code>:</code>  来标识和制表符 来确定代码块的位置</p>\n<h3 id=\"if语句\"><a class=\"anchor\" href=\"#if语句\">#</a> if 语句</h3>\n<ul>\n<li><strong>语法格式</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    语句</pre></td></tr></table></figure><ul>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 如果 if 跟随的条件为 假 那么不执行属于 if 的语句，然后寻找 else</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"假的\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 寻找到 else 之后 执行属于 else 中的语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1==2为假\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"for语句\"><a class=\"anchor\" href=\"#for语句\">#</a> for 语句</h3>\n<ul>\n<li><strong>语法:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>范围<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里可以填入 1-2 个参数 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token comment\"># 也可以没有 range 直接 in 在一个 列表，元组，等元素集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    语句</pre></td></tr></table></figure><ul>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>strList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6789'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> strList<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"循环操作-while\"><a class=\"anchor\" href=\"#循环操作-while\">#</a> 循环操作 ---while</h3>\n<ul>\n<li><strong>语法</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><ul>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 计算 0-99 的和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sumI <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">99</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sumI <span class=\"token operator\">=</span> sumI <span class=\"token operator\">+</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    n <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sumI<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"break-continue-pass\"><a class=\"anchor\" href=\"#break-continue-pass\">#</a> break、continue、pass</h3>\n<ul>\n<li><strong>示例 1:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#break 语句可以跳出 for 和 while 的循环体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><ul>\n<li><strong>示例 2:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#continue 语句跳过当前循环，直接进行下一轮循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>示例 3:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#pass 是空语句，一般用做占位语句，不做任何事情</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> <span class=\"token string\">'Boolean'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> letter <span class=\"token operator\">==</span> <span class=\"token string\">'o'</span> OR letter <span class=\"token operator\">==</span> <span class=\"token string\">'B'</span> OR letter <span class=\"token operator\">==</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"number数字\"><a class=\"anchor\" href=\"#number数字\">#</a> Number (数字)</h3>\n<p>python 支持 <code>int, float, complex</code>  三种不同的数字类型</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4j</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"string字符串\"><a class=\"anchor\" href=\"#string字符串\">#</a> String (字符串)</h3>\n<p>python 支持字符串拼接、截取等多种运算，对于 python 来说  <code>&quot;&quot;</code>  和  <code>''</code>  没有区别  <code>r''</code>  被认为为源字符串</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a + b 输出结果：\"</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#print (\"a [1:4] 输出结果：\", a [1:4])</span></pre></td></tr></table></figure><h3 id=\"list列表\"><a class=\"anchor\" href=\"#list列表\">#</a> List (列表)</h3>\n<p>列表是写在方括号  <code>[]</code>  之间、用逗号分隔开的元素列表.<br />\n 列表索引值以 0 为开始值，-1 为从末尾的开始位置.</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2.23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"tuple元组\"><a class=\"anchor\" href=\"#tuple元组\">#</a> Tuple（元组）</h3>\n<p>tuple 与 list 类似，不同之处在于 tuple 的元素不能修改. tuple 写在小括号里，元素之间用逗号隔开.<br />\n 元组的元素不可变，但可以包含可变对象，如 list.</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2.23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"dict字典\"><a class=\"anchor\" href=\"#dict字典\">#</a> dict（字典）</h3>\n<p>字典是无序的对象集合，使用键 - 值（key-value）存储，具有极快的查找速度.(Hash 实现)<br />\n 键 (key) 必须使用不可变类型.<br />\n 同一个字典中，键 (key) 必须是唯一的.</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Michael'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tracy'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"set集合\"><a class=\"anchor\" href=\"#set集合\">#</a> set（集合）</h3>\n<p><code>set</code>  和 <code>dict</code>  类似，也是一组 <code>key</code>  的集合，但不存储 <code>value</code> 。由于 <code>key</code>  不能重复，所以，在 <code>set</code>  中，没有重复的 <code>key</code> 。<br />\n <code>set</code>  是无序的，重复元素在 <code>set</code>  中自动被过滤。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业:</h2>\n<p>用 pyton 实现 9*9 乘法表:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d*%d=%d\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "python摸鱼"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/",
            "url": "https://to-ywz.github.io/CS/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/",
            "title": "C语言指针笔记",
            "date_published": "2021-03-11T03:45:20.000Z",
            "content_html": "<h1 id=\"c-语言指针笔记\"><a class=\"anchor\" href=\"#c-语言指针笔记\">#</a> C 语言指针笔记</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>指针 可以说是 C 语言的灵魂，最巧妙的地方。不明白，不理解指针 那就是等于没学 C 语言.<br />\n 指针这玩意说难也不难，主要是细节问题。比如最常见的，指针数组和数组指针、指针常数和常数指针、指针函数和函数指针。刚学完指针还好，时间一久，听到之这些东西很难短时间内反应过来<br />\n指针这块 用的多的 就是字符串了，其他的用的都比较少，所以久而久之总是忘，所以干脆写篇博客加深印象，也便于日后回顾<br />\n<s><em>我才不承认是我自己，搞混了概念，重新学了一遍，想和人分享没人听才写的博客，绝对不是！</em></s></p>\n<h2 id=\"基础部分\"><a class=\"anchor\" href=\"#基础部分\">#</a> 基础部分</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a><br />\n写在前面: <strong>指针是一种变量，地址是一种数据</strong>.<br />\n 大概的介绍一下 什么是指针，指针的作用，以及指针的基本操作<br />\n<strong> PS: 以下假设环境均为 64 位 1904 Win10 vscode gcc8.1.0</strong></p>\n<h3 id=\"指针的作用\"><a class=\"anchor\" href=\"#指针的作用\">#</a> 指针的作用</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>我先说明作用后面慢慢分析.<br />\n<strong> 作用</strong>:</p>\n<ol>\n<li>数据共享更加便捷，打破共享壁垒</li>\n<li>以更精简的方式引用大的数据结构</li>\n<li>利用指针可以直接操纵内存地址 (在 MCU, 嵌入式开发上体会会很深刻)</li>\n<li>利用指针，能在程序执行过程中预留新的内存空间 (当然在没有 MMU 的单片机中，无法实现，能写内存管理的大佬除外)</li>\n</ol>\n<p>先抛开指针，让我们来想想，变量的作用是什么？<strong>使内存空间易于管理</strong>.<br />\n 好，为什么内存空间难管理，因为内存标号 (<strong>内存地址</strong>) 往往都是一串 16 进制数，难于记忆，所以对内存地址取个名字，便于记忆<br />\n<strong>局部变量</strong>都有一定的局限性，所谓的<mark>作用域</mark>，<strong>全局变量</strong>虽然没有局限性，但大量的全局变量会浪费许多内存.<br />\n 然而很多时候我们需要在作用域外来修改内存上的值 (例如，两数交换), 数据唯一不变的只有地址，所以想要实现<mark>数据共享</mark>，只能通过 传递地址 来实现了，指针 —— 一种特殊的变量，就应运而生了.(学过汇编后，会对指针的数据共享理解更加深刻)</p>\n<p>第二个作用，很大程度上体现在函数传参和字符串上，思考一个问题，如果我有 一个结构体，如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">RxBufferTypeDef</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> write<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>里面有 3 个整型变量，一个指针变量，一个 int 变量 4 字节，一个指针变量 8 字节，一个结构体 20 个字节大小，如果 一个函数调用时传递的是整个结构体，那么就相当于在内存中又开辟了 20 字节大小空间，用于实现对传入结构体的复制，而且不能对结构体的成员进行修改，如果传递结构体指针，大小恒为 8 字节，而且可以对结构体进行修改，整个程序中只占用 20 字节，在内存和运行速度上，比之直接传结构体更为方便.</p>\n<p>大多数情况下，可以看到程序使用的内存是通过显式声明分配给变量的内存 (也就是静态内存分配). 这一点对于节省计算机内存是有帮助的，因为计算机可以提前为需要的变量分配内存。但是在很多应用场合中，可能程序运行时不清楚到底需要多少内存，这时候可以使用指针，让程序在运行时获得新的内存空间 (实际上应该就是动态内存分配 <code>malloc</code> ,  <code>calloc</code> ), 并让指针指向这一内存更为方便.</p>\n<h3 id=\"指针的声明\"><a class=\"anchor\" href=\"#指针的声明\">#</a> 指针的声明</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p><strong>语法</strong>:  <code>数据类型 * 指针名称 = 初始地址;</code> <br />\n<strong> 示例</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i_variable <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> d_variable <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 i_variable</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i_variable<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 d_variable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d_variable<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指针的使用\"><a class=\"anchor\" href=\"#指针的使用\">#</a> 指针的使用</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>两个和指针息息相关的运算符:</p>\n<ul>\n<li><code>&amp;</code>  是 C 语言中的取地址符号，用于获取地址</li>\n<li><code>*</code>  是 C 语言中的解引用的符号，用于获取地址上的值</li>\n</ul>\n<p><strong>操作</strong>:</p>\n<ul>\n<li>修改指向的地址；<br />\n<strong> 语法</strong>:  <code>ptr_b = &amp;a;</code></li>\n<li>修改指向地址上的值；<br />\n<strong> 语法</strong>:  <code>*ptr_b = 100;</code></li>\n<li>所有指针都之和 处理位数以及 编译器相关，一般来说 是 8 字节或者 4 字节，比较特殊的 51 单片机是 12 位</li>\n</ul>\n<p><strong>示例 1</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i_variable1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i_variable2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> d_variable <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 i_variable1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i_variable1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 d_variable</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d_variable<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 打印指针大小</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof(ptr_a) = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof(ptr_b) = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ptr_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 打印 i_variable 指向的地址上的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_a = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i_variable2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变 ptr_a 的指向</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_a = %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i_variable1 = %d\\n\"</span><span class=\"token punctuation\">,</span> i_variable1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i_variable2 = %d\\n\"</span><span class=\"token punctuation\">,</span> i_variable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_a = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"空指针\"><a class=\"anchor\" href=\"#空指针\">#</a> 空指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<ul>\n<li><strong>定义</strong>：指针变量指向内存中编号为 0 的空间</li>\n<li><strong>用途</strong>：初始化指针变量，不知道指哪里，就先指向这里</li>\n<li><strong>注意</strong>：空指针指向的内存是不可以访问的</li>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 指针变量 p 指向内存地址编号为 0 的空间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 访问空指针报错 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 内存编号 0 ~255 为系统占用内存，不允许用户访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%x\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<ul>\n<li>\n<p><strong>定义</strong>：指针变量指向非法的内存空间<br />\n非法空间是指，指针指向系统和程序协商后可访问空间之外的地址<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1n32pcktj30yk0arq3j.jpg\" alt=\"alt 野指针\" /></p>\n</li>\n<li>\n<p><strong>示例</strong>:</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 指针变量 p 指向内存地址编号为 0x1100 的空间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 访问野指针报错 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一级指针\"><a class=\"anchor\" href=\"#一级指针\">#</a> 一级指针</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>简单来说就是只有 一个  <code>*</code>  运算符的指针变量，大多数的一维指针会用于指向结构体、数组、字符串...</p>\n<h3 id=\"指向变量的指针\"><a class=\"anchor\" href=\"#指向变量的指针\">#</a> 指向变量的指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>指向变量的语法，如上面指针的基本内容所述，只要存在数据类型，都可以定义指针<br />\n这说一个比较特殊的 指针 —— <code>void</code>  指针，众所周知， <code>void</code>  是一种空类型，那么，正常思路下指向  <code>void</code>  的指针，就是指向空的指针，简称除了 <code>NULL</code>  啥都不能指.<br />\n 其实不然，正所谓 万物皆虚，万事皆允 (<s>we are assassins!</s>), void 指针啥都能指，最简单的例子就是 内置 <code>qsort</code>  的回调函数 <code>cmp(const void *a, const void *b)</code> , 咱们总不可能开两个空数组吧 (滑稽)<br />\n 其实无论什么数据，在存储器上都是高低电平，只是读取的方式不同，才有了不同的数据类型， <code>void</code>  指针正是依靠了这个特性，通过强制类型转换来实现，任意传参.<br />\n 其实无论什么指针，都可以强制转化，用于传递地址，只是因为<mark>指针只存储地址，且数据的意义只与读取方式相关</mark>所以才可以进行相互转换<br />\n<strong> PS: 个人建议，如果要传入不知道什么类型的数据时可以考虑以 void * 作为参数，不到万不得已，不要使用其他指针来实现类型转换</strong></p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_Nodes</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyStruct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyStruct node1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is a test about void pointer\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 转化位 int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================int=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;a = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*v_ptr = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v_ptr = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 转化位 double</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    v_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================double=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d = %.2lf\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;d = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*v_ptr = %.2lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v_ptr = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 转化为 结构体</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================structer=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node.id = %d\\n\"</span><span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node.str = %s\\n\"</span><span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;d = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*v_ptr).id = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>MyStruct <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*v_ptr).str = %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>MyStruct <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v_ptr = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>示例 2</strong>:<br />\n 这一部分是标准库调用示例:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 获取数组长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 动态开辟数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 读入数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @brief 遍历数组</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param arr   数组首地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @param n     数组大小 </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"const指针\"><a class=\"anchor\" href=\"#const指针\">#</a> const 指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>这就是一个经典的问题了，** **, const 修饰不同 的地方，指针的效果就不一样，const 一共有三种修饰方式:</p>\n<ul>\n<li>第一种:  <code>const int* ptr = &amp;a;</code>         常量指针，可以改变指向方向</li>\n<li>第二种:  <code>int* const ptr = &amp;a;</code>         指针常量，可以改变地址上的值</li>\n<li>第三种:  <code>const int* const ptr = &amp;a;</code>   上面两种的结合体，可以称为指针常数</li>\n</ul>\n<p>顾名思义，<strong> 常量指针</strong>，指向常量的指针，指向的是常量，指针不是常量，可以改变指向的地址，但是不能改变指向的值<br />\n<strong>指针常量</strong>，指针自己是一个常量，指向的不一定是常量，所以可以改变所指向地址上的值，不能改变指向的地址<br />\n<strong>指针常数</strong>，这个就不多说了，啥都改不了，指向的是常数</p>\n<p><strong>示例</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 常量指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>cpa <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 指针常量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> pca <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 指针常数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> cpca <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pa = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*cpa = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*pca = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*cpca = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================修改cpa指向==================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cpa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，修改常量指针指向的地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//pca = &amp;b; // 错误，修改指针指常量向的地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;b = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpa = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> cpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pca = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cpa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=================修改pca指向的值===============\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// *cpa = 90;   // 错误，修改常量指针的指向的变量的值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">*</span>pca <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，修改指针常量指向的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*pa = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*cpa = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*pca = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//cpca = &amp;b;   // 错误，双 const 啥都不能改</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// *cpca = 90;  // 错误，双 const 啥都不能改</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指向函数的指针\"><a class=\"anchor\" href=\"#指向函数的指针\">#</a> 指向函数的指针</h3>\n<p>话外：为什么不能用二级指针直接指向二维数组</p>\n<ol>\n<li>什么是函数指针:<br />\n 和变量类似，如果在程序中定义了一个函数，那么在编译时系统就会为这个函数代码分配一段存储空间，这段存储空间的首地址称为这个函数的地址，在 debug 时，我们会在主栈中看到，被压入的函数的地址。而且函数名表示的就是这个地址。既然是地址我们就可以定义一个指针变量来存放，这个指针变量就叫作函数指针变量，简称函数指针.</li>\n<li>函数指针的声明:<br />\n 函数指针与其他指针声明方式不同，正如前面所说，指针只能指向一种数据类型，所以 函数指针的声明有些复杂，大致格式如下:<br />\n <code>返回数据类型 (* 指针名称)(参数列表);</code> <br />\n 例如:  <code>int (*funPtr)(int *, int *);</code> <br />\n 这个语句就定义了一个指向函数的指针变量  <code>funPtr</code> . 首先它是一个指针变量，所以要有一个  <code>*</code>  , 即 (*p); 其次前面的  <code>int</code>  表示这个指针变量可以指向返回值类型为 int 型的函数；后面括号中的两个  <code>int</code>  表示这个指针变量可以指向有两个参数且都是  <code>int</code>  型的函数。所以合起来这个语句的意思就是：定义了一个指针变量  <code>funPtr</code> , 该指针变量可以指向返回值类型为  <code>int</code>  型，且有两个整型参数的函数.  <code>funPtr</code>  的类型为  <code>int(*)(int, int)</code></li>\n<li>如何用函数指针调用函数<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 声明一个函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 定义一个函数指针 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pFunc <span class=\"token operator\">=</span> Func<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* 将 Func 函数的首地址赋给指针变量 p*/</span></pre></td></tr></table></figure>PS: 函数指针 没有  <code>++</code>  和  <code>--</code>  的操作</li>\n</ol>\n<ul>\n<li><strong>示例</strong><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个函数指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 把函数 Max 赋给指针变量 p, 使 p 指向 Max 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p <span class=\"token operator\">=</span> Max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter a and b:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 通过函数指针调用 Max 函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d\\nb = %d\\nmax = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * @brief 比较连个数大小</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * @param x 比较数 x</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @param y 比较数 y</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @retval int 最大值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 定义 Max 函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"二级指针\"><a class=\"anchor\" href=\"#二级指针\">#</a> 二级指针</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a><br />\n与 一级指针类似，需要两次  <code>*</code>  操作才能得到最顶层值 的 指针变量，最常见的就是 字符串数组。一级指针往往比较简单，维度一升高 后就开始变得复杂起来<br />\n三者之间的关系如图，手残，将就一下<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1n2xn673j30ws0i2zkd.jpg\" alt=\"alt\" /><br />\n 在内存中的图示<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1n304psmj30zf0g2q2v.jpg\" alt=\"alt\" /></p>\n<h3 id=\"指向指针的指针\"><a class=\"anchor\" href=\"#指向指针的指针\">#</a> 指向指针的指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>指针可以指向一份普通类型的数据，例如 int、double、char 等，也可以指向一份指针类型的数据，例如  <code>int *</code> 、 <code>double *</code> 、 <code>char *</code>  等，所以就有了指向指针的指针<br />\n上面图片的关系用 C 语言来描述就是</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ptr_a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>指针变量也是一种变量，也会占用存储空间，也可以使用 <code>&amp;</code>  获取它的地址.C 语言不限制指针的级数，每增加一级指针，在定义指针变量时就得增加一个星号 <code>*</code> .  <code>p1</code>  是一级指针，指向普通类型的数据，定义时有一个 <code>*</code> ;  <code>p2</code>  是二级指针，指向一级指针  <code>p1</code> , 定义时有两个 <code>*</code> .</p>\n<p>那么，为什么要有二级指针呢？<br />\n 先来看一下这段代码:<br />\n 有两个变量 <code>a</code> , <code>b</code> , 指针  <code>q</code> , <code>q</code>  指向 <code>a</code> , 我们想让 <code>q</code>  指向 <code>b</code> , 在函数里面实现.<br />\n 这里贴一下用于测试的主函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;a=0x%x, &amp;b=0x%x, &amp;q=0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    q <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*q=%d, q=0x%x, &amp;q=0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*q=%d, q=0x%x, &amp;q=0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>用 一级指针 实现:<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 让指针 p 指向 b;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>看起来 在逻辑上代码没有什么问题，但是众所周知，程序执行后  <code>*q</code>  不等于 100, 为什么呢？<br />\n 来简单看一下，测试输出的结果</p>\n<pre><code>&amp;a=0x403010, &amp;b=0x403014, &amp;q=0x407970\n*q=10, q=0x403010, &amp;q=0x407970\nfunc: &amp;p=0x61fe00, p=4206608  \nfunc: &amp;p=0x61fe00, p=4206612  \n*q=10, q=0x403010, &amp;q=0x407970\n</code></pre>\n<p>来分析一下输出:</p>\n<ul>\n<li>注释 1:  <code>a, b, q</code>  都有一个地址.</li>\n<li>注释 2:  <code>q</code>  指向  <code>a</code> ,  <code>q</code>  的值发生了变化，地址是固定的</li>\n<li>注释 3: 进入函数后的参数 <code>p</code>  的地址跟 <code>q</code>  不一样了。这是因为在函数调用时，为了保障原数据不变对其进行了拷贝，也就是说  <code>p</code>  和  <code>q</code>  不是同一个指针，但是 他们指向的地址是相同的，都指向 &amp;a (0x403010)</li>\n<li>注释 4:  <code>p</code>  指向  <code>b</code> , 这时候  <code>p</code>  的值发生了变化</li>\n<li>注释 5: 回到主函数后，函数栈释放， <code>p</code>  也就丢失了， <code>q</code>  也不会有任何变化.</li>\n</ul>\n<p>结论:<br />\n 编译器会对函数的每个参数制作临时副本，指针参数 <code>p</code>  的副本是  <code>q</code> , 编译器使  <code>p = q</code>  (但是  <code>&amp;p != &amp;q</code>  , 也就是他们并不在同一块内存地址，只是他们的内容一样，都是 a 的地址). 如果函数体内的程序修改了 p 的内容 (比如在这里它指向 b). 在本例中，p 申请了新的内存，只是把 p 所指的内存地址改变了 (变成了 b 的地址，但是 q 指向的内存地址没有影响), 所以在这里并不影响函数外的指针 q.</p>\n<p>其实，这就是 所谓的 <strong>传值调用</strong> 和 <strong>传地址调用</strong>，这两个概念就是一个抽象概念，value 和 address 是相对的，对于指针变量来说，传值 也是地址，传地址也是地址，只不过前者是传递指向的地址，后者是传递本身的地址.</p>\n<p>例如 swap 函数，如果参数为  <code>(int a, int b)</code> , 那就是传值调用，因为我们想要交换  <code>a</code>  和  <code>b</code>  的值，如果仅仅传入值，那么调用函数产生的副本，也仅仅是 数值与  <code>a b</code>  相同的两个全新变量而已。我们想要交换两个变量，就必须要传入地址，在地址上直接对值进行操作.</p>\n<p>上例中， <code>p</code>  对应的是  <code>a b</code>  变量，我们只传进想要改变的值，而非传入值所在的地址，所以  <code>q</code>  并没产生变化。这时候我们就需要传入，指针  <code>*q</code>  的地址了，对应的函数参数类型，就变量了指向指针的指针，也就是二级指针.</p>\n<ul>\n<li>\n<p>二级指针操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>改动的地方很少.</p>\n<p>因为传了指针  <code>q</code>  的地址 (二级指针 <code>**p</code> ) 到函数，所以<strong>二级指针拷贝</strong> (拷贝的是  <code>p</code> , 一级指针中拷贝的是  <code>q</code> , 就是指向的地址),(<mark>拷贝了指针但是指针内容也就是指针所指向的地址是不变的</mark>) 所以它还是指向一级指针 <code>q</code>  ( <code>*p = q</code> ). 在这里无论拷贝多少次，它依然指向 <code>q</code> , 那么 <code>*p = &amp;b;</code>  自然的就是  <code>q = &amp;b;</code>  了.</p>\n</li>\n<li>\n<p><strong>PS</strong>:<br />\n 到这里其实我，想说的是其实 一级指针也可以实现二级指针的效果，但是并不推荐，咱们永远不知道这种方法的通用性，<br />\n 我们可以 一级指针的调用的时候传入  <code>q</code>  的地址，然后把赋值语句改为  <code>*p = &amp;b;</code>  也可以得到相应的效果，因为指针都是 8 字节，里面进行了一次 (隐式) 强制类型转换。由于指针指向的类型比较简单，没有导致数据异常，所以 GUN 仅仅是抛出了 warming.</p>\n</li>\n</ul>\n<h3 id=\"指针与数组\"><a class=\"anchor\" href=\"#指针与数组\">#</a> 指针与数组</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a><br />\n这里 大概会涉及到几个内容:</p>\n<ul>\n<li>指针 与 数组首地址</li>\n<li>指针数组 和 指向数组的指针</li>\n</ul>\n<p>先声明一下:</p>\n<ul>\n<li>指针：是用于存储 地址的变量</li>\n<li>数组：是一串相同类型变量的</li>\n<li>地址：是一种数据，与指针不同的地方在于，没有数据类型 (某种意义上像是指针常量)</li>\n</ul>\n<p>先来说一下第一个：指针 与 数组首地址</p>\n<blockquote>\n<p>在我初学指针的时候一直有一个疑惑就是  <code>int arr[4];</code>  和  <code>int *ptr;</code>  的区别，因为老师经常说，数组的首地址等价于指针，而且 访问数组的时候使用  <code>arr[1]</code>  和  <code>*(arr+1)</code>  的效果是一样的，我一度就把 一级指针 等价为 一维数组.<br />\n 直到有一次，有个小姐姐问我，为什么  <code>sizeof(ptr)</code>  算不出数组大小 而  <code>sizeof(arr)</code>  可以。我当时的回答是，因为  <code>arr</code>  是 一个数组  <code>ptr</code>  是一个指针变量。说完我就察觉到不对了，如果  <code>arr</code>  完全等价于  <code>ptr</code>  那么为什么  <code>sizeof(ptr)</code>  不等于  <code>sizeof(arr)</code> ,  <code>arr = ptr</code>  会报错。果然啊，教学相长 (<s>有点丢脸，错失良机啊</s>)<br />\n 其实 <mark>数组的首地址、变量的取地址 这些得到的都是指针常量</mark> (上面说过，<a href=\"#const%E6%8C%87%E9%92%88\"> 传送门</a>), 只能充当右值，不能作为左值.<br />\n <code>ptr</code>  仅仅是一个指针变量，用于存储地址的变量。对于二维数组，也是如此， <code>int arr[2][3] = &#123;0&#125;;</code>  ,  <code>arr</code>  整个二维数组的首地址， <code>arr[i]</code>  为 每一行一维数组的首地址.<br />\n<strong> 示例</strong>:</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d \\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着咱们 来讨论一下：指针数组和指向数组的指针</p>\n<blockquote>\n<p>这个问题 经常出现在，声明指向二维数组指针上，经常会有 问题是  <code>int *arr[5]</code>  和  <code>int(*arr)[5]</code>  哪个是指向数组的指针之流.<br />\n 在说这个问题之前，先来说明一下两个概念:</p>\n</blockquote>\n<ul>\n<li>行指针：指的是一整行，不指向具体元素<br />\n声明格式:  <code>数据类型 (*指针名)[长度];</code></li>\n<li>列指针：指的是一行中某个具体元素 (一维指针)<br />\n 声明格式:  <code>数据类型 *指针名称</code> ；<br />\n<strong> 示例</strong></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明列指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 声明行指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d, ptr2_val = %d\\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>PS: 可以将列指针理解为行指针的具体元素，行指针理解为列指针的地址</strong></p>\n<p>言归正传，假设 我们需要声明一个指向  <code>int arr[5][9];</code>  和 一个大小为 4 指向整型指针的数组.</p>\n<p>先来解决第一个:</p>\n<blockquote>\n<p>假设 指针名为 ptr</p>\n<ol>\n<li><code>ptr</code>  先是一个指针，所以第一步是 <code>*ptr</code> ,</li>\n<li><code>*ptr</code>  指向的是数组，由于  <code>[]</code>  运算优先级比  <code>*</code>  高，所以 需要加上  <code>()</code> , 即  <code>(*arr)[9]</code></li>\n<li><code>(*arr)[9]</code>  指向的类型为  <code>int</code> , 得出最终结果 <strong> <code>int (*arr)[9] = &amp;arr;</code> </strong></li>\n</ol>\n</blockquote>\n<p>然后是指针数组</p>\n<blockquote>\n<p>设 ptrs 为数组名:</p>\n<ol>\n<li><code>ptrs</code>  先是一个数组，得到  <code>ptrs[4]</code></li>\n<li><code>ptrs[4]</code>  的成员是指针，得到  <code>*ptrs[4]</code></li>\n<li><code>*ptrs[4]</code>  成员指向的数据类型为  <code>int</code> , 得到  <code>int ptrs[4];</code></li>\n</ol>\n</blockquote>\n<p><strong>小结：指向数组的指针格式一般以  <code>(*指针名)</code>  打头，而指针数组一般以  <code>*数组名</code>  打头</strong></p>\n<p>正如上面所说，一般情况下指向数组的指针格式以  <code>(*指针名)</code>  打头，咱们这行只要是一般，就必然有例外.<br />\n 由于 <strong>数组是在一块连续的内存上定义的</strong> 所以 只要找到 第一个元素所在的地址，即数组起始地址，就等级于找到整个数组.<br />\n 所以就有了  <code>p = &amp;arr[0]</code> 、 <code>p = &amp;arr[0][0]</code> 、 <code>*p = &amp;arr[0][0][0];</code>  的奇观.<br />\n 这也就是上面所说的 列指针。突然就感觉 上面的行指针不香了 (滑稽)</p>\n<p><strong>示例</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d, ptr2_val = %d\\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d, ptr2_val = %d\\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ptr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"话外-为什么不能用二级指针直接指向二维数组\"><a class=\"anchor\" href=\"#话外-为什么不能用二级指针直接指向二维数组\">#</a> 话外：为什么不能用二级指针直接指向二维数组</h4>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>举个例子:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译出错，不能用二级指针直接指向二维数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptrRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对，ptrRow 是指向一维数组的指针，可以指向二维数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptrCol <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以，ptrCol 也是一维指针，可以指向二维数组</span></pre></td></tr></table></figure><p>理论上一维数组对应一维指针，例如 <code>int arr[3]; int *ptr = arr</code> ;<br />\n 那么二维数组应该也对应于二级指针才对啊.<br />\n 对于这个问题，咱们先来看一下二级指针的定义:<br />\n<strong> 二级指针指向一级指针，一级指针是取一次地址，二级指针是取两次地址</strong>.<br />\n 就此可以推及到 更高的维度: <strong>n 级指针是指向 n-1 级指针的指针，n 级指针是取 n 次地址</strong></p>\n<p>现在我们来分析一下<br />\n <code>int **pptr = arr;</code>  为什么会出错<br />\n首先  <code>**pptr = arr</code>  是等价于  <code>**pptr = &amp;arr[0][0];</code> <br />\n 那么  <code>*ptr</code>  得到的结果为  <code>1</code> , 如果 再对其进行  <code>*</code>  操作，就会访问到 内存地址 1 上的值，显然这是不允许的<br />\n<strong> PS:</strong> 二级指针是指向一级指针的，那么二级指针  <code>pptr</code>  每次移动的大小就是  <code>sizeof(int *)</code>  也就是 8 个字节，所以  <code>pptr+1</code>  不是像二维数组  <code>arr+1</code>  那样移动到下一行首地址，而是移动 8 个字节.</p>\n<p><code>int **pp=a;</code>  不行。那  <code>int **pp=&amp;a;</code>  呢？<br />\n 很遗憾也不行，原因也是数据类型不一致，导致地址偏移非法.</p>\n<p><strong>凡事总有那么个例外:</strong><br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strptrs <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本质原因是因为这是一个指针数组，而非 真正的二维数组，每一行的首地址 本身即为指针，符合了两次取地址的要求。而且指针偏移量也为 8 字节， <code>strptrs++</code>  偏移正常，所以  <code>strptrs</code>  才能指向  <code>str</code></p>\n<p>其实这个问题的核心在于 <strong>数据类型的不匹配</strong> 导致的地址自加异常.<br />\n<strong> 示例</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G++\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strptrs <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> strptrs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//printf (\"% d\\n\", pptr [0][1]);// 异常，不会打印数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上都是，个人浅薄的见解，如有不当，欢迎各位大佬们指出</p>\n",
            "tags": [
                "C",
                "指针",
                "指针,学习笔记"
            ]
        },
        {
            "id": "https://to-ywz.github.io/CS/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/",
            "url": "https://to-ywz.github.io/CS/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/",
            "title": "C语言函数重载",
            "date_published": "2021-02-28T06:52:35.000Z",
            "content_html": "<h1 id=\"c语言重载\"><a class=\"anchor\" href=\"#c语言重载\">#</a> C 语言重载</h1>\n<hr />\n<p>很多时候我在思考 C 语言 和 CPP 一样允许函数重载，调用函数会方便很多.<br />\n 我去翻了很多 源码 和 文档，算是找到了一些 类似的方法.<br />\n 由于 C 语言 的底层 实现与 CPP 不同，所以不可能实现百分百的重载.<br />\nC 语言的 POSIX 标准 的  <code>open()</code>  函数就实现了重载，大概率是这样的实现的 —— 依赖函数参数</p>\n<h2 id=\"方法一\"><a class=\"anchor\" href=\"#方法一\">#</a> 方法一:</h2>\n<pre><code>运用函数指针,指向函数实体, 而 函数名 由宏定义实现,例子如下\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CC</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_double</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CC<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>CC<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">c_func</span><span class=\"token punctuation\">(</span>ptr fun_ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>param<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">fun_ptr</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用对应函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">23.23</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    CC CA <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">c_func</span><span class=\"token punctuation\">(</span>func_int<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 整数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">c_func</span><span class=\"token punctuation\">(</span>func_double<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 浮点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">c_func</span><span class=\"token punctuation\">(</span>func_struct<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 结构体</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优点是 实现起来很简单，不需要外加头文件<br />\n这个方法的问题很明显，我们仍然需要记住相关函数的名称，而且函数的参数个数也受到相应的限制</p>\n<h2 id=\"方法二\"><a class=\"anchor\" href=\"#方法二\">#</a> 方法二:</h2>\n<pre><code>使用可变参数类型 `va_list` 来获取 从(...) 输入的所有参数,  通过第二个参数来决定使用哪一个函数\n</code></pre>\n<p>例子如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">va_overload2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"va_overload2 %d %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">va_overload3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"va_overload3 %d %d %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">va_overload4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"va_overload4 %d %d %d %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">va_overload</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        va_list v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> p3 <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">va_overload3</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        va_list v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> p3 <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> p4 <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">va_overload4</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">va_overload2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"方法三\"><a class=\"anchor\" href=\"#方法三\">#</a> 方法三</h2>\n<pre><code>前面三种,说是重载其实更像是一般的条件语句. 下面这种就略微像 CPP 的函数重载\n模拟了 CPP 重载函数 底层编译过程, 对函数进行重命名\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 粘合宏，用于 函数粘合函数名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">CAT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span> <span class=\"token function\">CAT2</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">CAT2</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span> A</span><span class=\"token punctuation\">##</span><span class=\"token expression\">B</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">c_overload</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>                     </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">CAT</span><span class=\"token punctuation\">(</span>overload<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT_PARMS</span><span class=\"token punctuation\">(</span>__VA_ARGS__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">(</span>__VA_ARGS__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">COUNT_PARMS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">COUNT_PARMS2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">##</span><span class=\"token expression\">__VA_ARGS__<span class=\"token punctuation\">,</span> <span class=\"token function\">PARMS_N_RESQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">COUNT_PARMS2</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">COUNT_PARM3</span><span class=\"token punctuation\">(</span>__VA_ARGS__<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 最大 参数列表，可调 目前为 (0 ~ 63)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">COUNT_PARM3</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>                                  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token expression\">_0<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">,</span> _2<span class=\"token punctuation\">,</span> _3<span class=\"token punctuation\">,</span> _4<span class=\"token punctuation\">,</span> _5<span class=\"token punctuation\">,</span> _6<span class=\"token punctuation\">,</span> _7<span class=\"token punctuation\">,</span> _8<span class=\"token punctuation\">,</span> _9<span class=\"token punctuation\">,</span> _10<span class=\"token punctuation\">,</span>      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token expression\">_11<span class=\"token punctuation\">,</span> _12<span class=\"token punctuation\">,</span> _13<span class=\"token punctuation\">,</span> _14<span class=\"token punctuation\">,</span> _15<span class=\"token punctuation\">,</span> _16<span class=\"token punctuation\">,</span> _17<span class=\"token punctuation\">,</span> _18<span class=\"token punctuation\">,</span> _19<span class=\"token punctuation\">,</span> _20<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token expression\">_21<span class=\"token punctuation\">,</span> _22<span class=\"token punctuation\">,</span> _23<span class=\"token punctuation\">,</span> _24<span class=\"token punctuation\">,</span> _25<span class=\"token punctuation\">,</span> _26<span class=\"token punctuation\">,</span> _27<span class=\"token punctuation\">,</span> _28<span class=\"token punctuation\">,</span> _29<span class=\"token punctuation\">,</span> _30<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token expression\">_31<span class=\"token punctuation\">,</span> _32<span class=\"token punctuation\">,</span> _33<span class=\"token punctuation\">,</span> _34<span class=\"token punctuation\">,</span> _35<span class=\"token punctuation\">,</span> _36<span class=\"token punctuation\">,</span> _37<span class=\"token punctuation\">,</span> _38<span class=\"token punctuation\">,</span> _39<span class=\"token punctuation\">,</span> _40<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token expression\">_41<span class=\"token punctuation\">,</span> _42<span class=\"token punctuation\">,</span> _43<span class=\"token punctuation\">,</span> _44<span class=\"token punctuation\">,</span> _45<span class=\"token punctuation\">,</span> _46<span class=\"token punctuation\">,</span> _47<span class=\"token punctuation\">,</span> _48<span class=\"token punctuation\">,</span> _49<span class=\"token punctuation\">,</span> _50<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token expression\">_51<span class=\"token punctuation\">,</span> _52<span class=\"token punctuation\">,</span> _53<span class=\"token punctuation\">,</span> _54<span class=\"token punctuation\">,</span> _55<span class=\"token punctuation\">,</span> _56<span class=\"token punctuation\">,</span> _57<span class=\"token punctuation\">,</span> _58<span class=\"token punctuation\">,</span> _59<span class=\"token punctuation\">,</span> _60<span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token expression\">_61<span class=\"token punctuation\">,</span> _62<span class=\"token punctuation\">,</span> _63<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> N</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">PARMS_N_RESQ</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                          </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token expression\"><span class=\"token number\">63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>                             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token expression\"><span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token expression\"><span class=\"token number\">49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token expression\"><span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token expression\"><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token expression\"><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token expression\"><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">overload1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPP One param: %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">overload2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPP Two params: %p (%f) %s\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">overload3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CPP Three params: %d %d %d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方法三 通过 COUNT_PARMS 来 数出参数个数，然后使用 ## 来 将 overload 和 得到的参数个数粘合.<br />\n 得到函数名  <code>overloadx</code> , 从而实现 &quot;重载&quot;</p>\n",
            "tags": [
                "C",
                "胡思乱想",
                "C"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "三千羊毛",
    "subtitle": "以己为剑 斩尽诸险",
    "icon": "https://to-ywz.github.io/images/favicon.ico",
    "description": "笔记&分享",
    "home_page_url": "https://to-ywz.github.io",
    "items": [
        {
            "id": "https://to-ywz.github.io/life-tips/prevent-disease/%E9%A2%84%E9%98%B2%E7%9A%AE%E8%82%A4%E5%B9%B2%E7%87%A5/",
            "url": "https://to-ywz.github.io/life-tips/prevent-disease/%E9%A2%84%E9%98%B2%E7%9A%AE%E8%82%A4%E5%B9%B2%E7%87%A5/",
            "title": "预防皮肤干燥",
            "date_published": "2021-12-18T00:09:03.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h1>\n<ol>\n<li>年龄大了</li>\n<li>天气寒冷</li>\n<li>偏食和减肥</li>\n<li>经常使用洗衣粉、肥皂、洗洁精等洗涤剂及酒精等有机溶剂，以及长时间所处空调环境下等</li>\n<li>血虚、阴虚的人皮肤更容易干燥</li>\n<li>睡眠不足会使身体受到相当程度的伤害，血液循环也会变差</li>\n</ol>\n<h1 id=\"危害\"><a class=\"anchor\" href=\"#危害\">#</a> 危害</h1>\n<p>长皱纹、暗黄、脱皮、起色斑，还易引发湿疹、特应性皮炎，<br />\n 严重的时候肌肤甚至会像鱼鳞一样轻轻一抓就掉下很多白色皮屑</p>\n<h1 id=\"预防方案\"><a class=\"anchor\" href=\"#预防方案\">#</a> 预防方案</h1>\n<h2 id=\"饮食方面\"><a class=\"anchor\" href=\"#饮食方面\">#</a> 饮食方面</h2>\n<p>多吃白色食物白萝卜、白菜、冬瓜、百合、银耳、莲藕、莲子这一类的都算，长得白的基本就是了，不知道白黄瓜算不算 (狗头)<br />\n 除了这个法子还可以走药膳的路子:</p>\n<h3 id=\"马蹄甘蔗胡萝卜饮\"><a class=\"anchor\" href=\"#马蹄甘蔗胡萝卜饮\">#</a> 马蹄甘蔗胡萝卜饮</h3>\n<p>食材:</p>\n<ul>\n<li>马蹄 100 克</li>\n<li>去皮甘蔗 250 克</li>\n<li>胡萝卜 1 根</li>\n<li>红枣 5 颗</li>\n<li>清水 1500 毫升</li>\n</ul>\n<p>制作:</p>\n<ul>\n<li>马蹄去皮洗净</li>\n<li>甘蔗切成 10 厘米的长段后切成条</li>\n<li>红萝卜去皮切块</li>\n<li>红枣去核<br />\n全部食材入锅，加水、冰糖，大火烧开转小火慢炖 1 小时即可</li>\n</ul>\n<h3 id=\"雪梨猪肺汤这个我觉得不太好喝\"><a class=\"anchor\" href=\"#雪梨猪肺汤这个我觉得不太好喝\">#</a> 雪梨猪肺汤 (这个我觉得不太好喝)</h3>\n<p>食材:</p>\n<ul>\n<li>猪肺 500 克</li>\n<li>雪梨 250 克</li>\n<li>川贝母 20 克</li>\n<li>食盐适量</li>\n</ul>\n<p>制作:</p>\n<ul>\n<li>雪梨洗净、连皮切成块状、去核</li>\n<li>川贝母洗净</li>\n<li>猪肺洗净、切成块状、沸水<br />\n将适量清水放入煲内，煮沸后加入以上材料、猛火煲滚后改用慢火煲至食材熟烂、加盐调味即可</li>\n</ul>\n<h3 id=\"百合小米粥\"><a class=\"anchor\" href=\"#百合小米粥\">#</a> 百合小米粥</h3>\n<p>食材:</p>\n<ul>\n<li>小米</li>\n<li>干百合</li>\n<li>干银耳</li>\n<li>红枣</li>\n<li>花生</li>\n<li>冰糖适量</li>\n</ul>\n<p>制作:</p>\n<ul>\n<li>洗净食材</li>\n<li>往锅内注入清水大火煮沸，放入小米、银耳和花生，</li>\n<li>期间要注意搅拌以防糊底，等到材料加入完全煮沸后改为中火.</li>\n<li>在小米开始出花的时候将红枣、百合和冰糖放入小米粥中，将火力改为大火煮沸后即可出锅</li>\n</ul>\n<h2 id=\"茶\"><a class=\"anchor\" href=\"#茶\">#</a> 茶</h2>\n<p>中华文化博大精深，衣食住行都是如此。养生当然少不了茶</p>\n<h3 id=\"玫瑰美颜茶\"><a class=\"anchor\" href=\"#玫瑰美颜茶\">#</a> 玫瑰美颜茶</h3>\n<p>做法:</p>\n<ul>\n<li>干品玫瑰花 1g,</li>\n<li>麦冬、玉竹、首乌各 1.5g</li>\n<li>200 毫升的开水冲泡十分钟</li>\n</ul>\n<h3 id=\"雪梨茶\"><a class=\"anchor\" href=\"#雪梨茶\">#</a> 雪梨茶</h3>\n<p>做法：雪梨切碎，冰糖煮梨水泡茶饮用<br />\n这个其实也可以止咳，个人咳嗽比较厉害，所以小时候有喝过这个<br />\n体质较寒的人可用乌龙茶 (这个不止咳)</p>\n<h3 id=\"补气生津茶这个还是挺好的\"><a class=\"anchor\" href=\"#补气生津茶这个还是挺好的\">#</a> 补气生津茶 (这个还是挺好的)</h3>\n<ul>\n<li>红枣 3 个</li>\n<li>西洋参 3 片</li>\n<li>麦冬 2g</li>\n<li>五味子 0.3g</li>\n<li>用 200 毫升的开水冲泡十分钟</li>\n</ul>\n<h2 id=\"日常防护\"><a class=\"anchor\" href=\"#日常防护\">#</a> 日常防护</h2>\n<ol>\n<li>养成良好的作息习惯，多喝水</li>\n<li>用温水洗澡，因为热水会将皮肤上的天然油分彻底洗掉</li>\n<li>冬季洗澡一般不要超过 15 分钟</li>\n<li>使用温和的沐浴液或香皂浴后涂上润肤品、身体乳、护手霜等</li>\n<li>在那些易发生干裂的身体部位，涂润肤乳</li>\n<li>可使用加湿器，增加空气湿度</li>\n</ol>\n<p>本文大部分来自于网上中医，有一部分是自己从小喝到大的方子</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "日常贴士",
                "疾病预防",
                "疾病预防"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32%E8%A3%B8%E6%9C%BA%E7%A7%BB%E6%A4%8DSFUD/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32%E8%A3%B8%E6%9C%BA%E7%A7%BB%E6%A4%8DSFUD/",
            "title": "STM32裸机移植SFUD",
            "date_published": "2021-12-12T14:18:49.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<p><strong>写在前面:</strong> 平台: STM32F407VGT6 + W25Q64FV 8MFLASH</p>\n<h1 id=\"为什么要移植sfud\"><a class=\"anchor\" href=\"#为什么要移植sfud\">#</a> 为什么要移植 SFUD</h1>\n<p>记得当初学标准库读写 FLASH 的时候，页写入代码可长可长了，而且不同的 flash 一套检测的宏不一样，改来改去特别麻烦.<br />\n 而 SFUD 驱动只需要 FLASH 支持 SFDP 协议即可移植 SFUD 后只需实现初始化和写操作就可以愉快的使用 FLASH. 膜拜 armlink 大佬.<br />\n 是 JEDEC (固态技术协会) 制定的串行 Flash 功能的参数表标准，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamVkZWMub3JnL3N0YW5kYXJkcy1kb2N1bWVudHMvZG9jcy9qZXNkMjE2Yg==\"> 最新标准</span>，目前新生产的 flash 都是支持的只有特别老旧的芯片才不支持.<br />\n 而且 SFUD 对于不支持 SFDP 的 FLASH, 可以手动在 <code>/sfud/inc/sfud_flash_def.h</code>  文件中的参数表里添加芯片参数.<br />\n 简直就是人间神奇</p>\n<h1 id=\"源码获取\"><a class=\"anchor\" href=\"#源码获取\">#</a> 源码获取</h1>\n<p>建议直接从 github 或 gitee 上拉取，能保证代码是最新的 (3 年就写了这个库，到现在都还在更新，人与人之间的差距啊...).<br />\n 如果不想用 git 拉去的话，可以直接点击下面的阿里云链接进行下载。百度网盘这里就先不放了 (<s>嫌弃</s>)<br />\nGithub<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FybWluay9TRlVE\"> 传送门</span><br />\n Gitee<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vQXJtaW5rL1NGVUQ=\"> 传送门</span><br />\n阿里云盘<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvRGQyTlBmWE1SR3o=\">传送门</span></p>\n<h1 id=\"文件结构\"><a class=\"anchor\" href=\"#文件结构\">#</a> 文件结构</h1>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211216074525.png\" alt=\"根目录\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211216074949.png\" alt=\"demo\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211216074707.png\" alt=\"sfud\" /></p>\n<h1 id=\"移植\"><a class=\"anchor\" href=\"#移植\">#</a> 移植</h1>\n<p>主要是实现 <code>/sfud/port/sfud_port.c</code>  文件，其实我们只需要实现  <code>sfud_spi_port_init</code> ,  <code>spi_write_read</code> , 即可至于更多的需求，可以视 init 函数里的注释自行扩充<br />\n由于 sfud 有 debug 机制，所以需要各位自行实现 printf 的重载.</p>\n<h2 id=\"sfud_spi_port_init\"><a class=\"anchor\" href=\"#sfud_spi_port_init\">#</a> sfud_spi_port_init</h2>\n<p>其实要实现那些函数在注释中已经写的明明白白了.<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211216080503.png\" alt=\"init函数实现\" /></p>\n<h3 id=\"抽个结构体出来\"><a class=\"anchor\" href=\"#抽个结构体出来\">#</a> 抽个结构体出来</h3>\n<p>为了方便处理这边用了一个结构体，用于保存用户的 SPI 信息。懒惰，我连个 Led 都想 抽象成结构体</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SPI_TypeDef <span class=\"token operator\">*</span>spix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    GPIO_TypeDef <span class=\"token operator\">*</span>cs_gpiox<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> cs_gpio_pin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> spi_user_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token class-name\">spi_user_data_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> spi_user_data spi1 <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>spix <span class=\"token operator\">=</span> SPI1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">.</span>cs_gpiox <span class=\"token operator\">=</span> GPIOB<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token punctuation\">.</span>cs_gpio_pin <span class=\"token operator\">=</span> GPIO_Pin_0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"初始化函数\"><a class=\"anchor\" href=\"#初始化函数\">#</a> 初始化函数</h3>\n<p>这里可以抽一层函数出来，写一个某个型号的 FLASH 初始化函数，然后放在 case 中调用<br />\n怎么感觉我总喜欢疯狂套娃</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_spi_port_init</span><span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flash<span class=\"token operator\">-></span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> SFUD_W25Q64FV_DEVICE_INDEX<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/* RCC 初始化 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">rcc_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/* GPIO 初始化 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">gpio_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/* SPI 外设初始化 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">spi_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/* 同步 Flash 移植所需的接口及数据 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>wr <span class=\"token operator\">=</span> spi_write_read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span> spi_lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>unlock <span class=\"token operator\">=</span> spi_unlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>user_data <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* about 100 microsecond delay */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        flash<span class=\"token operator\">-></span>retry<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">=</span> retry_delay_100us<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/* adout 60 seconds timeout */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        flash<span class=\"token operator\">-></span>retry<span class=\"token punctuation\">.</span>times <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"硬件配置\"><a class=\"anchor\" href=\"#硬件配置\">#</a> 硬件配置</h3>\n<p>这里我用的 SPI1 软件片选，引脚走的 GPIOB3, GPIOB4, GPIOB5, GPIO0 (CS)<br />\n QSPI 在 407 上没有，所以我先不写了，等我有钱搞新板子了在考虑如何实现 (其实用 HAL 库才是趋势...).</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief       SPI 时钟使能</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rcc_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix <span class=\"token operator\">==</span> SPI1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        RCC<span class=\"token operator\">-></span>APB2ENR <span class=\"token operator\">|=</span> RCC_APB2ENR_SPI1EN<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// SPI  Clock Enable</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        RCC<span class=\"token operator\">-></span>AHB1ENR <span class=\"token operator\">|=</span> RCC_AHB1ENR_GPIOBEN<span class=\"token punctuation\">;</span> <span class=\"token comment\">// GPIO Clock Enable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @brief       配置 SPI 的 GPIO</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">gpio_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix <span class=\"token operator\">==</span> SPI1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/* SCK:PB3  MISO:PB4  MOSI:PA5 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_5 <span class=\"token operator\">|</span> GPIO_Pin_4 <span class=\"token operator\">|</span> GPIO_Pin_3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_AF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_OType <span class=\"token operator\">=</span> GPIO_OType_PP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource3<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource4<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource5<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/* CS: PB0 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_OUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">GPIO_SetBits</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_Pin_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * @brief       配置 SPI 工作模式</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    SPI_InitTypeDef SPI_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_Direction <span class=\"token operator\">=</span> SPI_Direction_2Lines_FullDuplex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SPI 设置为双线双向全双工</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_Mode <span class=\"token operator\">=</span> SPI_Mode_Master<span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 设置为主 SPI</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_DataSize <span class=\"token operator\">=</span> SPI_DataSize_8b<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// SPI 发送接收 8 位帧结构</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CPOL <span class=\"token operator\">=</span> SPI_CPOL_Low<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 时钟悬空低</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CPHA <span class=\"token operator\">=</span> SPI_CPHA_1Edge<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 数据捕获于第一个时钟沿</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_NSS <span class=\"token operator\">=</span> SPI_NSS_Soft<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 内部  NSS 信号由 SSI 位控制</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_BaudRatePrescaler <span class=\"token operator\">=</span> SPI_BaudRatePrescaler_2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 波特率预分频值为 2</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_FirstBit <span class=\"token operator\">=</span> SPI_FirstBit_MSB<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 数据传输从 MSB 位开始</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CRCPolynomial <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// CRC 值计算的多项式，不使能 CRC 有效位配置啥都无所谓</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">SPI_I2S_DeInit</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">SPI_Init</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>SPI_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">SPI_CalculateCRC</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> DISABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">SPI_Cmd</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我觉得，这份代码  <code>rcc_configuration</code>  和  <code>gpio_configuration</code>  可以再抽一层出来，在里面放置一个  <code>switch case</code>  调用 SPIx (x 由片上 SPI 数量决定) 的初始化.<br />\n 但是现在在做项目，也只可能有一个 FLASH, 只能先这样子了。等项目结束我再更新一下.</p>\n<h2 id=\"spi-锁\"><a class=\"anchor\" href=\"#spi-锁\">#</a> SPI 锁</h2>\n<p>这一个可以实现也可以不实现，主要看自己的需求，如果的写的数据很大我建议还是实现一下.<br />\n 其实就是关中断这种暴力的方法而已...</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">__disable_irq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_unlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">__enable_irq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"延时\"><a class=\"anchor\" href=\"#延时\">#</a> 延时</h2>\n<p>这个是注释里要求一定需要实现的，我这里走的是  <code>systick</code>  实现的 ys 级延时。反正 100us 左右即可，可以自行实现 (大不了 count--, 狗头).</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retry_delay_100us</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// uint32_t delay = 120;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// while (delay--)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     ;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">delayus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"spi_write_read\"><a class=\"anchor\" href=\"#spi_write_read\">#</a> spi_write_read</h2>\n<p>函数接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> sfud_err <span class=\"token function\">spi_write_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// sfud</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token class-name\">size_t</span> write_size<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>read_buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                <span class=\"token class-name\">size_t</span> read_size<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好多参数..., 其实实现起来和我们直接写自己实现 连续写 spi 没什么区别.<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211216084441.png\" alt=\"上面代码里的强转转的是这个结构体里的void 类型\" /><br />\n唯一要注意的只有这个地方，获取 sfud 的指向的 spi 设备，如上所示.<br />\n 其他的无非就，先写入有效数据，然后再写入无效数据作为数据读取。一共写入 read_size+write_size 字节的数据</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief               SPI 写入后读出数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param spi           SPI 结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param write_buf     要写入的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param write_size    写入数据大小</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param read_buf      要读出的数据的缓存</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @param read_size     要读出的数据大小</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return sfud_err     执行结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> sfud_err <span class=\"token function\">spi_write_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> write_size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>read_buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                               <span class=\"token class-name\">size_t</span> read_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> send_data<span class=\"token punctuation\">,</span> read_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">spi_user_data_t</span> spi_dev <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span><span class=\"token punctuation\">)</span>spi<span class=\"token operator\">-></span>user_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">SFUD_ASSERT</span><span class=\"token punctuation\">(</span>write_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">SFUD_ASSERT</span><span class=\"token punctuation\">(</span>read_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">GPIO_ResetBits</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>cs_gpiox<span class=\"token punctuation\">,</span> spi_dev<span class=\"token operator\">-></span>cs_gpio_pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/* 开始读写数据 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> write_size <span class=\"token operator\">+</span> read_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/* 先写缓冲区中的数据到 SPI 总线，数据写完后，再写 dummy (0xFF) 到 SPI 总线 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            send_data <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>write_buf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            send_data <span class=\"token operator\">=</span> SFUD_DUMMY_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/* 发送数据 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        retry_times <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SPI_I2S_GetFlagStatus</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> SPI_I2S_FLAG_TXE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">SFUD_RETRY_PROCESS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">goto</span> exit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">SPI_I2S_SendData</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> send_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        retry_times <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SPI_I2S_GetFlagStatus</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> SPI_I2S_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">SFUD_RETRY_PROCESS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">goto</span> exit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        read_data <span class=\"token operator\">=</span> <span class=\"token function\">SPI_I2S_ReceiveData</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">/* 写缓冲区中的数据发完后，再读取 SPI 总线中的数据到读缓冲区 */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token operator\">*</span>read_buf<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> read_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>exit<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">GPIO_SetBits</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>cs_gpiox<span class=\"token punctuation\">,</span> spi_dev<span class=\"token operator\">-></span>cs_gpio_pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>除了这些之外，还需要自行配置一下  <code>/sfud/inc/sfud_cfg.h</code>  文件<br />\n选择是否使用 SFDP 协议，是否使用 FLASH 信息表，和定义自己所用的 FLASH 对应的枚举变量以及结构体信息<br />\n我的配置如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// #define SFUD_DEBUG_MOD             // 不使用 SFUD debug 模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_USING_SFDP</span>               <span class=\"token comment\">// 使用 SFDP</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_USING_FLASH_INFO_TABLE</span>   <span class=\"token comment\">// 使用 FLASH 信息表</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// FLASH 芯片型号枚举</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SFUD_W25Q64FV_DEVICE_INDEX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// FLASH 相关信息和 驱动的硬件 SPI</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_FLASH_DEVICE_TABLE</span>                                                  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">[</span>SFUD_W25Q64FV_DEVICE_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> </span><span class=\"token string\">\"W25Q64FV\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> </span><span class=\"token string\">\"SPI1\"</span><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><h1 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h1>\n<h2 id=\"sfud_init\"><a class=\"anchor\" href=\"#sfud_init\">#</a> sfud_init</h2>\n<p>函数原型如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>初始化函数，这个放在主函数调用判断一下就好了，成功会返回  <code>SFUD_SUCCESS</code> <br />\n 如果开启了 DEBUG 的宏，会打印一些详细信息.<br />\n 这个初始化会初始化设备列表中的所有 flash 驱动，如果指向驱动一个 flash 设备，可以考虑使用  <code>sfud_device_init</code></p>\n<h2 id=\"sfud_read\"><a class=\"anchor\" href=\"#sfud_read\">#</a> sfud_read</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将数据从 FLASH 中读出，没啥好说，传个 flash 设备进去，给个地址，缓存空间，要读取的数据量没了</p>\n<h2 id=\"sfud_erase\"><a class=\"anchor\" href=\"#sfud_erase\">#</a> sfud_erase</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>擦除函数，用于将 FLASH 里的数据擦除为 dummy 的值</p>\n<h2 id=\"sfud_write\"><a class=\"anchor\" href=\"#sfud_write\">#</a> sfud_write</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>单纯的写函数，目前我也不知道有什么用，不擦除再写基本上很难保证数据的稳定性和准确性</p>\n<h2 id=\"sfud_erase_write\"><a class=\"anchor\" href=\"#sfud_erase_write\">#</a> sfud_erase_write</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数和 write 函数不同的地方在于，先写后擦，能实现数据写入 有效的写入 FLASH</p>\n<h2 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_DEMO_TEST_BUFFER_SIZE</span> <span class=\"token expression\"><span class=\"token number\">2048</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> sfud_demo_test_buf<span class=\"token punctuation\">[</span>SFUD_DEMO_TEST_BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sfud_demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 在操作之前需要获取 flash 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash <span class=\"token operator\">=</span> <span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 初始化 spi  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">sfud_demo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sfud_demo_test_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sfud_demo_test_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* 数据填充 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/* 擦除扇区 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase the %s flash data finish. Start from 0x%08X, size is %ld.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/* 写入数 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_write</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write the %s flash data finish. Start from 0x%08X, size is %ld.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 读出数据 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read the %s flash data success. Start from 0x%08X, size is %ld. The data is:\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08X] \"</span><span class=\"token punctuation\">,</span> addr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/* 数据校验 */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read and check write data has an error. Write the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The %s flash test is success.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h1>\n<p>目前我也就只知道这些了，等以后使用的时候出现什么 bug 再来琢磨琢磨</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "SFUD",
                "FLASH,SFUD"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32F4%E8%A3%B8%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32F4%E8%A3%B8%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/",
            "title": "STM32F4裸机 FatFs 移植",
            "date_published": "2021-12-07T23:05:01.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h1>\n<p><strong>写在前面:</strong> 这里目前只实现 SFUD+ff14b 基于标准库，板载 W25Q64FV 8M 的 FLASH.</p>\n<h2 id=\"维基百科介绍\"><a class=\"anchor\" href=\"#维基百科介绍\">#</a> 维基百科介绍</h2>\n<p>计算机的文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念，用户使用文件系统来保存数据不必关心数据实际保存在硬盘（或者光盘）的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。在写入新数据之前，用户不必关心硬盘上的那个块地址没有被使用，硬盘上的存储空间管理（分配和释放）功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中.</p>\n<p>其实这么长一段话的核心就在最前那里，文件系统其实就是一个抽象的数据类型。位于物理存储介质之上.<br />\n 与一般的 ADT 相比文件系统仅仅是更加庞大了，无非就是 一堆数据类型加上增删查改.<br />\n 话是这么说，我是写不出来这么庞大的 ADT, 狗头.</p>\n<h2 id=\"个人理解\"><a class=\"anchor\" href=\"#个人理解\">#</a> 个人理解</h2>\n<p>言归正传，当我们使用文件系统时，数据都以文件的形式存储.<br />\n 如果想要留下一块空间的话那么建议手动限制一下 flash 大小或者做一下首地址偏移.</p>\n<p>写入新文件时，先在目录中创建一个文件索引，它指示了文件存放的物理地址，再把数据存储到该地址中<br />\n需要读取数据时，可以从该目录中找到该文件的索引，进而在相应的地址中读取数据<br />\n文件系统的存在使我们在存储数据时，不再是简单的向某个物理地址直接读写，而是要遵循它的读写格式<br />\n一个完整的文件经过 逻辑转换 可能被分成 <strong>多段</strong> 并存储到<strong>不连续</strong>的物理地址，以及使用目录或链表的方式来获知下一段的位置</p>\n<p>简单来说，这个转换部分可以理解为，当我们需要写入一段数据时，由它来求解向什么物理地址写入数据、以什么格式写入，以及写入一些原始数据以外的信息 (如目录)<br />\n 类似于我们去寄快递，逻辑层就是快递站。你把东西给快递之后，你和收件人不需要知道快递是怎么到的，只需要知道目的地址就好.<br />\n 这个 &quot;快递站&quot; 的代码实现，我们习惯称之为文件系统</p>\n<h2 id=\"搭载文件系统的动机\"><a class=\"anchor\" href=\"#搭载文件系统的动机\">#</a> 搭载文件系统的动机</h2>\n<p>为了让单片机能够更好的和服务器进行交互，我打算移植一个文件系统到 STM32F4 上.<br />\n 板子上自带了一块 8M 的 FLASH, 我打算让文件系统彻底接管这块 FLASH, 如果以后有可能的话让 文件系统接管片上 FLASH.</p>\n<h2 id=\"为什么是fatfs\"><a class=\"anchor\" href=\"#为什么是fatfs\">#</a> 为什么是 Fatfs</h2>\n<p>嘿嘿，我只知道 FatFs, 所以我选了它，但是后面我找了一下还有不少的针对于 FLASH 的文件系统.<br />\n 例如，esayflash, jffs2, yaffs, Cramfs, SPIFFS... 但是这些都是针对于 FLASH 的文件系统，而 Fatfs 则是可以兼容各种设备的较为完善的文件系统，便于以后扩展.<br />\n(害，说那么多，其实主要还是只知道 Fatfs)</p>\n<h1 id=\"fatfs\"><a class=\"anchor\" href=\"#fatfs\">#</a> FatFS</h1>\n<p>FATFS 是面向小型嵌入式系统的一种通用的 FAT 文件系统，它由 <code>ANSI C</code>  语言编写且完全独立于底层的 I/O 介质，因此它可以很容易的不加修改的移植到其他处理器当中，就可以利用文件系统的各种函数，对已格式化的 SD 卡的文件进行读写</p>\n<h2 id=\"源码获取\"><a class=\"anchor\" href=\"#源码获取\">#</a> 源码获取</h2>\n<p>可以去 Fatfs 官网自行下载<span class=\"exturl\" data-url=\"aHR0cDovL2VsbS1jaGFuLm9yZy9mc3cvZmYvMDBpbmRleF9lLmh0bWw=\">传送门</span><br />\n也可以在这里走阿里云盘下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvUGdXbUJGMlVNbVE=\">传送门</span><br />\n个人建议是去官网下载，我这里只有 ff14b 版本的 fatfs, 以后可能会有新的，我不一定会同步到阿里云盘</p>\n<h2 id=\"文件分布\"><a class=\"anchor\" href=\"#文件分布\">#</a> 文件分布</h2>\n<p>document 文件<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/uHxdMZ3lXSs69h5.png\" alt=\"document\" /><br />\nsource 文件夹文件分布<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/oUdQ1Jl47jf98XD.png\" alt=\"FatFs_source\" /></p>\n<h2 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FRESULT <span class=\"token function\">f_open</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> BYTE mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">/* 打开或创建文件 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FRESULT <span class=\"token function\">f_close</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 关闭文件 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FRESULT <span class=\"token function\">f_read</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buff<span class=\"token punctuation\">,</span> UINT btr<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">/* 读取文件 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FRESULT <span class=\"token function\">f_write</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buff<span class=\"token punctuation\">,</span> UINT btw<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 写入文件 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FRESULT <span class=\"token function\">f_opendir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 打开文件夹 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>FRESULT <span class=\"token function\">f_closedir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 关闭文件夹 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>FRESULT <span class=\"token function\">f_readdir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">,</span> FILINFO<span class=\"token operator\">*</span> fno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 读取文件夹 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FRESULT <span class=\"token function\">f_mkdir</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 创建文件夹 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>FRESULT <span class=\"token function\">f_unlink</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 删除存在的文件或文件夹 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FRESULT <span class=\"token function\">f_getfree</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> DWORD<span class=\"token operator\">*</span> nclst<span class=\"token punctuation\">,</span> FATFS<span class=\"token operator\">*</span><span class=\"token operator\">*</span> fatfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 获取当前卷剩余空间 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>FRESULT <span class=\"token function\">f_rename</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path_old<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path_new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 重命名文件或文件夹 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>FRESULT <span class=\"token function\">f_chdir</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 更改当前路径 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>FRESULT <span class=\"token function\">f_mount</span> <span class=\"token punctuation\">(</span>FATFS<span class=\"token operator\">*</span> fs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> BYTE opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">/* 挂载或卸载逻辑卷 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FRESULT <span class=\"token function\">f_mkfs</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> MKFS_PARM<span class=\"token operator\">*</span> opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> work<span class=\"token punctuation\">,</span> UINT len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 格式化 (创建) FAT 卷 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f_size</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>obj<span class=\"token punctuation\">.</span>objsize<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t\t\t</span><span class=\"token comment\">/* 获取当前文件大小 */</span></span></pre></td></tr></table></figure><h2 id=\"底层驱动\"><a class=\"anchor\" href=\"#底层驱动\">#</a> 底层驱动</h2>\n<p>一般来说，我们移植的时候只需要实现一下 iodisk 中的这些个函数即可，如果需要加时间戳，自行实现，这里我不用 rtc 所以不实现时间戳<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/9roNcgKR1qdPMGS.png\" alt=\"iodisk.h\" /></p>\n<h3 id=\"sfud\"><a class=\"anchor\" href=\"#sfud\">#</a> SFUD</h3>\n<p>这里使用了 一个万能的 FLASH 驱动组件 SFUD. 避免以后修改 FLASH 芯片的时候，还得到处去改也写入的相关方法.<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/QgGcBTos6twlqIe.png\" alt=\"sfud\" /><br />\n 这里不详细说明 SFUD 的移植，只列出一下用到的函数<br />\n关于 sfud 的移植可以参考我另一篇博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0VtYmVkZGVkL1NUTTMyL1NUTTMyJUU4JUEzJUI4JUU2JTlDJUJBJUU3JUE3JUJCJUU2JUE0JThEU0ZVRC8=\">传送门</span> (其实直接去 github 上看人家的 readme 就可以了)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用于 disk_init</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sfud_err <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用于获取 要写入的 flash 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sfud_flash <span class=\"token operator\">*</span><span class=\"token function\">sfud_get_device</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 用于 disk_read 函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sfud_err <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 用于 disk_write 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"disk_initialize\"><a class=\"anchor\" href=\"#disk_initialize\">#</a> disk_initialize</h3>\n<p>对接了 SUFD 这一步还是很好实现的。直接 sfud_init 后判断 是否成功即可<br />\n这边为了兼容性和便欲拓展以及减少代码量，额外加了一层 本地函数函数，下面的所有接口实现基本都是这个逻辑<br />\n代码实现如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DSTATUS <span class=\"token function\">disk_initialize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tsfud_norflash0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_PARERR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @brief \t\t\tFLASH 初始化函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @return FRESULT \t初始化结果</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_INT_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_initialize ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_INT_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_write\"><a class=\"anchor\" href=\"#disk_write\">#</a> disk_write</h3>\n<p>这里需要注意几点</p>\n<ol>\n<li>在写 flash 之前需要先<strong>擦除</strong>，所以我们不使用  <code>sfud_write</code>  而是使用  <code>sfud_erase_write</code> , 这样子就不需要自行去实现先擦后写的逻辑了</li>\n<li>对于 文件系统 来说，操作以扇区为单位，而我们的 flash 的读写操作一般以 Byte 为单位，所以需要自行乘上扇区大小</li>\n</ol>\n<p>代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DRESULT <span class=\"token function\">disk_write</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Data to be written */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUINT count\t\t  <span class=\"token comment\">/* Number of sectors to write */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @brief \t\t\tFLASH 写函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param buff \t\t要写入的数组</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @param count \t要写入的扇区数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param sector \t要写入的扇区的起始地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @return FRESULT \t写操作结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 这里需要对扇区数量转为字节数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_write ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_read\"><a class=\"anchor\" href=\"#disk_read\">#</a> disk_read</h3>\n<p>写函数需要注意的地方和读函数一致，别最后读写了半天都只在读写一个字节</p>\n<p>代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DRESULT <span class=\"token function\">disk_read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tBYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Data buffer to store read data */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUINT count\t  <span class=\"token comment\">/* Number of sectors to read */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @brief \t\t\tFLASH 读函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param buff \t\t读出的数据</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @param count\t\t要读出的扇区数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param sector\t数据所在地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @return FRESULT\t读取结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_read ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_ioctl\"><a class=\"anchor\" href=\"#disk_ioctl\">#</a> disk_ioctl</h3>\n<p>这里是 FatFs 获取 设备扇区大小，扇区数量和 块数量的的地方。对于 FLASH 的扇区其实手册里都有。不过其实我们可以自行划分<br />\n例如我的代码，8M 的 FLASH 分为 8 个块，一个块 2048 个扇区，一个扇区 512 字节，整个 FLASH 分为 2048*8 个扇区 一共 8M,<br />\n 也可以按 FLASH 手册上写的 一个 FLASH 1 个块，2048 个扇区，一个扇区 4096 字节.<br />\n 这里如果使用 超过 512 大小的扇区 自行去 ffconf.h 中修改 FF_SS_MAX 的宏<br />\n代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">/* 2048*4096/1024/1024=8(MB) */</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DRESULT <span class=\"token function\">disk_ioctl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Physical drive nmuber (0..) */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tBYTE cmd<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Control code */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff <span class=\"token comment\">/* Buffer to send/receive control data */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tDRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!disk_ioctl ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @brief \t\t\t获取 FLASH 扇区 块 数据</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @param cmd \t\t获取指令</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * @param buff \t\t对应数组</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @return DRESULT \t指令执行结果</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">case</span> CTRL_SYNC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_COUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区数量 */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_COUNT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// W25Q64 有 2048 个大小为 4K 的扇区</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区大小 */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//spi flash 的扇区大小是 4096 Bytes</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_BLOCK_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">/* 块大小 */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_BLOCK_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_status\"><a class=\"anchor\" href=\"#disk_status\">#</a> disk_status</h3>\n<p>这个就很简单了，想实现就实现，不想实现就直接  <code>return FR_OK;</code>  就好了<br />\n如果想实现 可以使用 sfud_read 读取一下 flash id, 判断一下作为返回值即可<br />\n代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DSTATUS <span class=\"token function\">disk_status</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEV_FLASH <span class=\"token operator\">==</span> pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回 OK 即可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"iodiskc-文件之外的东西\"><a class=\"anchor\" href=\"#iodiskc-文件之外的东西\">#</a> iodisk.c 文件之外的东西</h3>\n<p>fatfs 还有一个 ffconf.h 文件，这里会涉及到 扇区大小，读写功能，以及一些函数的禁用和启用</p>\n<p>这里只列出常用的，贴 code 太占空间</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_FS_READONLY</span>\t<span class=\"token expression\"><span class=\"token number\">0</span>       </span><span class=\"token comment\">// 只读标识符，如果你的文件系统只需要实现读功能就 改为 1, disk write 等函数就不会被编译</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_MKFS</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 使用格式化函数，我们 FLASH 就必须使用这个函数，因为我们只能通过 FatFs 来格式化 FLASH</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_LABEL</span>\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 是否使用卷标签，这个看个人习惯，FLASH 就一块，也无所谓也不用标签</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_STRFUNC</span>\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 使用 f_putc, f_getc 等函数，更详细的 子级宏定义，自行查看文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_CODE_PAGE</span>\t<span class=\"token expression\"><span class=\"token number\">932</span>     </span><span class=\"token comment\">// 文件名编码格式，默认万国码</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_LFN</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 是否启用长文件名</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MAX_LFN</span>\t\t<span class=\"token expression\"><span class=\"token number\">255</span>     </span><span class=\"token comment\">// 文件名最大长度</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_VOLUMES</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 文件系统 物理卷 的数据量，现在只有一个 FLASH 所以是 1</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MIN_SS</span>\t\t<span class=\"token expression\"><span class=\"token number\">512</span>     </span><span class=\"token comment\">// 扇区最小大小，这个一般不变动</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MAX_SS</span>\t\t<span class=\"token expression\"><span class=\"token number\">4096</span>    </span><span class=\"token comment\">// 扇区最大大小，更具情况自行调整</span></span></pre></td></tr></table></figure><h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<p>整个  <code>iodisk.c</code>  文件如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* Low level disk I/O module SKELETON for FatFs     (C)ChaN, 2019        */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* If a working storage control module is available, it should be        */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* attached to the FatFs via a glue function rather than modifying it.   */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* This is an example of glue functions to attach various exsisting      */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* storage control modules to the FatFs module with a defined API.       */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ff.h\"</span>\t\t<span class=\"token comment\">/* Obtains integer types */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"diskio.h\"</span> <span class=\"token comment\">/* Declarations of disk functions */</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sfud.h\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* Definitions of physical drive number for each drive */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// #define DEV_RAM 0 /* Example: Map Ramdisk to physical drive 0 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEV_FLASH</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// #define DEV_MMC 1 /* Example: Map MMC/SD card to physical drive 1 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// #define DEV_USB 2 /* Example: Map USB MSD to physical drive 2 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// FLASH 划分扇区和块</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// FLASH 大小 = FLASH_SECTOR_SIZE * FLASH_SECTOR_COUNT</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// DBEUG 信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_DSTRING_FORMAT</span> <span class=\"token string\">\"[FATFS]: %s. \\r\\n\"</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_FSTRING_FORMAT</span> <span class=\"token string\">\"[FATFS]: %s. (Error Code: %d(%s))\\r\\n\"</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEBUG_LOG_F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>DEBUG_FSTRING_FORMAT<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> FR_Table<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEBUG_LOG_D</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>DEBUG_DSTRING_FORMAT<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/* static gloal variable */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 错误状态码</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>FR_Table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token string\">\"FR_OK: Succeeded\"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (0) Succeeded */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token string\">\"FR_DISK_ERR: A hard error occurred in the low level disk I/O layer \"</span><span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">/* (1) A hard error occurred in the low level disk I/O layer */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INT_ERR: Assertion failed \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (2) Assertion failed */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_READY: The physical drive cannot work \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (3) The physical drive cannot work */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_FILE: Could not find the file \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (4) Could not find the file */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_PATH: Could not find the path \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (5) Could not find the path */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_NAME: The path name format is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t <span class=\"token comment\">/* (6) The path name format is invalid */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token string\">\"FR_DENIED: Access denied due to prohibited access or directory full \"</span><span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">/* (7) Access denied due to prohibited access or directory full */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token string\">\"FR_EXIST: Access denied due to prohibited access \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t <span class=\"token comment\">/* (8) Access denied due to prohibited access */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_OBJECT: The file/directory object is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t <span class=\"token comment\">/* (9) The file/directory object is invalid */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token string\">\"FR_WRITE_PROTECTED: The physical drive is write protected \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (10) The physical drive is write protected */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_DRIVE: The logical drive number is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t <span class=\"token comment\">/* (11) The logical drive number is invalid */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_ENABLED: The volume has no work area \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (12) The volume has no work area */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_FILESYSTEM: There is no valid FAT volume \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (13) There is no valid FAT volume */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"FR_MKFS_ABORTED: The f_mkfs() aborted due to any problem \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (14) The f_mkfs() aborted due to any parameter error */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token string\">\"FR_TIMEOUT: Could not get a grant to access the volume within defined period \"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* (15) Could not get a grant to access the volume within defined period */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token string\">\"FR_LOCKED: The operation is rejected according to the file sharing policy \"</span><span class=\"token punctuation\">,</span>\t <span class=\"token comment\">/* (16) The operation is rejected according to the file sharing policy */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_ENOUGH_CORE: LFN working buffer could not be allocated \"</span><span class=\"token punctuation\">,</span>\t\t\t\t <span class=\"token comment\">/* (17) LFN working buffer could not be allocated */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token string\">\"FR_TOO_MANY_OPEN_FILES: Number of open files > FF_FS_LOCK \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (18) Number of open files > _FS_SHARE */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_PARAMETER: Given parameter is invalid \"</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (19) Given parameter is invalid */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">//flash 设备实例</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">static</span> sfud_flash <span class=\"token operator\">*</span>sfud_norflash0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">/* Get Drive Status                                                      */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>DSTATUS <span class=\"token function\">disk_status</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEV_FLASH <span class=\"token operator\">==</span> pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回 OK 即可</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">/* Inidialize a Drive                                                    */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>DSTATUS <span class=\"token function\">disk_initialize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\tsfud_norflash0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_PARERR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"108\"></td><td><pre> * @brief \t\t\tFLASH 初始化函数</pre></td></tr><tr><td data-num=\"109\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"110\"></td><td><pre> * @return FRESULT \t初始化结果</pre></td></tr><tr><td data-num=\"111\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_INT_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_initialize ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_INT_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">/* Read Sector(s)                                                        */</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>DRESULT <span class=\"token function\">disk_read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tBYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Data buffer to store read data */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tUINT count\t  <span class=\"token comment\">/* Number of sectors to read */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"155\"></td><td><pre> * @brief \t\t\tFLASH 读函数</pre></td></tr><tr><td data-num=\"156\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"157\"></td><td><pre> * @param buff \t\t读出的数据</pre></td></tr><tr><td data-num=\"158\"></td><td><pre> * @param count\t\t要读出的扇区数量</pre></td></tr><tr><td data-num=\"159\"></td><td><pre> * @param sector\t数据所在地址</pre></td></tr><tr><td data-num=\"160\"></td><td><pre> * @return FRESULT\t读取结果</pre></td></tr><tr><td data-num=\"161\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_read ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token comment\">/* Write Sector(s)                                                       */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FF_FS_READONLY <span class=\"token operator\">==</span> <span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>DRESULT <span class=\"token function\">disk_write</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Data to be written */</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\tUINT count\t\t  <span class=\"token comment\">/* Number of sectors to write */</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"206\"></td><td><pre> * @brief \t\t\tFLASH 写函数</pre></td></tr><tr><td data-num=\"207\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"208\"></td><td><pre> * @param buff \t\t要写入的数组</pre></td></tr><tr><td data-num=\"209\"></td><td><pre> * @param count \t要写入的扇区数量</pre></td></tr><tr><td data-num=\"210\"></td><td><pre> * @param sector \t要写入的扇区的起始地址</pre></td></tr><tr><td data-num=\"211\"></td><td><pre> * @return FRESULT \t写操作结果</pre></td></tr><tr><td data-num=\"212\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_write ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token comment\">/* Miscellaneous Functions                                               */</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>DWORD <span class=\"token function\">get_fattime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token comment\">// 暂不添加时间获取，需要的话就把 RTC 数据传入这里 */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token comment\">// DWORD time; /* 返回当前时间戳 */</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre></pre></td></tr><tr><td data-num=\"240\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>DRESULT <span class=\"token function\">disk_ioctl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Physical drive nmuber (0..) */</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\tBYTE cmd<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Control code */</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff <span class=\"token comment\">/* Buffer to send/receive control data */</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\tDRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!disk_ioctl ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"265\"></td><td><pre> * @brief \t\t\t获取 FLASH 扇区 块 数据</pre></td></tr><tr><td data-num=\"266\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"267\"></td><td><pre> * @param cmd \t\t获取指令</pre></td></tr><tr><td data-num=\"268\"></td><td><pre> * @param buff \t\t对应数组</pre></td></tr><tr><td data-num=\"269\"></td><td><pre> * @return DRESULT \t指令执行结果</pre></td></tr><tr><td data-num=\"270\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t<span class=\"token keyword\">case</span> CTRL_SYNC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_COUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区数量 */</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_COUNT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// W25Q64 有 2048 个大小为 4K 的扇区</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区大小 */</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//spi flash 的扇区大小是 4096 Bytes</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_BLOCK_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>\t\t<span class=\"token comment\">/* 块大小 */</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_BLOCK_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试函数\"><a class=\"anchor\" href=\"#测试函数\">#</a> 测试函数</h2>\n<p>写的比较随意，因为一些特殊原因没有做判断处理，直接流水，自行修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FATFS fs<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Filesystem object */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FATFS <span class=\"token operator\">*</span>fsptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FIL fil<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* File object */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FRESULT res<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* API result code */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>UINT bw<span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* Bytes written */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>BYTE work<span class=\"token punctuation\">[</span>FF_MAX_SS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Work area (larger is better for processing time) */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>BYTE mm<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is file system test file from the STM32F407VGT6.\\r\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">flash_data_display</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> flash_add_start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08X] \"</span><span class=\"token punctuation\">,</span> flash_add_start <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">file_system_test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">char</span> fileName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0:6\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_mkfs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 格式化</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 挂载</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_getfree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>br<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 获取空余空间</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The free space: %dKB.\\r\\n\"</span><span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// 打开文件准备写入，没有文件就创建，有文件就覆盖</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> FA_CREATE_ALWAYS <span class=\"token operator\">|</span> FA_WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//FATFS_LOG(res);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">//res = f_unlink(fileName);</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> mm<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrote %d bytes to %s file.\\r\\n\"</span><span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// 写入完毕，关闭文件</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">f_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// 打开文件准备读取</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> FA_READ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// 读出</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> readBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d bytes were read from %s.\\r\\n\"</span><span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\r\\n\"</span><span class=\"token punctuation\">,</span> readBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token function\">f_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h1>\n<p>等有空我去琢磨琢磨 FatFs 的源码以及各个 API 的使用方法<br />\n至于标准库直接对接 FatFs, 我觉得还是没有必要了，HAL 都不必实现，直接套 SFUD 即可<br />\n找个时间我把 标准库 和 HAL 库 一致 SFUD 的教程写了</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "文件系统",
                "fatfs",
                "文件系统,fatfs"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E5%A3%B0%E6%98%8E%E5%8F%8D%E6%80%9D/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E5%A3%B0%E6%98%8E%E5%8F%8D%E6%80%9D/",
            "title": "C语言声明反思",
            "date_published": "2021-10-26T12:45:01.000Z",
            "content_html": "<p>对于  <code>char * const *(*next)();</code>  这种数据类型分析起来特别麻烦，在这里先捋一下</p>\n<h1 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h1>\n<p>A. 声明先从名字开始读取，然后按照优先级顺序依次读取.<br />\nB. 优先级从高到低:</p>\n<ol>\n<li>声明中被括号括起来的部分</li>\n<li>后缀操作符:\n<ul>\n<li><code>fun()</code>  中的 <code>()</code>  代表是一个函数；</li>\n<li><code>arr[]</code>  的 <code>[]</code>  表示这是一个数组</li>\n</ul>\n</li>\n<li>前缀:  <code>*ptr</code>  表示 &quot;指向 xx 的指针&quot;</li>\n</ol>\n<p>C. 如果使用  <code>const</code>  或 <code>volatile</code> , 紧跟类型说明符，则作用于类型说明符号；其他情况下作用于左边紧邻的  <code>*</code>  号</p>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<p>举个例子  <code>char * const *(*next)();</code> <br />\n 适用规则:</p>\n<ol>\n<li>A: 变量名位  <code>next</code> , 且被 <code>()</code>  运算符包含</li>\n<li>B1: 变量名被  <code>()</code>  括号内部是  <code>(*arr)</code>  代表其是指针</li>\n<li>B: 在  <code>*</code>  和  <code>()</code>  之间决定</li>\n<li>B2: B2 规则告诉我们优先级较高的是 <code>()</code> , 所以 得出 <strong> <code>next</code>  和 <code>()</code>  先结合是一个指向函数的指针</strong>，所以得出 &quot;next 是一个函数指针，指向返回... 的函数&quot;</li>\n<li>B3: 处理  <code>*</code> , 得出指针内容</li>\n<li>C:  <code>char * const</code> ,  <code>const</code>  右边没有跟随类型符，所以解释为 &quot;指向字符串的常量指针&quot;, 指针不可改变</li>\n</ol>\n<p>综上，next 是 &quot;一个指针，指向一个函数，该函数的返回一个指针，返回的指针为一个指向 char 型数据类型的常量指针&quot;<br />\n 下图是 C 语言函数定义的规则图解<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017124630.jpg\" alt=\"图示_源于C语言专家编程\" /></p>\n<h1 id=\"表格化\"><a class=\"anchor\" href=\"#表格化\">#</a> 表格化</h1>\n<p>上面的方式只能说是逻辑化，看上去还是不够清晰。我打算按着编译原理的角度结合上面图来列一个表格，按着上面的规则，就列一个表就可以推断出结果.</p>\n<table>\n<thead>\n<tr>\n<th>声明字符串</th>\n<th style=\"text-align:center\">采取的步骤</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char * const *(*<strong>next</strong>)();</td>\n<td style=\"text-align:center\">1</td>\n<td>表示  <code>next是...</code></td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">2,3</td>\n<td>不匹配，转到下一步。表示  <code>next是...</code></td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">4</td>\n<td>不匹配，转到下一步.</td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">5</td>\n<td>与 * 号匹配。表示  <code>指向...的指针</code></td>\n</tr>\n<tr>\n<td>char * const *<strong>(     )</strong>();</td>\n<td style=\"text-align:center\">4</td>\n<td>&quot;(&quot; &quot;)&quot; 匹配，转到第 2 步</td>\n</tr>\n<tr>\n<td>char * const *        <strong>()</strong>;</td>\n<td style=\"text-align:center\">2</td>\n<td>不匹配，转到下一步</td>\n</tr>\n<tr>\n<td>char * const *        <strong>()</strong>;</td>\n<td style=\"text-align:center\">3</td>\n<td>表示  <code>返回...的函数</code></td>\n</tr>\n<tr>\n<td>char * const *              ;</td>\n<td style=\"text-align:center\">4</td>\n<td>不匹配，转到下一步</td>\n</tr>\n<tr>\n<td>char * const *              ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>指向..的指针</code></td>\n</tr>\n<tr>\n<td>char * <strong>const</strong>            ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>只读的...</code></td>\n</tr>\n<tr>\n<td>char *                      ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>指向...的指针</code></td>\n</tr>\n<tr>\n<td>char                        ;</td>\n<td style=\"text-align:center\">6</td>\n<td>表示 <code>char</code></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "声明,学习笔记"
            ]
        },
        {
            "id": "https://to-ywz.github.io/win11/Bug/Win11%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95Microsoft%E8%B4%A6%E6%88%B7/",
            "url": "https://to-ywz.github.io/win11/Bug/Win11%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95Microsoft%E8%B4%A6%E6%88%B7/",
            "title": "Win11无法登录Microsoft账户",
            "date_published": "2021-10-24T01:24:15.000Z",
            "content_html": "<p>昨天刷的 win11, Microsoft 登录账号失败了，琢磨半天才搞好，记个笔记<br />\n<img data-src=\"https://i.loli.net/2021/10/24/ADwYfX4mh7NMHWZ.png\" alt=\"bug\" /></p>\n<h1 id=\"第一次遇到这个问题\"><a class=\"anchor\" href=\"#第一次遇到这个问题\">#</a> 第一次遇到这个问题</h1>\n<p>记得当初 win10 上是直接在 clash 的 <code>UWP Loopback</code>  的管理器上配置了一下 Microsoft 的服务<br />\n<img data-src=\"https://i.loli.net/2021/10/24/cdzDwA9k5YaGgWb.png\" alt=\"clash\" /><br />\n 然而，是我记性不好，这是  <code>OneNote</code>  无法同步的问题。整了半天都不好使</p>\n<h1 id=\"win11-的解决方法\"><a class=\"anchor\" href=\"#win11-的解决方法\">#</a> WIN11 的解决方法</h1>\n<p>其实，可以先试试把代理关掉，我的就是这个 bug.<br />\n 当然在这之前还尝试过修改代理，这里演示一下.<br />\n <code>win + r</code>  召唤 运行窗口<br />\n<img data-src=\"https://i.loli.net/2021/10/24/Xtj8q917zRmfoEV.png\" alt=\"\" /><br />\n选择 网络和 Intent, 下面的子选项<br />\n<img data-src=\"https://i.loli.net/2021/10/24/UW1CDw7ZgHjVLtS.png\" alt=\"\" /><br />\n进入后选择 更改网络适配器<br />\n<img data-src=\"https://i.loli.net/2021/10/24/YHNvzd5QxupsgSl.png\" alt=\"\" /><br />\n选择当前在工作的适配器，右键属性<br />\n<img data-src=\"https://i.loli.net/2021/10/24/45QOat7dV1sqjwN.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2021/10/24/lWjmeqygFVcGMkQ.png\" alt=\"\" /><br />\n选择 IPv4, 双击<br />\n<img data-src=\"https://i.loli.net/2021/10/24/SNPIy2K4mejxJt1.png\" alt=\"\" /><br />\n将 DNS 和 备用 DNS 改为 4.4.4.1 和 4.4.4.2<br />\n<img data-src=\"https://i.loli.net/2021/10/24/SdVCUZPjXG1Musx.png\" alt=\"\" /><br />\n 这样子就可以再试试能否登录成功，如果还是不行，只能说不是一种问题<br />\n记得登录完毕后将 DNS 修改回去</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "win11",
                "Bug"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/",
            "title": "C语言深度剖析",
            "date_published": "2021-10-22T10:54:20.732Z",
            "content_html": "<h1 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h1>\n<h2 id=\"关键字数量\"><a class=\"anchor\" href=\"#关键字数量\">#</a> 关键字数量</h2>\n<p>C89 因该是 32 个，C99 多出了 5 个，多出的 5 个如下</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>定义一个类的内联函数，引入它的主要原因是用它替代 C 中表达式形式的宏定义</td>\n</tr>\n<tr>\n<td>restrict</td>\n<td>只用于限定指针，所有修改该指针所指向内容的操作全部都是基于 (base on) 该指针的，即不存在其它进行修改操作的途径</td>\n</tr>\n<tr>\n<td>_Bool</td>\n<td>用于表示布尔值，引入  <code>&lt;stdbool.h&gt;</code> , 可以用 bool 代替</td>\n</tr>\n<tr>\n<td>_Complex 和 Imaginary</td>\n<td>添加了复数类型</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于-sizeof-不得不说的那些事\"><a class=\"anchor\" href=\"#关于-sizeof-不得不说的那些事\">#</a> 关于 sizeof 不得不说的那些事</h2>\n<p>其实挺致命的 sizeof 平常都是 sizeof () 这么用的，一直以为它是个函数，到了今天才知道它是个关键字<br />\n sizeof 不带括号也可以使用，sizeof (int) 和 sizeof int 没有什么区别，但是由于 sizeof () 用的多，建议用着一种形式<br />\n至于为什么 sizeof () 用的多我估计是和 不用 <code>#define max(a,b) a&gt;b?a:b</code> , 而用 <code>#define max(a,b) (a)&gt;(b)?(a):(b)</code>  的原因是一致的</p>\n<h2 id=\"关于-声明-和-定义-不得不说的二三事\"><a class=\"anchor\" href=\"#关于-声明-和-定义-不得不说的二三事\">#</a> 关于 声明 和 定义 不得不说的二三事</h2>\n<p>声明和定义是由明显区别的，体现在两个地方：内存 和 出现次数</p>\n<ul>\n<li>在内存上，<br />\n 定义必然占用内存空间<br />\n声明不一定占用内存空间，只有当被声明的对象被定义后才会占用空间<br />\n这一块的区别可以去看以先 汇编 上对内存的分配<br />\n测试代码如下:<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//extern int small = 0; /* extern 声明的 同时不能被定义 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> big<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x <span class=\"token operator\">+=</span> i <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>出现次数，<br />\n 定义只能出现一次，要不然就是重定义，鬼知道编译器会给你优化成什么东西<br />\n声明能出现多次，编译器会认为当前的这写声明都是一个变量，一般用于多文件编译跨文件的变量</li>\n</ul>\n<h2 id=\"register\"><a class=\"anchor\" href=\"#register\">#</a> register</h2>\n<p>这个关键字目的在于告诉编译器 把变量存放到 CPU 内部寄存器中，减少变量从内存中的读取次数来提升效率<br />\n当然，你定义是你定义，编译器听不听这你就管不着了。人家怎么开心怎么来<br />\n有个要注意的地方，register 变量可能不存放在内存中，所以不能用取址运算符 “&amp;” 来获取 register 变量的地址<br />\n对了，寄存器是无法存入自定义类型的，所以传参记得传指针</p>\n<h2 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h2>\n<p>这玩意可亲切了，毕竟干嵌入式出身，CPU 内部有寄存器，这是唯一一个和 CPU 处理速度能搭上拍的存储器<br />\n但是由于造价高，所以数量少。但凡数据读取都会经过寄存器，哪怕在内存上读取，也是从内存到高速缓存，再到寄存器<br />\n至于为什么快，一是小，而是距离近，其他原因我也没法解释了</p>\n<h2 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h2>\n<h3 id=\"修饰变量\"><a class=\"anchor\" href=\"#修饰变量\">#</a> 修饰变量</h3>\n<p>变量又分为局部和全局变量，但它们都存在内存的静态区</p>\n<ul>\n<li>静态全局变量，作用域仅限于变量被定义的文件中，从哪定义的就从哪开始，在定义之前的地方调用，就需要 用  <code>extern</code>  来声明</li>\n<li>静态局部变量，在函数体里面定义的，就只能在这个函数里用了，同一个文档中的其他函数也用不了.<br />\n 由于被 static 修饰的变量总是存在内存的静态区，所以即使这个函数运行结束，这个静态变量的值还是不会被销毁，函数下次使用时仍然能用到这个值</li>\n</ul>\n<h3 id=\"修饰函数\"><a class=\"anchor\" href=\"#修饰函数\">#</a> 修饰函数</h3>\n<p>修饰函数。函数前加 static 使得函数成为静态函数。但此处 “static” 的含义<br />\n不是指存储方式，而是指对函数的作用域仅局限于本文件</p>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<h3 id=\"什么是数据类型\"><a class=\"anchor\" href=\"#什么是数据类型\">#</a> 什么是数据类型</h3>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117075651.png\" alt=\"\" /><br />\n数据类型其实就是一个模子，每定义一个变量就是用模子在内存里打一个相应大小的空间.<br />\n 数据类型当然不仅如此，数据结构的定义就是数据及在数据上的操作，简单来说，除了有空间，还得有使用方法</p>\n<h3 id=\"变量命名规则\"><a class=\"anchor\" href=\"#变量命名规则\">#</a> 变量命名规则</h3>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117075709.png\" alt=\"\" /><br />\nc 语言是一个精简高效的语言，所以我们变量名也要简洁有力，但是非常用英语词汇最好不要使用缩写，尤其是专业英语</p>\n<h4 id=\"作用域前缀命名规则\"><a class=\"anchor\" href=\"#作用域前缀命名规则\">#</a> 作用域前缀命名规则</h4>\n<table>\n<thead>\n<tr>\n<th>标识符类型</th>\n<th>作用域前缀</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Global Variable</td>\n<td>g</td>\n</tr>\n<tr>\n<td>File Static Variable(native)</td>\n<td>n</td>\n</tr>\n<tr>\n<td>Function Static Variable</td>\n<td>f</td>\n</tr>\n<tr>\n<td>Auto Variable</td>\n<td>a</td>\n</tr>\n<tr>\n<td>Global Function</td>\n<td>g</td>\n</tr>\n<tr>\n<td>Static Function</td>\n<td>n</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数据类型前缀命名规则\"><a class=\"anchor\" href=\"#数据类型前缀命名规则\">#</a> 数据类型前缀命名规则</h4>\n<table>\n<thead>\n<tr>\n<th>Prefix</th>\n<th>Suffix</th>\n<th>Data Type</th>\n<th>Example</th>\n<th>Remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bt</td>\n<td></td>\n<td>bit</td>\n<td>Bit btVariable</td>\n</tr>\n<tr>\n<td>b</td>\n<td></td>\n<td>boolean</td>\n<td>boolean bVariable</td>\n</tr>\n<tr>\n<td>c</td>\n<td></td>\n<td>char</td>\n<td>char cVariable;</td>\n</tr>\n<tr>\n<td>i</td>\n<td></td>\n<td>int</td>\n<td>int iVariable;</td>\n</tr>\n<tr>\n<td>s</td>\n<td></td>\n<td>short[int]</td>\n<td>short[int] sVariable;</td>\n</tr>\n<tr>\n<td>l</td>\n<td></td>\n<td>long[int]</td>\n<td>long[int] lVariable;</td>\n</tr>\n<tr>\n<td>u</td>\n<td></td>\n<td>unsigned[int]</td>\n<td>unsigned[int] uiVariable;</td>\n</tr>\n<tr>\n<td>d</td>\n<td></td>\n<td>double</td>\n<td>double dVariable;</td>\n</tr>\n<tr>\n<td>f</td>\n<td></td>\n<td>float</td>\n<td>float fVariable;</td>\n</tr>\n<tr>\n<td>p</td>\n<td></td>\n<td>pointer</td>\n<td>void *vpVariable; 指针前缀</td>\n</tr>\n<tr>\n<td>v</td>\n<td></td>\n<td>void</td>\n<td>void vVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>enum</td>\n<td>enum A stVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>struct</td>\n<td>struct A stVariable;</td>\n</tr>\n<tr>\n<td>st</td>\n<td></td>\n<td>union</td>\n<td>union A stVariable;</td>\n</tr>\n<tr>\n<td>fp</td>\n<td></td>\n<td>function point</td>\n<td>void(* fpGetModeFuncList_a[])( void )</td>\n</tr>\n<tr>\n<td></td>\n<td>_a</td>\n<td>array of</td>\n<td>char cVariable_a[TABLE_MAX];</td>\n</tr>\n<tr>\n<td></td>\n<td>_st  _pst</td>\n<td>typedefenum/struct/union</td>\n<td>typedef struct SM_EventOpt { unsigned char unsigned int char }SM_EventOpt_st,*SM_EventOpt_pst;</td>\n<td>当自定义结构数据类型时使用_st 后缀；当自定义结构数据类型为指针类型时使用_pst 后缀；</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"含义标识命名规则\"><a class=\"anchor\" href=\"#含义标识命名规则\">#</a> 含义标识命名规则</h4>\n<p>变量命名使用名词性词组，函数命名使用动词性词组。<br />\n| 变量名 | 目标词 | 动词 (的过去分词) | 状语 | 目的地 | 含义 |<br />\n| ------ | ------ | ---------------- | ---- | ------ | ---- ||<br />\n| DataGotFromSD     | Data   | Got              | From | SD     | 从 SD 中取得的数据 |<br />\n| DataDeletedFromSD | Data   | Deleted          | From | SD     | 从 SD 中删除的数据 |<br />\nPS: 变量含义标识符构成：目标词 + 动词 (的过去分词)+ [状语] + [目的地];</p>\n<p>| 变量名 | 目标词 | 动词 (的过去分词) | 状语 | 目的地 | 含义 |<br />\n| ------ | ------ | ---------------- | ---- | ------ | ---- ||<br />\n| GetDataFromSD    | Get    | Data             | From | SD     | 从 SD 中取得数据 |<br />\n| DeleteDataFromSD | Delete | Data             | From | SD     | 从 SD 中删除数据 |<br />\nPS: 函数含义标识符构成：动词 (一般现时)+ 目标词 +[状语]+[目的地];</p>\n<h4 id=\"其他命名规则\"><a class=\"anchor\" href=\"#其他命名规则\">#</a> 其他命名规则</h4>\n<ul>\n<li>程序中不得出现仅靠大小写区分的相似的标识符</li>\n<li>一个函数名禁止被用于其它之处</li>\n</ul>\n<h2 id=\"再谈-sizeof\"><a class=\"anchor\" href=\"#再谈-sizeof\">#</a> 再谈 sizeof</h2>\n<p>sizeof 不是函数<br />\n sizeof 不是函数<br />\n sizeof 不是函数<br />\n在计算 数据类型的时候<strong>不能</strong>省略 (), 在计算变量所占用空间的时候可以省略，<mark>建议都不要省略</mark></p>\n<h3 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h3>\n<p>PS: 以下情况为 64 位操作系统，gcc-x86-64 环境下</p>\n<ol>\n<li class=\"quiz fill\">\n<p><code>sizeof(int) *p</code>  的含义<span class=\"gap\">表示计算 int 型所占字节数，然后再乘以 p</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>当  <code>int *p = NULL;</code>  时， <code>sizeof(p)</code>  的值是<span class=\"gap\"> 8</span>,  <code>sizeof(*p)</code>  的值是 [4].{.gap}。</p>\n</li>\n<li class=\"quiz fill\">\n<p>当  <code>int a[100];</code>  sizeof (a) 的值<span class=\"gap\"> 400</span>,  <code>sizeof(a[100])</code>  的值<span class=\"gap\"> 4</span>,  <code>sizeof(&amp;a)</code>  的值 [8].{.gap}。</p>\n</li>\n<li>\n<p>当  <code class=\"quiz fill\">int b[100];</code></p>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>sizeof (b) 的值是 [8].{gap}。</p>\n<h2 id=\"关于-if-else-的那些事\"><a class=\"anchor\" href=\"#关于-if-else-的那些事\">#</a> 关于 if ... else ... 的那些事</h2>\n<h3 id=\"关于-true-和-false\"><a class=\"anchor\" href=\"#关于-true-和-false\">#</a> 关于 TRUE 和 FALSE</h3>\n<p>在 C99 标准中 添加了 bool 数据类型，多了两个宏  <code>true</code>  和   <code>flase</code> <br />\n 但是 在单片机中 编译器可能不支持 &lt;stdbool.h&gt; 这个头文件，所以可以考虑使用 宏来替代<br />\n例如  <code>#define TRUE  1</code> <br />\n 当然 如果 状态仅仅有 0 1 两种，下面的方法 会更加好一些</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为 0 执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 非 0 执行</span></pre></td></tr></table></figure><p>上面这种方法无需考虑， <code>TRUE</code>  和  <code>FALSE</code>  被 Keil 或者其他 编译器定义了，并且不是正常的数值</p>\n<h3 id=\"浮点的比较\"><a class=\"anchor\" href=\"#浮点的比较\">#</a> 浮点的比较</h3>\n<p>在计算机中，数字都是离散的，所以浮点数的精度也是有限的，浮点变量在进行几次运算后，数值可能就产生了误差<br />\n这时候，对其进行 等价判别必然会产生判。例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">,</span> d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token number\">194268.02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token number\">194268</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    d3 <span class=\"token operator\">=</span> d1 <span class=\"token operator\">-</span> d2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d3 <span class=\"token operator\">></span> d4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d3 <span class=\"token operator\">&lt;</span> d4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=0.02\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f - %f = %f \\n\"</span><span class=\"token punctuation\">,</span> d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果:</p>\n<pre><code>&lt; 0.02\n194268.015625 - 194268.000000 = 0.015625\n</code></pre>\n<p>可以看出数据发生了明显的变化，所以在对浮点数进行比较的时候，务必设定一个精度范围<br />\n误差在这个范围即为相等.<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span> EPSINON<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> EPSINON<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>核心就是: <mark>浮点数都是有精度限制的，所以你存的数，不一定就是你要数</mark></p>\n<h2 id=\"另一个条件分支-switch-case\"><a class=\"anchor\" href=\"#另一个条件分支-switch-case\">#</a> 另一个条件分支: switch case</h2>\n<p>其实在很大程度上  <code>if else</code>  已经够用了，但是为了让逻辑更加清晰，以及便于编译器更好的优化代码<br />\n在看 &lt;深入理解操作系统&gt; 这本书的时候 我对  <code>if else</code>  和  <code>switch case</code>  分别生成的分支语句进行了反汇编<br />\n发现 后者 只有在  <code>case</code>  数量超过 4 的时候才会生成条件 转跳表 这个数据结构<br />\n所以建议是，当条件分支数 &gt; 5 时，设置连续的 case 值，进行分支执行</p>\n<h2 id=\"高深莫测的-const\"><a class=\"anchor\" href=\"#高深莫测的-const\">#</a> 高深莫测的 const</h2>\n<p>定义 const 只读变量，具有不可变性。<br />\nconst 的出现是为了节省空间，取代 预编译指令。但是很显然，取代失败了。毕竟 宏函数 还是很香的<br />\n言归正传，<br />\n 通常来说，编译器不为普通 const 只读变量分配存储空间，而是将它们保存在符号表中，这使<br />\n得它成为一个编译期间的值，没有了存储与读内存的操作，使得它的效率也很高</p>\n<h3 id=\"const-修饰数组\"><a class=\"anchor\" href=\"#const-修饰数组\">#</a> const 修饰数组</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> ary<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>const 修饰的数组为，只读数组，不可修改数组内的元素<br />\n当然 数组名本身也是一个常量指针，所以 const 位于什么位置，对于 数组来说并没有什么区别</p>\n<h3 id=\"const-修饰指针\"><a class=\"anchor\" href=\"#const-修饰指针\">#</a> const 修饰指针</h3>\n<p>对于 指针来说，const 的位置就很关键</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 可变，p 指向的对象不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 可变，p 指向的对象不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 不可变，p 指向的对象可变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针 p 和 p 指向的对象都不可变</span></pre></td></tr></table></figure><p>这一块我就不细讲了，之前记录过，具体细节看这篇博客:<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0MlRTglQUYlQUQlRTglQTglODAlRTYlOEMlODclRTklOTIlODglRTclQUMlOTQlRTglQUUlQjAvQyVFOCVBRiVBRCVFOCVBOCU4MCVFNiU4QyU4NyVFOSU5MiU4OCVFNyVBQyU5NCVFOCVBRSVCMC8=\">( •̀ ω •́ )✧</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 * p,p 是指针，*p 是指针指向的对象，不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 * p,p 是指针，*p 是指针指向的对象，不可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//const 修饰 p, p 不可变，p 指向的对象可变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前一个 const 修饰 * p, 后一个 const 修饰 p, 指针 p 和 p 指向的对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>都不可变</pre></td></tr></table></figure><h3 id=\"const-修饰函数\"><a class=\"anchor\" href=\"#const-修饰函数\">#</a> const 修饰函数</h3>\n<h4 id=\"const-修饰函数参数\"><a class=\"anchor\" href=\"#const-修饰函数参数\">#</a> const 修饰函数参数</h4>\n<p>const 修饰符也可以修饰函数的参数，当不希望这个参数值被函数体内意外改变时使用。例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DATE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>告诉编译器  <code>DATE</code>  在函数体中的不能改变，从而防止了使用者的一些无意的或错误的修改</p>\n<h4 id=\"const-修饰返回值\"><a class=\"anchor\" href=\"#const-修饰返回值\">#</a> const 修饰返回值</h4>\n<p>const 修饰符也可以修饰函数的返回值，返回值不可被改变.<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token function\">Fun</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>在另一连接文件中引用 <span class=\"token keyword\">const</span> 只读变量<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确的声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误！只读变量的值不能改变</span></pre></td></tr></table></figure><h2 id=\"反优化大师-volatile\"><a class=\"anchor\" href=\"#反优化大师-volatile\">#</a> 反优化大师 volatile</h2>\n<p>这个关键字在 非嵌入式平台上十分少用. volatile 的作用是告诉 编译器不对这个变量进行优化，并提供该变量稳定的内存空间.<br />\n 一般来说，在嵌入式中，会存在软延时，例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> timeout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时候如果删除  <code>volatile</code>  可能就会导致 timeout 无法访问，这个函数直接被优化为空，然后延时异常，尤其是在 CCS 上编写 MSP 系列单片机的时候，所有变量都需要加上  <code>volatile</code> .<br />\n 对于这种情况建议是直接 typedef 一下  <code>typedef volatile uint8_t vu8_t;</code>  方便使用，避免重复劳动</p>\n<h2 id=\"跨国护照-extern\"><a class=\"anchor\" href=\"#跨国护照-extern\">#</a> 跨国护照 extern</h2>\n<p>为什么说是跨国护照呢？extern 用于扩大 函数，变量的作用域，当一个变量需要跨文件的时候，就需要，用 extern 来声明，一般放在头文件中.<br />\n 这不就是护照，每个要使用的文件就得包含整个声明，这部就像是签证？<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">GPIO_TypeDef</span> GPIO1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 作用域为包含了这个 头文件的所有文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_WritePin</span><span class=\"token punctuation\">(</span>GPIO_TypeDef <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> pin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_WritePin</span><span class=\"token punctuation\">(</span>GPIO_TypeDef <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> pin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 函数默认为 自带 extern 属性，都为跨文件作用域.</span></pre></td></tr></table></figure><p>需要注意的是，extern 是声明，而非定义。这时候对变量进行增删查改，任何一个操作都会导致程序异常，所以在 extern 某个变量后需要手动 定义一下这个变量，才能对变量进行操作</p>\n<h2 id=\"struct\"><a class=\"anchor\" href=\"#struct\">#</a> struct</h2>\n<p>在我看来，如果 C 的灵魂是指针，那么 struct 就是灵魂的载体，有了 strcut 之后，我们就无需局限在基本数据类型上，可以实现自己的数据类型，实现相关结构体，当然要注意的是，这玩意一般传指针，传结构体过于浪费运存，不建议使用</p>\n<h3 id=\"空结构体大小\"><a class=\"anchor\" href=\"#空结构体大小\">#</a> 空结构体大小</h3>\n<p>这里有一个很有意思的问题，如果一个结构体如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">stu</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>st</pre></td></tr></table></figure><p>那么  <code>sizeof(st)</code>  的大小是多少呢？书中说是 1 , 但我在 vscode + 64 位的 GCC 编译器下 编译出是 0<br />\narm-linux-gnueabihf-gcc-6.2.1 也是 0<br />\n 所以我觉得可能是编译器版本不同，以及 VC6.0 编译器的自带的一些配置才出现这个问题<br />\n PS: 这个问题得先放一放有空再去深究</p>\n<h3 id=\"柔性数组\"><a class=\"anchor\" href=\"#柔性数组\">#</a> 柔性数组</h3>\n<p>C99 中，结构中的最后一个元素允许是未知大小的数组，这就叫做柔性数组成员，但结构中的柔性数组成员前面必须至少一个其他成员<br />\n例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> type_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 使用 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>type_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type_a<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个操作像极了  <code>int *a = new int [100];</code> ,  (间接证明了 C 语言是可以实现 高级语言的一些操作的，只不过会繁琐一些)</p>\n<h3 id=\"类-不类\"><a class=\"anchor\" href=\"#类-不类\">#</a> 类？不类！</h3>\n<p>struct 和 class 的最大区别在于 Class 对数据进行了封装，非 public 下的成员函数和成员变量，无法进行调用或访问<br />\n在 structurt 中，成员函数还是可以使用 函数指针来模拟</p>\n<h2 id=\"勤俭持家小能手-union\"><a class=\"anchor\" href=\"#勤俭持家小能手-union\">#</a> 勤俭持家小能手 union</h2>\n<p>union 与 struct 的用法非常类似。<br />\nunion 维护足够的空间来置放多个数据成员中的 <strong>一种</strong>，而不是为每一个数据成员配置空间<br />\n在 union 中所有的数据成员共用一个空间，同一时间只能储存其中一个数据成员，所有的数据成员具有相同的起始地址。<br />\n例子如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> StateMachine</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> character<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">double</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个 union 只配置一个足够大的空间以来容纳最大长度的数据成员，以上例而言，最大<br />\n长度是 double 型态，所以 StateMachine 的空间大小就是 double 数据类型的大小.<br />\nunion 一般用于 缩减内存大小，当某些数据不会被同时访问的时候可以考虑使用 union</p>\n<h3 id=\"大小端问题\"><a class=\"anchor\" href=\"#大小端问题\">#</a> 大小端问题</h3>\n<ul>\n<li>大端模式（Big_endian）: 字数据的高字节存储在低地址中，而字数据的低字节则存放在高地址中。</li>\n<li>小端模式（Little_endian）: 字数据的高字节存储在高地址中，而字数据的低字节则存放在低地址中</li>\n</ul>\n<p>如何检测大小端:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">short</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> un<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    un<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">0x0102</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 判断这种情况是大端还是小端</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大端模式！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> un<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 判断这种情况是大端还是小端</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小端模式！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"enum-要我有何用\"><a class=\"anchor\" href=\"#enum-要我有何用\">#</a> enum: 要我有何用？</h2>\n<p>一开始学枚举的时候，我也觉得枚举并没有什么作用，因为 宏可以干它能干的事情，后来学了状态机。开始整改代码风格的时候，算是理解了  <code>enum</code>  的作用.</p>\n<h3 id=\"define-和-enum-的区别\"><a class=\"anchor\" href=\"#define-和-enum-的区别\">#</a> #define 和 enum 的区别</h3>\n<ol>\n<li>#define 宏常量是在预编译阶段进行简单替换。枚举常量则是在编译的时候确定其值，这里就注定了，宏不可以被调试</li>\n<li>枚举可以一次定义大量的常量，并且视为一种数据类型，无论是在作为返回值还是作为状态参数的时候，都可以使得代码清晰易懂.</li>\n<li>enum 定义的枚举类型 视为一类状态的集合。例如 rtthread 的 rt_error 枚举。能清晰的标识</li>\n<li>sizeof () 枚举变量是整型大小</li>\n</ol>\n<h2 id=\"nvidia-的同门师兄弟-typdef\"><a class=\"anchor\" href=\"#nvidia-的同门师兄弟-typdef\">#</a> Nvidia 的同门师兄弟 typdef</h2>\n<p>当年的 Nvidia 最喜欢干的就是 套马甲，typedef 也是如此.<br />\ntypedef 在官方 的定义上是不会创造新的数据类型的，那么疑问就来了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">uint16_t</span> ODR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">uint16_t</span> IDR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> GPIO_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种又是什么情况呢？其实这属于定义以一个没有名字的结构体，然后重命名为 GPIO_TypeDef, 故称为 套马甲</p>\n<h3 id=\"又双叒叕是-define\"><a class=\"anchor\" href=\"#又双叒叕是-define\">#</a> 又双叒叕是 #define</h3>\n<p><code>#define</code>  总是 喜欢和 其它关键字抢饭吃。所以大部分 C 语言程序员都离不开 宏定义.<br />\n <code>typedef</code>  和  <code>#define</code>  区别还是那句话， <code>#define</code>  是等效替代.<br />\n <code>typedef</code> ,  <code>static</code> ,  <code>auto</code> ,  <code>register</code>  都属于存储类关键字，所以不能重叠使用，这个时候考虑使用  <code>#define</code>  .<br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INT32</span> <span class=\"token expression\"><span class=\"token keyword\">int</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> INT32 i <span class=\"token operator\">=</span> <span class=\"token number\">10</span>；</pre></td></tr></table></figure><p>有些时候必须得使用  <code>typedef</code> . 例如，在重命名指针数据类型的时候<br />\n <code>#define</code>  格式如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PCHAR</span> <span class=\"token expression\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PCHAR p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//p4 不是指针</span></pre></td></tr></table></figure><p><code>typedef</code>  格式:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pchar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pchar p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>到这重要的关键字总结完毕，以后想起或者遇到什么有趣的应用，再继续完善<br />\n以上 都是本人基于 &lt;&lt;C 语言深度剖析&gt;&gt; 的看法和个人观点，如有不当，恳请斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "学习笔记,C"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E6%B6%82%E9%B8%A6%E9%9D%A2%E8%AF%95/",
            "url": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E6%B6%82%E9%B8%A6%E9%9D%A2%E8%AF%95/",
            "title": "面试锦集-涂鸦面试",
            "date_published": "2021-10-11T08:02:51.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"面试经历\"><a class=\"anchor\" href=\"#面试经历\">#</a> 面试经历</h1>\n<p>真丢脸，上来张嘴就说错了大小端，虽然说后面说对了。基本估计就没啥好印象了.<br />\n 上来先问了一下校园经历，巴拉巴拉说了自己在 ACM、人工智能、Web、ICAN 的经历.<br />\n 然后问了有没有考计算机等级证书 (我突然质疑专业性，不过技术面的感觉还是有很深底子的).<br />\n 问了一下专业骨干课程，计算机就是那几大件，计算机网络，操作系统，组成原理，数据结构<br />\n接着就开始问 C 语言基础知识了，感觉是栽了 (一开始就错了，真丢脸).<br />\n 问了大小端，问了 堆和栈使用的区别 (这里又栽了，全局变量，静态变量存放的位置弄错了), 问了 static 和 const 对变量的影响 (我有点扯多了，整的我好像在背答案).<br />\n 其他的就开始过项目了。让我说一个项目，我分享了一下电磁炮的项目，面试官好像不太感兴趣，就问了一下中断的使用中断的安排.<br />\n 又分享了无线智能节点，面试官问了线程安排和线程管理 (他们似乎对这个很感兴趣), 内存保护，多线程调度，同步等，这一块得好好补一补</p>\n<h1 id=\"知识点总结\"><a class=\"anchor\" href=\"#知识点总结\">#</a> 知识点总结</h1>\n<h2 id=\"大小端\"><a class=\"anchor\" href=\"#大小端\">#</a> 大小端</h2>\n<blockquote>\n<p>小端：低位数据存放在低地址.</p>\n</blockquote>\n<p>记住这一个就好啦，大端相反，以免和我一样，绕进去了<br />\n<strong> PS: 网络流的字节序是大端</strong><br />\n思考一下，为什么要存在大小端.<br />\n 网络中对数据的处理更多的是人指定的协议，对于人来说更加适应大端数据处理的方式，所以网络字节序是大端<br />\n而在机器中使用小端是因为机器不知道高低字节只会按顺序处理，先读第一个字节再读第二个字节依次反复。如果按大端存储就会需要，先读到的就是高位字节，后读到的就是低位字节.<br />\n 还有就是一些历史包袱的缘故导致的两种情况共存</p>\n<h2 id=\"内存分区\"><a class=\"anchor\" href=\"#内存分区\">#</a> 内存分区</h2>\n<h3 id=\"c语言中的内存分区\"><a class=\"anchor\" href=\"#c语言中的内存分区\">#</a> C 语言中的内存分区</h3>\n<table>\n<thead>\n<tr>\n<th>区域</th>\n<th>存放内容</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>栈区</td>\n<td>据补变量值、函数的参数值</td>\n<td>由编译器自动分配释放 FILO</td>\n</tr>\n<tr>\n<td>堆区</td>\n<td>new/malloc 出来的空间</td>\n<td>一般由程序员分配释放，若程序员不是发，程序结束后由 OS 回收。与数据结构中的堆并不一样，分配方式类似于链表</td>\n</tr>\n<tr>\n<td>常数区</td>\n<td>局部变量 / 全局变量的<strong>值</strong></td>\n<td>常量字符串也存放在这里，程序结束后由 OS 释放</td>\n</tr>\n<tr>\n<td>静态区</td>\n<td>全局变量 / 静态变量</td>\n<td>初始化的全局变量和静态变量在一块区域内 ( <code>RW</code> ), 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域 (ZI), 程序结束后由 OS 统一释放</td>\n</tr>\n<tr>\n<td>代码区</td>\n<td>二进制代码</td>\n<td>存放函数体的二进制代码</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 堆中的数据需要用户自行回收，放置内存泄漏<br />\n PS: 静态变量 和 全局变量<br />\n属于静态存储方式的变量不一定是静态变量，例如全局变量属于静态存储，但是不一定是静态变量，必须由  <code>static</code>  修饰的变量才属于静态外部变量，或称静态全局变量.</p>\n<ul>\n<li>局部变量改为静态变量后改变了其存储方式，即改变列生存周期</li>\n<li>全局变量改为静态变量后改变了其作用域，限制了使用范围 (在链接的过程中会体现)</li>\n</ul>\n<h4 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> Global_var <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 全局初始化区</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>Global_Unknown_ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 全局未初始化区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> stack_var<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span> stack_str_buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"ABCD\\0\" 在常量区，stack_str_buf 在栈上</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stack_p2<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stack_str_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"12345\\0\" 在常量区，stack_str_ptr 在栈上</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> static_var<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 全局 (静态) 变量初始化区</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Global_Unknown_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  stack_p2<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 申请到的 10 和 20 字节的空间在堆区</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Global_Unknown_ptr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//\"12345\\0\" 存放在常量区，编译器可能会将它与 stack_str_ptr 所指向的值优化在一个地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>Global_Unknown_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>stack_p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"动静态内存分配\"><a class=\"anchor\" href=\"#动静态内存分配\">#</a> 动 / 静态内存分配</h3>\n<p>程序被加载到内存中，这块内存存在两个属性：静态分配内存和动态分配内存</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>静态分配内存</td>\n<td>在编译和链接的时候就确定好内存</td>\n</tr>\n<tr>\n<td>动态分配内存</td>\n<td>在程序加载、调用、执行的时候分配 / 回收内存</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"内存分区详解\"><a class=\"anchor\" href=\"#内存分区详解\">#</a> 内存分区详解</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>.text</code></td>\n<td style=\"text-align:center\">也称为代码段 (Code), 用户来存放程序执行代码，同时也可能会包含一些常量。该段内存为静态分配，只读。这块内存是共享的，当多个相同进程存在时，公用一个 <code>text</code>  段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.data</code></td>\n<td style=\"text-align:center\">也称为 GVAR (Global value) 用来存放已经初始化的非 0 全局变量。静态分配.  <code>data</code>  又可分配为读写 (RW) 区和只读 (RO) 区.(RO) 区保存常量所以也被称为 <code>.constdata</code> ; RW 则是普通全局非 0 变量，静态变量也存储在其中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.bss</code></td>\n<td style=\"text-align:center\">存放程序中初始化的变量和 0 值全局变量。静态分配，在程序开始通常会被清 0</td>\n</tr>\n</tbody>\n</table>\n<p>这三段内存组成了我们编写的程序本体，但是一个程序想要运行起来，还需要更多的数据以及数据间的交互。否则，这个程序就是一个特例化的程序，不具有通用性，没有价值的死程序.<br />\n 所以程序的运行需为数据交互提供一个平台 —— 堆栈.</p>\n<p>PS:  <code>.text</code>  和  <code>data</code>  段都在可执行文件中，由系统从可执行文件中加载； <code>.bss</code>  段不在可执行文件内，由系统初始化.</p>\n<h3 id=\"堆栈\"><a class=\"anchor\" href=\"#堆栈\">#</a> 堆栈</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">栈</td>\n<td style=\"text-align:center\">存放 Automatic Variable, 按内存生长方向由高到低方向生长，其最大值编译确定 (与编译器相关), 速度快，但自由性差，最大空间不大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">堆</td>\n<td style=\"text-align:center\">自由申请的空间，按内存地址由低向高方向生长，其大小由系统内存 / 虚拟内存上限决定。速度慢，但自由性大，可用空间大</td>\n</tr>\n</tbody>\n</table>\n<p>每个线程都会由自己的栈，但是堆的空间是公用的</p>\n<p>具体内存空间分配如图，地址由下往上生长，分别表示  <code>.text</code> ,  <code>.data</code> ,  <code>bss</code>  内存分布<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211012132911.png\" alt=\"\" /><br />\n堆 (Heap) 往高地址方向生长，栈 (Stack) 往低地址方向生长</p>\n<h2 id=\"cc-中的内存分区\"><a class=\"anchor\" href=\"#cc-中的内存分区\">#</a> C/C++ 中的内存分区</h2>\n<p>在 C/C++ 中，通常可以把内存分为 4 个分区：栈、堆、全局 / 静态存储区和常量存储区</p>\n<h3 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h3>\n<p>通常用于在那些编译器件就可以确定大小的变量，用于在函数作用域内创建，离开作用域后自动销毁变量的存储区。通常是局部变量、函数参数等的存储空间。存储空间是连续的买两个紧密挨着定义的局部变量他们的存储空间也是紧挨着的。栈的大小是有限的，不要定义过大的数组.</p>\n<h3 id=\"堆\"><a class=\"anchor\" href=\"#堆\">#</a> 堆</h3>\n<p>通常是用于编译期间无法确定大小的变量，其存储空间不连续，一般为用户动态开辟，自行释放。如果开辟后没有释放那么就会出现内存泄漏的问题.<br />\n 两个紧挨着的指针，开辟出来的空间不一定是相邻的，内存碎片就是这么产生的.<br />\n 堆的大小几乎不受限制，理论上每个程序最大可达 4GB.</p>\n<h3 id=\"全局静态存储区\"><a class=\"anchor\" href=\"#全局静态存储区\">#</a> 全局 / 静态存储区</h3>\n<p>类似于栈，通常用于那些在编译期间就能确定存储大小的变量，但存储在这的<strong>静态变量</strong>和<strong>全局变量</strong>在程序运行期间是全局可见</p>\n<h3 id=\"常量存储区\"><a class=\"anchor\" href=\"#常量存储区\">#</a> 常量存储区</h3>\n<p>用于在编译期间能确定存储大小的常量，在运行期间，存储区内的常量是全局可见的. <strong>这里要特别明确的是，这是一块只允许存放常量，不允许修改的内存</strong></p>\n<h3 id=\"四区对比\"><a class=\"anchor\" href=\"#四区对比\">#</a> 四区对比</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">比较项</th>\n<th style=\"text-align:center\">栈</th>\n<th style=\"text-align:center\">堆</th>\n<th style=\"text-align:center\">全局 / 静态区</th>\n<th style=\"text-align:center\">常量存储区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">存储内容</td>\n<td style=\"text-align:center\">局部变量</td>\n<td style=\"text-align:center\">变量</td>\n<td style=\"text-align:center\">全局变量、静态变量</td>\n<td style=\"text-align:center\">常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用域</td>\n<td style=\"text-align:center\">函数作用域</td>\n<td style=\"text-align:center\">函数作用域或语句块作用域</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">编译期间大小是否确定</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">大小</td>\n<td style=\"text-align:center\">1MB</td>\n<td style=\"text-align:center\">4GB</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存分配方式</td>\n<td style=\"text-align:center\">地址由高向低减少</td>\n<td style=\"text-align:center\">地址由低向高增加</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">内存是否可修改</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"进程在内存中的映射\"><a class=\"anchor\" href=\"#进程在内存中的映射\">#</a> 进程在内存中的映射</h2>\n<p>若存在如下关系调用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">func_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func_2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">func_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>则当程序载入操作系统中，其对应的内存映射如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>高地址<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span>             <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>              <span class=\"token operator\">|</span>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>略去了一些无关的区域</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> env <span class=\"token function\">string</span> <span class=\"token punctuation\">(</span>环境变量字符串<span class=\"token punctuation\">)</span>      <span class=\"token operator\">|</span>\\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> \\</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span> argv <span class=\"token function\">string</span> <span class=\"token punctuation\">(</span>命令行字符串<span class=\"token punctuation\">)</span>       <span class=\"token operator\">|</span>  \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> env <span class=\"token function\">pointer</span> <span class=\"token punctuation\">(</span>环境变量指针<span class=\"token punctuation\">)</span>       <span class=\"token operator\">|</span>  `SHELL`环境变量和命令行参数保存区</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span> argv <span class=\"token function\">pointer</span> <span class=\"token punctuation\">(</span>命令行参数指针<span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span>  <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token function\">argc</span> <span class=\"token punctuation\">(</span>命令行参数个数<span class=\"token punctuation\">)</span>            <span class=\"token operator\">|</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span>         main 函数的栈帧          <span class=\"token operator\">|</span>\\</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span> \\</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>         func_1 函数栈帧          <span class=\"token operator\">|</span> \\</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   \\</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span>         func_2 函数栈帧          <span class=\"token operator\">|</span>   \\</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>     <span class=\"token function\">stack</span><span class=\"token punctuation\">(</span>栈区<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">|</span>         func_3 函数栈帧          <span class=\"token operator\">|</span>    <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span>   <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span>                                 <span class=\"token operator\">|</span>  <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>               <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">|</span>                                 <span class=\"token operator\">|</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">|</span>         <span class=\"token function\">heap</span> <span class=\"token punctuation\">(</span>堆区<span class=\"token punctuation\">)</span>             <span class=\"token operator\">|</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">|</span>      <span class=\"token function\">Uninitialized</span><span class=\"token punctuation\">(</span>bss<span class=\"token punctuation\">)</span> data    <span class=\"token operator\">|</span> 非初始化数据区</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">|</span>      Initialized data           <span class=\"token operator\">|</span> 初始化数据区</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">|</span>         Text                    <span class=\"token operator\">|</span> 代码区</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">(</span>内存低地址<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"函数的栈帧\"><a class=\"anchor\" href=\"#函数的栈帧\">#</a> 函数的栈帧</h3>\n<p>包含了函数的参数，至于被调用函数的 <strong>参数</strong> 是放在 调用函数的栈帧 还是被调用函数栈帧，则依赖于不同系统的实现.<br />\n 函数的栈帧中的局部变量以及恢复该函数的主调函数的栈帧 (即前一个栈帧) 所需要的数据，包含了主调函数的下一条执行指令的地址<br />\n函数调用时所建立的栈帧包含下面的信息:</p>\n<ol>\n<li>函数的返回地址。返回地址 是存放在 主调函数的栈帧 还是被 调用函数的栈帧 里，取决于不同系统的实现</li>\n<li>主调用函数的帧栈信息，栈底和栈顶</li>\n<li>为函数的局部变量分配栈空间</li>\n<li>为被调用函数的参数分配的空间取决具体的不同系统的系统实现</li>\n</ol>\n<h3 id=\"未初始化数据区bss\"><a class=\"anchor\" href=\"#未初始化数据区bss\">#</a> 未初始化数据区 (BSS)</h3>\n<p>用于存放程序的静态变量，这部分内存都是被初始化为零的；<br />\n 而初始化数据区用于存放可执行文件里的初始化数据.<br />\n 这两个区统称为数据区.</p>\n<p>PS: 并不给该段的数据分配空间，仅仅是记录了数据所需空间的大小</p>\n<h3 id=\"初始化数据区data\"><a class=\"anchor\" href=\"#初始化数据区data\">#</a> 初始化数据区 (Data)</h3>\n<p>初始化数据区用于存放可执行文件里的初始化数据.</p>\n<p>PS: 为数据分配空间，数据保存在目标文件中</p>\n<h3 id=\"代码区text\"><a class=\"anchor\" href=\"#代码区text\">#</a> 代码区 (Text)</h3>\n<p>只读区，存放了程序的代码.<br />\n 任何尝试对该区的写操作会导致段违法出错.<br />\n 代码区是被多个运行该可执行文件的进程所共享的.</p>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>随着函数调用层数的增加，函数栈帧是一块块地向内存低地址方向延伸的<br />\n随着进程中函数调用层数的减少 (即各函数调用的返回), 栈帧会一块块地被遗弃而向内存的高址方向回缩；<br />\n 各函数的栈帧大小随着函数的性质的不同而不等，由函数的局部变量的数目决定；<br />\n 进程对内存的动态申请是发生在 Heap (堆) 里的，随着系统动态分配给进程的内存数量的增加，<strong>Heap (堆) 有可能向高址或低址延伸</strong>，这依赖于不同 CPU 的实现，但一般来说是向内存的高地址方向增长的.<br />\n 在未初始化数据区 (BSS) 或者 Stack (栈区) 的增长耗尽了系统分配给进程的自由内存的情况下，进程将会被阻塞，重新被操作系统用更大的内存模块来调度运行.</p>\n<h2 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> init_global_var <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 全局 RW 区域</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> uninit_global_var<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 全局 ZI 区域</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> init_static_global_var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局 RW 区域</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> uninit_static_global_var<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 全局 ZI 区域</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 定义局部变量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> init_static_local_var <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> uninit_static_local_var<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> init_loacl_val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"😒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 定义字符串常量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"❤\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"(　o=^•ェ•)o　┏━┓\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 动态分配</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 释放</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"栈区: 变量地址================================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var:                                    %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init_loacl_val:                         %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_loacl_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str_arr:                                %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_1:                                  %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_1:                                  %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_2:                                  %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptr_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"堆区: 动态申请地址============================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc_4:                               %p\\n\"</span><span class=\"token punctuation\">,</span> ptr_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc_4:                               %p\\n\\n\"</span><span class=\"token punctuation\">,</span> ptr_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全局区-全局变量和静态变量======================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".bss段----------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全局外部无初值uninit_global_var:        %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uninit_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态外部无初值uninit_static_global_var: %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uninit_static_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部无初值uninit_static_local_var:  %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uninit_static_local_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".data段---------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全局外部有初值init_global_var:          %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态外部有初值init_static_global_var:   %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_static_global_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态内部有初值init_static_local_var:    %p\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>init_static_local_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".文字常量区---------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文字常量地址str1:                       %p\\n\"</span><span class=\"token punctuation\">,</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文字常量地址str2:                       %p\\n\\n\"</span><span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".代码区---------------------------------------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数地址:                               %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数地址:                               %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">int</span> func_var <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数参数                                %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数变量                                %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>func_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*≧︶≦))(￣▽￣* )ゞ\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211014105759.png\" alt=\"Windows\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211014110821.png\" alt=\"Linux\" /></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "面试"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/Linux/Linux%E7%BC%96%E8%AF%91Hello-World/",
            "url": "https://to-ywz.github.io/Embedded/Linux/Linux%E7%BC%96%E8%AF%91Hello-World/",
            "title": "Linux编译Hello World",
            "date_published": "2021-10-07T07:47:58.000Z",
            "content_html": "<h1 id=\"linux-c\"><a class=\"anchor\" href=\"#linux-c\">#</a> Linux C</h1>\n<h2 id=\"gcc-编译链\"><a class=\"anchor\" href=\"#gcc-编译链\">#</a> GCC 编译链</h2>\n<p>GCC 编译链 (toolchain) 是以 GCC 为核心的一整套工具，用于把源码转化为可执行应用程序。主要包括以下三部分:</p>\n<ul>\n<li><code>gcc-core</code>  :  即 GCC 编译器，用于完成预处理和编译的过程.</li>\n<li><code>Binutils</code>  :  除 GCC 编译器外的一些列小工具。包括了 链接器 <code>ld</code> , 汇编器 <code>as</code> , 目标文件格式查看器 <code>readelf</code>  等.</li>\n<li><code>glibc</code>     :  包含了主要的 C 语言标准库函数，C 语言中常常使用的打印函数 <code>printf</code> 、 <code>malloc</code>  函数就在  <code>glibc</code>  库中</li>\n</ul>\n<h3 id=\"gcc编译器\"><a class=\"anchor\" href=\"#gcc编译器\">#</a> GCC 编译器</h3>\n<p>GCC (GUN Compiler Collection) 是由 GUN 开发的编程语言编译器. GCC 最初代表  <code>GNU C Compiler</code> , 当时只支持 C 语言。后来逐渐支持 C++, JAVA 等，GCC 就被重定义为  <code>GNU Compiler Collection</code> , 称为史上最优秀的编译器。其比一般编译器编译器平均效率高出 20%~30%.<br />\n 虽然大部分教程都声明 Ubuntu 默认安装好了 GCC, 我实测出来的都是 没有安装 gcc 的，建议先输入以下命令安装 gcc</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gcc -y</pre></td></tr></table></figure><p>安装完毕后，输入  <code>gcc -v</code>  查看版本信息<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211007173355.png\" alt=\"GCC\" /><br />\n 对于标注进行以下说明</p>\n<ul>\n<li><code>Target:x86_64-linux-gnu</code>  表示该 GCC 的目标平台为 x86_64 架构 (Intel、 AMD 的 CPU), 表示它编译生成的应用程序只适用于 x86 架构，不适用于 ARM 开发板平台.</li>\n<li><code>gcc version 9.3.0</code>  表明该 GCC 的版本为 9.3.0, 部分程序可能会对编译器版本有要求，hello world 程序很简单不需要考虑兼容性。一开始可以不用在乎这个，而编译指定版本的 uboot、 Linux 内核的时候可能会对 GCC 有版本要求</li>\n</ul>\n<h3 id=\"binutils-工具集\"><a class=\"anchor\" href=\"#binutils-工具集\">#</a> Binutils 工具集</h3>\n<p>Binutils（bin utility）, 是 GNU 二进制工具集，通常跟 GCC 编译器一起打包安装到系统，它的官方说明网站地址为:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iaW51dGlscy8=\">https://www.gnu.org/software/binutils/</span><br />\n 在进行程序开发的时候通常不会直接调用这些工具，而是在使用 GCC 编译指令的时候由 GCC 编译器间接调用.<br />\n 下面是其中一些常用的工具:</p>\n<ul>\n<li>as:         汇编器，把汇编语言代码转换为机器码（目标文件）</li>\n<li>ld:         链接器，把编译生成的多个目标文件组织成最终的可执行程序文件</li>\n<li>readelf:    可用于查看目标文件或可执行程序文件的信息</li>\n<li>nm:         可用于查看目标文件中出现的符号</li>\n<li>objcopy:    可用于目标文件格式转换，如.bin 转换成.elf 、 .elf 转换成.bin 等</li>\n<li>objdump:    可用于查看目标文件的信息，最主要的作用是反汇编</li>\n<li>size:       可用于查看目标文件不同部分的尺寸和总尺寸，例如代码段大小、数据段大小、使用的静态内存、总大小等</li>\n</ul>\n<p>系统默认的 Binutils 工具集 位于  <code>/usr/bin</code>  目录下。可以使用如下命令查看</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> /usr/bin/ <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> linux-gun-</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211007174648.png\" alt=\"Binutils\" /></p>\n<h3 id=\"glibc-库\"><a class=\"anchor\" href=\"#glibc-库\">#</a> glibc 库</h3>\n<p><code>glibc</code>  库是 GNU 组织为 GNU 系统以及 Linux 系统编写的 C 语言标准库，因为大部分 C 语言都依赖函数库，该文件甚至会直接影响到系统的正常运行，例如文件操作的  <code>read</code>   <code>write</code>   <code>open</code>  , 标准输出的  <code>printf</code> , 内存管理的  <code>malloc</code>  等</p>\n<p>在 Ubuntu 系统下，libc.so.6 是 glibc 的库文件，可直接执行该库文件查看版本，在主机上执行如下命令:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/lib/x86_64-linux-gun/libc.so.6</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211007175752.png\" alt=\"lib\" /><br />\n 在学习 C 语言的时候很好奇标准库是如何实现的，但是奈何 Window 下的 C 库并不开源.<br />\n 在 Linux 下是开源的，可以直接 glibc 的源代码，甚至可以加入开发社区贡献自己的代码.<br />\nglibc 的官网地址为： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9saWJjLw==\">https://www.gnu.org/software/libc/</span> , 可在该网站中下载源代码来学习.</p>\n<h2 id=\"gcc编译过程\"><a class=\"anchor\" href=\"#gcc编译过程\">#</a> GCC 编译过程</h2>\n<h3 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h3>\n<p>GCC 基本命令如下:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token punctuation\">[</span>-option<span class=\"token punctuation\">]</span> fileName</pre></td></tr></table></figure><p>常用 option:</p>\n<ul>\n<li><code>-o</code> : 小写字母  <code>o</code> , 指定生成可执行文件的名字，不指定的化生成的可执行文件名为  <code>a.out</code></li>\n<li><code>-E</code> : 只进行预处理，不进行编译，也不进行汇编。简单来说就是去除头文件，替代宏定义。生成  <code>.i</code>  文件</li>\n<li><code>-S</code> : 只编译，不汇编。生成的是  <code>.s</code>  汇编文件</li>\n<li><code>-c</code> : 编译并进行汇编，不进行连接。生成  <code>.o</code>  文件</li>\n<li><code>-g</code> : 生成可执行文件待调试信息，便于  <code>gdb</code>  调试</li>\n<li><code>-Ox</code> : 大写字母 <code>O</code>  加数字，设置程序优化等级，例如 <code>-O1</code> ,  <code>-O2</code> ,  <code>-O3</code> , 数字越大的代码优化等级越高，编译出来的程序一般会越小，但是越小的程序约有可能执行异常. ( <code>i++</code>  优化的你都不认识)</li>\n</ul>\n<h3 id=\"编译过程\"><a class=\"anchor\" href=\"#编译过程\">#</a> 编译过程</h3>\n<p>一般来说我们使用  <code>gcc</code>  编译单个文件基本上像这样  <code>gcc hello.c -o hello</code> , 就可以获得到可执行文件  <code>hello.out</code> , 事实上编译是可以分步的。特别是编译多文件的时候，我们会把文件先编译为  <code>.o</code>  文件用于链接，最后才去生成可执行文件.</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 一般来说:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc hello.c -o hello</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 等价于以下步骤</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 预处理</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gcc -E hello.c -o hello.i</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 编译</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>gcc -S hello.i -o hello.s</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 汇编</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>gcc -c hello.s -o hello.o</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 链接</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>gcc hello.o -o Hello</pre></td></tr></table></figure><p>GCC 编译工具链在编译一个 C 源文件时需要经过以下 4 步:</p>\n<ol>\n<li>预处理，在预处理过程中，对源代码文件中的文件包含 (include)、预编译语句 (如宏定义 define 等) 进行<br />\n展开，生成.i 文件。可理解为把头文件的代码、宏之类的内容转换成更纯粹的 C 代码，不过生成的文件<br />\n以.i 为后缀.</li>\n<li>编译，把预处理后的.i 文件通过编译成为汇编语言，生成.s 文件，即把代码从 C 语言转换成汇编语言，<br />\n 这是 GCC 编译器完成的工作.</li>\n<li>汇编，将汇编语言文件经过汇编，生成目标文件.o 文件，每一个源文件都对应一个目标文件。即把汇编<br />\n语言的代码转换成机器码，这是 as 汇编器完成的工作.</li>\n<li>链接，最后将每个源文件对应的.o 文件链接起来，就生成一个可执行程序文件，这是链接器 ld 完成的<br />\n工作</li>\n</ol>\n<h3 id=\"交叉编译工具链\"><a class=\"anchor\" href=\"#交叉编译工具链\">#</a> 交叉编译工具链</h3>\n<p>先来看两个概念:</p>\n<ul>\n<li>本地编译：编译器和目标程序都是相同架构的编译过程</li>\n<li>交叉编译：编译器和目标程程序运行在不同架构下的编译过程</li>\n</ul>\n<p>疑惑吗？交叉编译存在的意义是什么？<br />\n 我们来设想一下，我们在 i.MX6ull 上编译 一个庞大的工程，那么我们就需要一个编译器，还需还对应的工程文件的存储空间，调试空间... 更致命的是，C/C++ 这种项目，随随便便一编译都是好几 s, 这还是在我们性能超强的多核 CPU 上.<br />\n 咱的 ARM 架构的处理器资源和性能都无法和 x86 平台相比。尤其是对于 MCU 连 OS 都不配拥有，和谈编译器。有了交叉编译，我们就可以在 其他平台上使劲霍霍 CPU 了.</p>\n<p>其实 MCU 开发的过程就是交编译，无论是 IAR, CCS 还是 keil 都是在 x86 上开发后下载到板子里然后执行.<br />\n<strong>PS: 能进行架构 &quot;交叉&quot; 编译的编译器被称为交叉编译器 (Corss Compiler)</strong></p>\n<h4 id=\"编译链安装\"><a class=\"anchor\" href=\"#编译链安装\">#</a> 编译链安装</h4>\n<p>Linux 下:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gcc-arm-linux-gnueabihf -y</pre></td></tr></table></figure><p>查看一下版本 和 相关编译链<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211008213347.png\" alt=\"arm\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211008213509.png\" alt=\"version\" /></p>\n<p>使用  <code>readelf -a hello</code>  查看 可执行文件信息<br />\n x86 架构<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211008214155.png\" alt=\"x86_64\" /><br />\nARM 架构<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211008214030.png\" alt=\"ARM\" /></p>\n<h3 id=\"编译器选择\"><a class=\"anchor\" href=\"#编译器选择\">#</a> 编译器选择</h3>\n<p>除了我们安装的版本之外，编译器还有很多版本。目前来说大部分 ARM 开发者使用的都是由 Linaro 组织提供的交叉编译器，包括前面 APT 安装的 ARM-GCC 工具链也是来源于 Linaero.<br />\nLinaro 是由 ARM 公司发起，与其他 ARM SOC 公司共同投资的非盈利组织.<br />\nARM 交叉编译链可以在这里找到:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWxlYXNlcy5saW5hcm8ub3JnL2NvbXBvbmVudHMvdG9vbGNoYWluL2JpbmFyaWVzLw==\"> 传送门</span><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211009092521.png\" alt=\"version\" /> <img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211009092751.png\" alt=\"os\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211009093104.png\" alt=\"platform\" /></p>\n<p>虽然编译器的命名没有严格的规则，但他们的名字中一般包含我们最为关心的内容，可以根据名字来选择要使用的编译器:<br />\n <code>arch [-os] [-(gun)eabi(hf)] -gcc</code> <br />\n 其中各段文字意义如下表所示.<br />\nGCC 命名格式:</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arch</td>\n<td>目标芯片</td>\n</tr>\n<tr>\n<td>gnu</td>\n<td>C 标准库类型</td>\n</tr>\n<tr>\n<td>eabi</td>\n<td>应用二进制接口</td>\n</tr>\n<tr>\n<td>hf</td>\n<td>浮点模式</td>\n</tr>\n</tbody>\n</table>\n<p>以  <code>arm-linux-gnueabihf-gcc</code>  编译器为例来分析一下.</p>\n<ul>\n<li>arm:    芯片架构为 ARM</li>\n<li>linux:  目标操作系统为 Linux</li>\n<li>gnu:    使用 GNU 的 C 语言标准库即 glibc</li>\n<li>eabi:   使用嵌入式应用二进制接口 (eabi)</li>\n<li>hf:     编译器浮点模式为硬浮点 hard-float.<br />\n 相对于 <code>arm-linux-gnueabi-gcc</code>  查遍仅仅在于是否使携带  <code>hf</code> , 像 M3 内核的处理器就不能使用 <code>hf</code> , 其本身不带  <code>fpu</code></li>\n</ul>\n<h4 id=\"相关字段详细说明\"><a class=\"anchor\" href=\"#相关字段详细说明\">#</a> 相关字段详细说明</h4>\n<h5 id=\"目标芯片架构\"><a class=\"anchor\" href=\"#目标芯片架构\">#</a> 目标芯片架构</h5>\n<p>目标芯片架构就是指交叉编译生成的程序运行的平台，如 ARM、MIPS, 其中 ARM 交叉编译又分为 ARMv7、ARMv8 以及 aarch64 架构.<br />\ni.MX6ull 的内核为 Cortex-A7, 使用的是 ARMv7 架构.</p>\n<h5 id=\"大小端\"><a class=\"anchor\" href=\"#大小端\">#</a> 大小端</h5>\n<p>指目标芯片的大小端模式，i.MX6ull 使用的是小端模式，若是大端模式 (big edian), 编译器名字中会带  <code>be</code>  或 <code>eb</code>  字段进行标注</p>\n<h5 id=\"目标操作系统\"><a class=\"anchor\" href=\"#目标操作系统\">#</a> 目标操作系统</h5>\n<p>目标操作系统表示编译后程序运行的系统，主要由 Linux 或 bare-metal (裸机) 两种， <code>arm-linux-guneabigcc</code>  表示它的进程目标运行环境为 linux, 程序可以使用 linux 下的 C 标准库或 Linux 内核提供的 API, 例如 fork 等进程函数。而  <code>arm-eabi-gcc</code>  或  <code>arm-none-eabi-gcc</code>  表示它们的目标程序运行在无操作系统的环境中.<br />\n 严格来说，编译 Linux 应用程序时应该使用带 <code>linux</code>  的编译器，而编译  <code>uboot</code> 、裸机程序时，应该使用  <code>bare-metal</code>  类型的裸机编译器.</p>\n<h5 id=\"c-标准库\"><a class=\"anchor\" href=\"#c-标准库\">#</a> C 标准库</h5>\n<p>C 标准库一般 gnu、uglibc 等，分别表示 GNU 的 glibc 和 uclibc 库. C 库取决于系统，不过二者是相互兼容的，基本不需要特别注意。除了裸机开发之外不带 c 库，其他编译器 c 库都是 glibc 的库.</p>\n<h5 id=\"应用二进制接口\"><a class=\"anchor\" href=\"#应用二进制接口\">#</a> 应用二进制接口</h5>\n<p>应用二进制接口 (Application Binary Interface), 描述了应用程序和操作系统之间或其他应用程序的低级接口.<br />\n 在编译器中主要有  <code>abi</code>  和  <code>eabi</code>  两种类型， <code>abi</code>  通常应用在 x86 架构上，而  <code>eabi</code>  表示  <code>emabi abi</code> , 即嵌入式架构，如 ARM、MIPS 等</p>\n<h5 id=\"浮点模式\"><a class=\"anchor\" href=\"#浮点模式\">#</a> 浮点模式</h5>\n<p>部分 ARM 处理器带浮点运算单元，代码需要进行浮点运算时若交给  <code>fpu</code>  处理，可以加快运算速度。编译器针对浮点运算的不同处理情况提供了以下几种模式:</p>\n<ul>\n<li>hard: 硬件浮点类型 (hard-float), 采用  <code>fpu</code>  参与浮点运算.</li>\n<li>soft: 软浮点类型 (soft-float), 即使有  <code>fpu</code>  运算单元也不使用，使用软件模拟</li>\n<li>softfp: 允许使用浮点指令，但是保持与软浮点 ABI 的兼容性</li>\n</ul>\n<p>PS: ABI 即 <code>application binary interface</code> , 即编译器将 c 代码编译成汇编代码时使用的一种规则</p>\n<h3 id=\"不同编译器对程序的影响\"><a class=\"anchor\" href=\"#不同编译器对程序的影响\">#</a> 不同编译器对程序的影响</h3>\n<p>这里主要测试一下软浮点编译的动态编译和静态编译<br />\n先来理解一下两个概念：</p>\n<ul>\n<li>静态链接：在编译阶段就会把所有用到的库打包到自己的可执行程序中，其优点是具有较好的兼容性，不依赖外部环境，但是生成的程序比较大.</li>\n<li>动态链接：在应用程序运行时，链接器去加载外部的共享库，并完成共享库和动态编译程序之间的链接。不同的程序可以共用代码库，节省内存空间.</li>\n</ul>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "学习笔记",
                "Linux",
                "Linux"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/Linux/Ubuntu20-04%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/",
            "url": "https://to-ywz.github.io/Embedded/Linux/Ubuntu20-04%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/",
            "title": "Ubuntu20.04安装中文输入法",
            "date_published": "2021-10-03T09:14:16.000Z",
            "content_html": "<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>因为个人不喜欢搜狗输入法，windows 用的也是微软自带的输入法，比较不喜花里胡哨的输入法界面。故选择了谷歌输入法</p>\n<h1 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h1>\n<h2 id=\"安装-fcitx\"><a class=\"anchor\" href=\"#安装-fcitx\">#</a> 安装  <code>Fcitx</code></h2>\n<p>谷歌输入法是基于  <code>Fcitx</code>  输入法的。所以我们需要先安装  <code>Fcitx</code> .<br />\n 在  <code>shell</code>  中输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fcitx</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/fcitx.png\" alt=\"fcitx\" /></p>\n<h2 id=\"配置-fcitx\"><a class=\"anchor\" href=\"#配置-fcitx\">#</a> 配置  <code>Fcitx</code></h2>\n<p>在  <code>shell</code>  中 输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>im-config</pre></td></tr></table></figure><p>会出现下面这种情况，开启输入法配置窗口<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110031726765.png\" alt=\"\" /><br />\n点击 OK 后，会窗口如下 (可能要点击两次)<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110031727179.png\" alt=\"\" /><br />\n 选择其中的  <code>fcitx</code> , 然后选择 ok , 完成配置基本环境</p>\n<p><strong>PS: 环境变量配置完毕后，重启操作系统</strong></p>\n<h1 id=\"安装谷歌输入法\"><a class=\"anchor\" href=\"#安装谷歌输入法\">#</a> 安装谷歌输入法</h1>\n<p>在命令行中输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> fcitx-googlepinyin -y</pre></td></tr></table></figure><p>安装完毕后输入以下命令行配置谷歌输入法</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fcitx-config-gtk3</pre></td></tr></table></figure><p>出现界面如下<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110031747059.png\" alt=\"\" /><br />\n点击 <code>+</code>  号，在弹出的界面取消勾选<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110031752053.png\" alt=\"\" /><br />\n拉到最后找到谷歌拼音选项<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110031753588.png\" alt=\"\" /><br />\n选择后点击 ok 至此，我们就可以愉快的使用中文输入法了</p>\n<p>PS: 如果想要关闭  <code>shift</code>  切换输入法，在下面的  <code>Extra for trigger input method</code>  中选择  <code>Disabled</code>  即可<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110031758028.png\" alt=\"\" /></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "学习笔记",
                "Linux",
                "Ubuntu"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/Linux/linux%E5%AD%A6%E4%B9%A0/",
            "url": "https://to-ywz.github.io/Embedded/Linux/linux%E5%AD%A6%E4%B9%A0/",
            "title": "linux学习",
            "date_published": "2021-10-03T09:09:33.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"linux-基础知识\"><a class=\"anchor\" href=\"#linux-基础知识\">#</a> Linux 基础知识</h1>\n<h2 id=\"what-is-命令\"><a class=\"anchor\" href=\"#what-is-命令\">#</a> what is 命令</h2>\n<p>所谓的命令就是在环境变量下的一堆可执行文件，所谓的  <code>ls</code> ,  <code>cd</code> ,  <code>pwd</code> ,  <code>which</code>  等命令其实就是系统自带的可执行文件</p>\n<p>其实我们所写的源文件在便也后也是可执行文件，但是问什么只能在当前路径执行呢？</p>\n<p>这里就涉及到了一个比较熟悉而又陌生的名词: <strong>环境变量.</strong></p>\n<p>什么是环境变量呢？所谓的环境变量就是可执行文件所在的文件夹路径的集合</p>\n<p>例如 linux 中在命令行中输入  <code>echo $PATH</code>  就可以输出 Linux 可执行文件的路径集合<br />\n如图:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110041022574.png\" alt=\"PATH\" /><br />\n <code>$PATH</code>  是中断使用的路径变量，使用  <code>:</code>  来分隔，表示 Shell 将会在这些路径下寻找命令程序，在其中我们 可以看到  <code>/bin</code>  目录.<br />\n 即  <code>$PATH</code>  内置了这些路径环境变量，而命令的本质大都是在文件系统中的一些应用程序.</p>\n<h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<h3 id=\"cd\"><a class=\"anchor\" href=\"#cd\">#</a> cd</h3>\n<h4 id=\"命令格式\"><a class=\"anchor\" href=\"#命令格式\">#</a> 命令格式:</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h4>\n<p>上面的  <code>path</code>  为目录名称。路径可以是 相对路径 或者 绝对路径；也可以不填写，默认返回到用户目录<br />\n相对路径为，当前终端打开的位置<br />\n如图:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211004210553.png\" alt=\"相对路径\" /></p>\n<h4 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /home/user/Desktop <span class=\"token comment\"># 进入桌面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> Desktop            <span class=\"token comment\"># 效果和上面一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span>                    <span class=\"token comment\"># 返回当前用户目录</span></pre></td></tr></table></figure><p>效果如下:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211004210837.png\" alt=\"cd基本用法\" /></p>\n<h4 id=\"特殊命令表示\"><a class=\"anchor\" href=\"#特殊命令表示\">#</a> 特殊命令表示</h4>\n<ul>\n<li><code>~</code> :  表示当前为用户的 <code>home</code>  目录</li>\n<li><code>.</code> :  表示当前目录</li>\n<li><code>..</code> : 当前目录的上一级目录</li>\n<li><code>/</code> :  表示根目录</li>\n<li><code>-</code> :  非目录，返回上次所在目录</li>\n</ul>\n<h3 id=\"mkdir\"><a class=\"anchor\" href=\"#mkdir\">#</a> mkdir</h3>\n<h4 id=\"命令格式-2\"><a class=\"anchor\" href=\"#命令格式-2\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>-p<span class=\"token punctuation\">]</span> 目录名</pre></td></tr></table></figure><h4 id=\"功能-2\"><a class=\"anchor\" href=\"#功能-2\">#</a> 功能</h4>\n<p>目录名：要创建的目录路径.<br />\n <code>-p</code>  :  可缺省，使用时表示，当路径名不存在时，创建当前目录包含上级的目录</p>\n<h4 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> Desktop/Test</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> Desktop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> Desktop/Test_A/CC/DD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> Desktop</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> Desktop/Test_A/CC/DD</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005093153.png\" alt=\"mkdir\" /></p>\n<h3 id=\"touch\"><a class=\"anchor\" href=\"#touch\">#</a> touch</h3>\n<h4 id=\"命令格式-3\"><a class=\"anchor\" href=\"#命令格式-3\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> fileName</pre></td></tr></table></figure><h4 id=\"功能-3\"><a class=\"anchor\" href=\"#功能-3\">#</a> 功能</h4>\n<p><code>touch</code>  命令可以创建不存在的文件，或者  <code>touch</code>  通过参数修改目录或文件的日期时间<br />\n例如</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> main.c</pre></td></tr></table></figure><h3 id=\"ls\"><a class=\"anchor\" href=\"#ls\">#</a> ls</h3>\n<h4 id=\"命令格式-4\"><a class=\"anchor\" href=\"#命令格式-4\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Folder<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"功能-4\"><a class=\"anchor\" href=\"#功能-4\">#</a> 功能</h4>\n<p><code>ls</code>  是  <code>list</code>  的缩写，用于显示指定目录下的内容 (文件及其子文件), 内容包括文件大小，修改日期等详细参数<br />\n <code>Folder</code> : 目录，缺省时默认显示当前目录下内容<br />\n <code>option</code> : 可缺省，使用会改变，显示方式，显示内容，具体参数如下</p>\n<ul>\n<li>-a: 显示文件及其目录 (ls 内定将文件名或目录名以 <code>.</code>  开头的文件视为隐藏，不会列出)</li>\n<li>-l: 列出除文件名，文件形态，权限，拥有者，文件大小等详细参数</li>\n<li>-t: 按顺序显示文件</li>\n<li>-A: 与  <code>-a</code>  相同，但是不会列出 <code>.</code> (当前目录) 和  <code>..</code> (父目录)</li>\n<li>-R: 若目录下有文件，则一起显示，即诋毁显示</li>\n</ul>\n<h4 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> -a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ls</span> -A</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> -l -t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ls</span> -l -R -t   <span class=\"token comment\"># 可多个参数累加</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005111606.png\" alt=\"single_parameter\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005111359.png\" alt=\"多参数\" /></p>\n<h4 id=\"补充说明\"><a class=\"anchor\" href=\"#补充说明\">#</a> 补充说明</h4>\n<p><strong> <code>ls -l</code>  各个字段有着各自的含义</strong></p>\n<ul>\n<li>\n<p>第一字段：文件属性<br />\n文件属性以共 10 字符，第一个字符表示文件类型， <code>-</code>  表示普通文件； <code>d</code>  表示目录.<br />\n 后面的 9 个字符 3 个为一组，分别表示：文件拥有者的权限，文件所属拥有的权限，其他用户的权限。<br />\n <code>r</code>  表示读， <code>w</code>  表示写， <code>x</code>  表示执行</p>\n</li>\n<li>\n<p>第二字段：链接占用的节点 / 子目录个数<br />\n主要取决该文件的类型。如果是文件的话，则表示该文件所具有的硬连接数。某个文件的第二字段如果等于 1 的话，代表没有其他指向该文件的硬连接.</p>\n</li>\n<li>\n<p>第三、四字段：拥有者和文件所在组<br />\n Linux 为多用户系统，每个文件都有自己的拥有者。一般来说只有文件的拥有者才有 第一字段后九个字符所赋予的操作权。当然作为上帝用户的 root 拥有修改所有文件的权限</p>\n</li>\n<li>\n<p>第五字段：文件所占用的空间 (字节)</p>\n</li>\n<li>\n<p>第六字段：最近访问 (修改) 时间</p>\n</li>\n<li>\n<p>第七字段：文件 / 文件夹名称</p>\n</li>\n</ul>\n<p><strong>Linux 的链接方式</strong></p>\n<p>在 Linux 中链接的方式分为两种，分别是硬链接和软链接 (符号链接).<br />\n 软连接，类似于 Windows 操作系统的快捷方式.<br />\n 硬链接，则是将文件复制一份，同时连带自动更新.<br />\n 当我们修改了硬链接文件的内容，源文件也会被修改。当为某个文件创建硬链接时，第二字段的值便会加 1.<br />\n 可以使用 ln 命令创建软链接和硬链接</p>\n<h3 id=\"cat\"><a class=\"anchor\" href=\"#cat\">#</a> cat</h3>\n<h4 id=\"命令格式-5\"><a class=\"anchor\" href=\"#命令格式-5\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> fileName</pre></td></tr></table></figure><h4 id=\"功能-5\"><a class=\"anchor\" href=\"#功能-5\">#</a> 功能</h4>\n<p>cat 命令是 concatenate 的简写，译为串联。即它可以把两个内容串联起来，我们通常使用它在终端下输出文<br />\n件的内容进行查看</p>\n<h4 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> main.c</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005164236.png\" alt=\"cat\" /></p>\n<h3 id=\"echo\"><a class=\"anchor\" href=\"#echo\">#</a> echo</h3>\n<h4 id=\"命令格式-6\"><a class=\"anchor\" href=\"#命令格式-6\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"string\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> string</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$variable</span></pre></td></tr></table></figure><h4 id=\"功能-6\"><a class=\"anchor\" href=\"#功能-6\">#</a> 功能</h4>\n<p>在终端中输出一段文字，或打印终端变量。在输出 字符串的时候  <code>echo &quot;string&quot;</code>  和  <code>echo string</code>  效果一致</p>\n<h4 id=\"例子-5\"><a class=\"anchor\" href=\"#例子-5\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"嘿嘿嘿\"</span>   <span class=\"token comment\"># 输出字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> 嘿嘿嘿     <span class=\"token comment\"># 输出字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>      <span class=\"token comment\"># 输出环境变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token environment constant\">$PATH</span>\"</span>    <span class=\"token comment\"># 输出环境变量</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005171118.png\" alt=\"shell\" /></p>\n<h4 id=\"重定向输出\"><a class=\"anchor\" href=\"#重定向输出\">#</a> 重定向输出</h4>\n<p><code>echo</code>  命令输出的结果无一例外都是在终端显示，在一些时候我们还是需要将输出结果保存在文件中方便我们对问题进行分析.<br />\n 如果在 Windows 上写过 BAT 脚本，那么就会很自然的想到重定向出到文件的控制符  <code>&gt;</code>  和  <code>&gt;&gt;</code> ,  <code>&gt;</code>  会把输出的消息覆盖， <code>&gt;&gt;</code>  会追加到源文件的末尾<br />\n格式如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> cc <span class=\"token operator\">></span> log.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> DD <span class=\"token operator\">>></span> log.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> CCCC <span class=\"token operator\">></span> log.txt</pre></td></tr></table></figure><p>如图:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005173036.png\" alt=\"重定向\" /></p>\n<h3 id=\"rmdir\"><a class=\"anchor\" href=\"#rmdir\">#</a> rmdir</h3>\n<h4 id=\"命令格式-7\"><a class=\"anchor\" href=\"#命令格式-7\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rmdir</span> <span class=\"token punctuation\">[</span>-p<span class=\"token punctuation\">]</span> 文件名</pre></td></tr></table></figure><h4 id=\"功能-7\"><a class=\"anchor\" href=\"#功能-7\">#</a> 功能</h4>\n<p><code>rmdir</code>  命令是 remove directory 的简写，它的功能是删除空的目录.<br />\n <code>-p</code> : 可缺省。如果使用，可以用来递归删除目录，即当删除当前目录时，其删除后父目录也为空则会连同父目录一起删除，可递归</p>\n<h4 id=\"例子-6\"><a class=\"anchor\" href=\"#例子-6\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rmdir</span> Test_A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rmdir</span> -p Test_A/CC/DD/</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005173946.png\" alt=\"rmdir\" /></p>\n<h3 id=\"rm\"><a class=\"anchor\" href=\"#rm\">#</a> rm</h3>\n<h4 id=\"命令格式-8\"><a class=\"anchor\" href=\"#命令格式-8\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>-option<span class=\"token punctuation\">]</span> file, file2, file3, <span class=\"token punctuation\">..</span>. / FolderName</pre></td></tr></table></figure><h4 id=\"功能-8\"><a class=\"anchor\" href=\"#功能-8\">#</a> 功能</h4>\n<p><code>rm</code>  命令是 remove 的简写，它的功能是删除一个或多个文件或目录.<br />\n 被  <code>rm</code>  命令删除的文件不会被放入回收站，直接永久删除。所谓的删库跑路这个梗中的命令就职这个.<br />\n <code>-option</code> :</p>\n<ul>\n<li><code>-i</code> : 删除文件或文件夹前逐一确认</li>\n<li><code>-r</code> : 将删除目录及其子目录或文件一并删除</li>\n<li><code>-f</code> : 忽略不存在的文件，直接删除，不进行询问</li>\n</ul>\n<h4 id=\"例子-7\"><a class=\"anchor\" href=\"#例子-7\">#</a> 例子</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token number\">1</span>.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rm</span> -i <span class=\"token number\">2</span>.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rm</span> -rf CC</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005174955.png\" alt=\"rm\" /><br />\n 测试时一定要小心，不要误删</p>\n<h3 id=\"man\"><a class=\"anchor\" href=\"#man\">#</a> man</h3>\n<h4 id=\"命令格式-9\"><a class=\"anchor\" href=\"#命令格式-9\">#</a> 命令格式</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">man</span> <span class=\"token punctuation\">[</span>要查询的内容<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"功能-9\"><a class=\"anchor\" href=\"#功能-9\">#</a> 功能</h4>\n<p>用于查询之类用法。我们可以记不住任何指令的参数，但是不能不熟悉这个  <code>man</code> <br />\n <code>man man</code>  可以查看  <code>man</code>  自己的使用方法<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211005175656.png\" alt=\"man\" /><br />\n 可以查询到的内容就在框内</p>\n<h2 id=\"软件包管理\"><a class=\"anchor\" href=\"#软件包管理\">#</a> 软件包管理</h2>\n<h3 id=\"deb-包-dpkg和apt\"><a class=\"anchor\" href=\"#deb-包-dpkg和apt\">#</a>  <code>deb</code>  包、 <code>dpkg</code>  和 <code>apt</code></h3>\n<p>在 Debian 和 Ubuntu 等 Linux 发行版本中，通常使用  <code>deb</code>  形式的软件包.<br />\n 若下载了 deb 软件包，可使用如下命令进行安装，其中 xxxx.deb 为要安装的软件包的名字</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> dpkg -i xxxx.deb</pre></td></tr></table></figure><p>命令中的  <code>dpkg</code>  (Debian Packager) 是 Debian 专门开发的包管理工具，它可以用来安装、更新和移除软件，安装时它需要使用  <code>deb</code>  类型的软件包.</p>\n<p><code>dpkg</code>  是一个底层的包管理工具，主要用于对已下载到本地和已经安装的软件包进行管理.<br />\n 在它之上的  <code>apt</code>  (Advanced Package Tool) 包管理工具，其功能则更加丰富和方便使用，使用  <code>apt</code>  能够自动从互联网的软件仓<br />\n库中搜索、安装、升级、卸载软件，它会咨询软件仓库，并能安装软件时的模块及依赖问题.</p>\n<pre><code>sudo apt-get install 软件名\n</code></pre>\n<p>简单来说， <code>deb</code>  是软件包， <code>dpkg</code>  是安装工具， <code>apt</code>  是自动安装工具.</p>\n<h3 id=\"apt-工具的使用\"><a class=\"anchor\" href=\"#apt-工具的使用\">#</a> apt 工具的使用</h3>\n<p>Ubuntu 的管理工具包为  <code>apt</code>  工具， <code>apt</code>  工具包含如下内容:</p>\n<ul>\n<li>apt-get   工具：负责软件包的安装，卸载，更新</li>\n<li>apt-cache 工具：查询软件包相关信息</li>\n<li>apt-config 工具：用于适配所有 apt 工具的使用</li>\n</ul>\n<h4 id=\"安装软件\"><a class=\"anchor\" href=\"#安装软件\">#</a> 安装软件</h4>\n<p><code>sudo apt-get install 软件包名</code></p>\n<h4 id=\"卸载软件\"><a class=\"anchor\" href=\"#卸载软件\">#</a> 卸载软件</h4>\n<p><code>sudo apt-get remove 软件包名</code></p>\n<h4 id=\"直接使用-apt\"><a class=\"anchor\" href=\"#直接使用-apt\">#</a> 直接使用 apt</h4>\n<p>前面说过  <code>apt</code>  有很多功能，但是我们很少使用，所以官方推出了  <code>apt</code>  命令.<br />\n 使用  <code>apt</code>  集众家之所长，而且在安装和卸载 软件时会有进度条显示</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>apt install</code></td>\n<td>安装指定的软件包</td>\n</tr>\n<tr>\n<td><code>apt remove</code></td>\n<td>卸载指定的软件包</td>\n</tr>\n<tr>\n<td><code>apt update</code></td>\n<td>更新源列表</td>\n</tr>\n<tr>\n<td><code>apt search</code></td>\n<td>根据关键字搜索对应的软件包</td>\n</tr>\n<tr>\n<td><code>apt show</code></td>\n<td>显示软件包的相关信息</td>\n</tr>\n<tr>\n<td><code>apt list</code></td>\n<td>根据名称列出所有软件包</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"编辑器\"><a class=\"anchor\" href=\"#编辑器\">#</a> 编辑器</h2>\n<h3 id=\"gedit\"><a class=\"anchor\" href=\"#gedit\">#</a> gedit</h3>\n<p><code>gedit</code>  是在 Ubuntu 系统下的地位就如同 Windows 系统下的记事本软件，它的功能不算强大，但因为是系统自<br />\n带的，说不上什么时候我们就会图方便使用它用来轻度编辑和记录一些内容，这要比  <code>Vi</code>  或者  <code>Vim</code>  上手更为容易</p>\n<h3 id=\"vscode\"><a class=\"anchor\" href=\"#vscode\">#</a> vscode</h3>\n<p>这个时 微软公司推出 轻量级编辑器，堪称微软最大的良心之作，居家旅程必备神器.</p>\n<h3 id=\"vim\"><a class=\"anchor\" href=\"#vim\">#</a> vim</h3>\n<p>这是 在 linux 最久远的编辑器，可以放弃鼠标来实现各种快速编码.<br />\n 在这里就不详细列举相关命令了，感兴趣的可以点击这里自行查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTgxNDQtMS5odG1s\">传送门</span></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "学习笔记",
                "Linux",
                "linux"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/communication-protocol/IIC/",
            "url": "https://to-ywz.github.io/Embedded/communication-protocol/IIC/",
            "title": "IIC 协议备忘",
            "date_published": "2021-10-01T05:27:27.000Z",
            "content_html": "<h2 id=\"起源\"><a class=\"anchor\" href=\"#起源\">#</a> 起源</h2>\n<p>I2C 支持设备之间短距离通信，用于处理器和外设之间，只需要两根线来完成信息交互. I2C 出现于飞利浦公司，开始只允许 100kHz, 7-bit 标准地址。直到 1992 年，I2C 第一个公共规范，增加了 400kHz 的快速模式和 10-bit 扩展地址.<br />\n 在 I2C 的基础上，1995 年 Intel 提出了 SMBus 用于低速设备通信，SMBus 把时钟频率限制在 <strong>10KHz~100KHz</strong>, 但目前的 I2C 可以支持 0KHz~5MHz 的外设:</p>\n<ul>\n<li>普通模式          100KHz</li>\n<li>快速模式 (Fm)      400KHz</li>\n<li>快速模式 +(Fm+)    1MHz</li>\n<li>高速模式 (Hs)      3.4MHz</li>\n<li>超高速模式 (UFm)   5MHz<br />\nPS: 基于 IIC 是 Master 于 Slave 模式，故两者间的通信要保持时钟的一致，<strong>IIC 为串行同步半双工</strong></li>\n</ul>\n<h2 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h2>\n<p>IIC 适用于外围设备，其简单性和低制造成本比速度更重要. I2C 总线的常简应用包括:</p>\n<ul>\n<li>通过小型 BOM 配置表描述可连接设备，以实现 &quot;即插即用&quot; 操作，例如:\n<ol>\n<li>双列直插内存模块 (DIMM) 上的串行存在检测 EEPROM</li>\n<li>通过 VGA, DVI 和 HDMI 连接器为显示器提供扩展显示识别数据 (EDID)</li>\n</ol>\n</li>\n<li>通过 SMBus 对 PC 系统进行系统管理\n<ol>\n<li>SMBus 引脚分配在常规 PCI 和 PCI Express 连接器中</li>\n</ol>\n</li>\n<li>访问保持用户设置的实时时钟和 NVRAM 芯片</li>\n<li>访问低俗 DAC 和 ADC</li>\n<li>更改显示器中的对比度，色调和色彩平衡设置 (通过显示数据通道)</li>\n<li>改变智能扬声器的音量</li>\n<li>控制小型 (例如功能手机) OLED 或 LCD 显示器</li>\n<li>读取硬件监视器和诊断传感器，例如风扇的速度</li>\n<li>打开和关闭系统组件的电源</li>\n</ul>\n<h2 id=\"协议概述\"><a class=\"anchor\" href=\"#协议概述\">#</a> 协议概述</h2>\n<p>I2C 协议把传输的消息分为两种类型的帧:</p>\n<ul>\n<li>地址帧    用于 Master 和 Slave 建立连接</li>\n<li>数据帧    由 Master 发往 Slave 的数据 (也可能是 Slave 发送给 Master 的数据), 一帧 8-bit.</li>\n</ul>\n<p><strong>PS: 通常我们所说的 IIC 读写是相对于 Master 来说的</strong></p>\n<p>SCL 产生下降沿后，数据在 SDA 上传输.<br />\nSCL 产生上升沿后，在 SDA 上对电平进行采样，转化为数据<br />\n<strong> PS: 时钟边沿和数据读 / 写之间的时间由总线上的器件定义，并在芯片和芯片之间会有所不同</strong></p>\n<h3 id=\"iic-写入\"><a class=\"anchor\" href=\"#iic-写入\">#</a> IIC 写入</h3>\n<ol>\n<li>Master 发送起始信号</li>\n<li>Master 发送从机地址 (7bit) 和写操作位 (1bit), 等待 ACK</li>\n<li>Slave  发送 ACK</li>\n<li>Master 发送寄存器地址，等待 ACK</li>\n<li>Slave  发送 ACK</li>\n<li>Master 发送 Data (8bit), 要写入寄存器中的数据，等待 ACK</li>\n<li>Slave  发送 ACK</li>\n<li>Master 发送停止信号<br />\n<strong> PS: 6 7 步可以重复多次，即顺序写入多个寄存器</strong></li>\n</ol>\n<h3 id=\"iic-读取\"><a class=\"anchor\" href=\"#iic-读取\">#</a> IIC 读取</h3>\n<ol>\n<li>Master 发送起始信号</li>\n<li>Master 发送从机地址 (7bit) 和 写操作 (1bit), 等待 ACK</li>\n<li>Master 发送寄存器地址 (8-bit), 等待 ACK</li>\n<li>Slave  发送 ACK</li>\n<li>Master 发送起始信号</li>\n<li>Master 发送 I2C 地址 (7-bit) 和 读操作 (1bit), 等待 ACK</li>\n<li>Slave  发送 ACK</li>\n<li>Slave  发送 数据 (8-bit), 要读出的寄存器中的值</li>\n<li>Master 发送 ACK (连续读取)/NACK (终止读取)</li>\n<li>Master 发送停止信号<br />\n 8 和 9 可以重复多次，顺序读取多个寄存器<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080221.png\" alt=\"\" /></li>\n</ol>\n<h2 id=\"协议详解\"><a class=\"anchor\" href=\"#协议详解\">#</a> 协议详解</h2>\n<h3 id=\"起始信号\"><a class=\"anchor\" href=\"#起始信号\">#</a> 起始信号</h3>\n<p>官方规定，当 SCL 线为高电平，且 SDA 出现下降沿时，表示 Master 与 Slave 开始通信。开始信号发出后，所有的 IIC 总线上所有的 Slave 都会接收到开始信号，准备与主机进行连接.</p>\n<p><strong>PS: 如果存在两个 Master 希望一次获得总线的所有权限，则无论哪一个设备将 SDA 拉低，第一个拉低 SDA 的 Master 将获得对总线的控制权</strong><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080237.png\" alt=\"\" /></p>\n<h3 id=\"地址帧\"><a class=\"anchor\" href=\"#地址帧\">#</a> 地址帧</h3>\n<p>无论是读操作还是写操作，地址帧是第一次要发送的数据。对于 7-bit 地址来说，地址帧先输出最高有效位，然后输出读写位 (1 读 0 写).</p>\n<p>地址帧的第 9 位是 NACK/ACK 位，当然所有帧都是这种格式。当接受设备收到发送帧的前 8 位，接受设备就可以控制 SDA 来产生一次应答。如果接收设备在第 9 个时钟脉冲之前没有将 SDA 拉低，则代表接受设备没有收到数据或者无法解析数据，也有可能是没有从机。这种情况下，Master 就需要进行超时处理.<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080248.png\" alt=\"\" /></p>\n<h3 id=\"数据帧\"><a class=\"anchor\" href=\"#数据帧\">#</a> 数据帧</h3>\n<p>发送地址帧之后，可以开始传输数据. Master 将以恒定的间隔继续生成时钟，数据由 Master 或 Slave 放置在 SDA 商进行传输。读和写具体决定于 R/W 位的指示。数据的总数是任意的，并且大部分器件将自动递增内部寄存器，这意味着后续读取或写入将来自下一个寄存器.<br />\n 写多个寄存器<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080306.png\" alt=\"\" /><br />\n读多个寄存器<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080322.png\" alt=\"\" /><br />\n读写混合操作<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080332.png\" alt=\"\" /></p>\n<h3 id=\"停止信号\"><a class=\"anchor\" href=\"#停止信号\">#</a> 停止信号</h3>\n<p>一旦发送了所有数据帧，主设备将生成停止信号。停止信号由 SCL 产生一个上升沿后，SDA 产生一个上升沿定义，SCL 保持高电平。在正常的数据写操作时，SDA 上的值应该不会当 SCL 为高电平改变，以避免错误的停止条件</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<h3 id=\"硬件iic\"><a class=\"anchor\" href=\"#硬件iic\">#</a> 硬件 IIC</h3>\n<p>以 STM32F401 为例:<br />\n 正常版本</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//iic 写数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">HAL_I2C_Master_Transmit</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">//iic 读数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">HAL_I2C_Master_Receive</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">// 发送多个字节</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token function\">HAL_I2C_Mem_Write</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// 读取多个字节</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Mem_Read</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>PS: 使用 <code>HAL_I2C_Mem_Write</code>  等于先使用 <code>HAL_I2C_Master_Transmit</code>  传输第一个寄存器地址，再用 <code>HAL_I2C_Master_Transmit</code>  传输写入第一个寄存器的数据</strong></p>\n<p>中断版本</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 中断写入单字节</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Master_Transmit_IT</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 中断读取单字节</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Master_Receive_IT</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 中断写入多字节</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Mem_Read_IT</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 中断读取多字节</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Mem_Write_IT</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>DMA 版本</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Mem_Read_DMA</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Mem_Write_DMA</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> MemAddSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Master_Transmit_DMA</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_I2C_Master_Receive_DMA</span><span class=\"token punctuation\">(</span>I2C_HandleTypeDef <span class=\"token operator\">*</span>hi2c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> DevAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>pData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"软件-iic\"><a class=\"anchor\" href=\"#软件-iic\">#</a> 软件 IIC</h3>\n<h4 id=\"起始信号-2\"><a class=\"anchor\" href=\"#起始信号-2\">#</a> 起始信号</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">IIC_Start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIIC_SDA_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIIC_SCL_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIIC_SDA_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tIIC_SCL_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"停止信号-2\"><a class=\"anchor\" href=\"#停止信号-2\">#</a> 停止信号</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">IIC_Stop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIIC_SCL_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIIC_SDA_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIIC_SCL_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tIIC_SDA_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"等待应答\"><a class=\"anchor\" href=\"#等待应答\">#</a> 等待应答</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token function\">I2C_WaiteAck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIIC_SDA_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIIC_SCL_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>OLED_GPIO_PORT_I2C<span class=\"token operator\">-></span>IDR <span class=\"token operator\">&amp;</span> OLED_I2C_SDA_PIN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token function\">IIC_Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tIIC_SCL_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"发送一个字节\"><a class=\"anchor\" href=\"#发送一个字节\">#</a> 发送一个字节</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">IIC_Send_Byte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> IIC_Byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIIC_SCL_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IIC_Byte <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tIIC_SDA_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tIIC_SDA_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tIIC_Byte <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tIIC_SCL_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须有保持 SCL 脉冲的延时</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tIIC_SCL_CLS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">delay_us</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 原程序这里有一个拉高 SDA，根据 OLED 的要求，此句必须去掉。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// IIC_SDA_SET;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// IIC_SCL_SET;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// delay_us(1);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// IIC_SCL_CLS;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"写入数据帧\"><a class=\"anchor\" href=\"#写入数据帧\">#</a> 写入数据帧</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">I2C_WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">IIC_Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">IIC_Send_Byte</span><span class=\"token punctuation\">(</span>OLED_ADDRESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">I2C_WaiteAck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">IIC_Send_Byte</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//write data</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">I2C_WaiteAck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">IIC_Send_Byte</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">I2C_WaiteAck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">IIC_Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"关于软件iic的重构\"><a class=\"anchor\" href=\"#关于软件iic的重构\">#</a> 关于软件 IIC 的重构</h2>\n<p>Black Sheep 于 2021/12/17 8:11 修改</p>\n<p>有没有感觉到软件 iic 让人感觉到很不适应，移植的时候虽然说改几个宏定义即可，但是总感觉还是欠些什么.<br />\n 例如，eeprom、oled、ADC 等一系列 IIC 的驱动设备，抽象 ADT 的时候，目前的 iic 永远只能是一个底层函数，组成 read 和 write 函数，无法像硬件设备那样作为一个对象放置在结构体中<br />\n所以我在试着把软件 iic 抽象成出一个通用的 ADT.</p>\n<h3 id=\"对数据结构的思考\"><a class=\"anchor\" href=\"#对数据结构的思考\">#</a> 对数据结构的思考</h3>\n<p>个人觉得类似于 C 来说，本身是一个面向过程的语言，要用于实现面向对象的编程会较为繁杂一些，而且需要一定的 C 语言底子.<br />\n 一般来说 一个基础类会分为 成员对象 和 成员函数，成员对象一般记录 对象的固有属性，成员函数往往被称为方法，用于实现对成员的操作.<br />\n 在 C 语言 中我们 对应的使用 结构体来代替 class , 用字段来描述 对象的属性，用函数指针来充当方法.<br />\n 所以在 C 语言一般 ADT 一般以这种形式出现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxxObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 属性字段</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> attr_xx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> attr_yy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> attr_zz<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>op1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">xxx_op1_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>op2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">xxx_op2_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>op3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">xxx_op3_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>基于这种想法我就有了，重构 iic 的想法</p>\n<h3 id=\"对于-iic-的对象的构建\"><a class=\"anchor\" href=\"#对于-iic-的对象的构建\">#</a> 对于 IIC 的对象的构建</h3>\n<p>对于一个 软件 iic 一般来说会有什么呢？<br />\nSCL, SDA? 不不不，那都是最基本物理硬件而已。在我看来，IIC 更多的是 电平的变化，而不是某个引脚.<br />\n 从之前的代码里可以看到，IIC 的 SCL 和 SDA 的操作才是 IIC 的固有的特性.<br />\n 这次 我打算将物理层和应用层之间割裂开来，做一层驱动层.<br />\n 通过上面的思考就有了结构体的第一版</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">softwareI2C</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_SCLPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_SDAPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>read_SDAPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>除了这些还有什么呢？钳位，IIC 为了保持电平会有一定的延时时间，这个电平的保持时间也决定了 IIC 的通信速率，不同的从机设备会有不同速率的要求.<br />\n 虽然 模拟 iic 无法提高极限速率但是还是可以调整最低速率的<br />\n所以还得有一个 延时函数和一个延时的周期<br />\n所以 第二稿的结构体就诞生了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SimuI2CObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> period<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_SCLPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_SDAPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>read_SDAPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>delayus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>IIC 的基本类型就抽象出来了，但是我还是感觉 uint8_t 通用性不够强，所以放置了一些枚举变量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// I2C 引脚状态值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SimuI2CPinValue</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tSimuI2CPin_Set <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tSimuI2CPin_Reset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>SimuI2CPin_Set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SimuI2CPinValue</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// IIC 通信状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SimuI2CStatus</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  I2C_OK<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  I2C_ERROR<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  I2C_PARAMRTER_INVAIL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SimuI2CStatus<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据上面的枚举变量我们来就得到了  <code>SimuI2CObject</code>  结构体的最终版本</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SimuI2CObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> period<span class=\"token punctuation\">;</span>                                    <span class=\"token comment\">// I2C 传输速率 (Range:0~400K, Default: 100K)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> timeOut<span class=\"token punctuation\">;</span>                                   <span class=\"token comment\">// ACK 超时时间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_SCLPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SimuI2CPinValue_t op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// SCL 电平操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>set_SDAPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SimuI2CPinValue_t op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// SDA 电平操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>read_SDAPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// SDA 读取数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>DelayUs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// I2C 延时函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SimuI2CObject_t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些代码都会在最后一起贴出来</p>\n<h3 id=\"初始化函数\"><a class=\"anchor\" href=\"#初始化函数\">#</a> 初始化函数</h3>\n<p>在面向对象的语言里这一步由构造函数完成，而对于 C 而言，我们需要手动调用.<br />\n 当然在这之前我们需要先声明几个类型，用简化参数声明</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>SimuI2CPinOPfunc_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SimuI2CPinValue_t op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// SDA, SCL 电平操作函数指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>SimuI2CReadfunc_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// SDA 读取电平函数指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">simuI2CDelayusfunc_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// I2C 延时函数指针</span></pre></td></tr></table></figure><p>初始化函数的作用是 配置相关属性，本地方法到对象中。所以 初始化函数的参数需要包含 大部分需要自定义的属性</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SimuI2C_Initialization</span><span class=\"token punctuation\">(</span>SimuI2CObject_t         <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// I2C 结构体实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                            <span class=\"token class-name\">uint32_t</span>                speed<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// I2C 传输速率</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            SimuI2CPinOPfunc_t      setSCL<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// SCL 电平操作函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                            SimuI2CPinOPfunc_t      setSDA<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// SDA 电平操作函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                            SimuI2CReadfunc_t       readSDA<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// SDA 读取数据函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                            <span class=\"token class-name\">simuI2CDelayusfunc_t</span>    delayus         <span class=\"token comment\">// I2C 延时函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>相对而言 初始化的函数无非就是赋值的过程实现起来会比其他接口函数更为简单</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief               I2C 初始化</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance      I2C 结构体实例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param speed         I2C 传输速率</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param setSCL        SCL 电平操作函数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param setSDA        SDA 电平操作函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @param readSDA       SDA 读取数据函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @param delayus       I2C 延时函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @retval              初始化状态</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SimuI2CStatus <span class=\"token function\">SimuI2C_Initialization</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                            <span class=\"token class-name\">uint32_t</span> speed<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                            SimuI2CPinOPfunc_t setSCL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                            SimuI2CPinOPfunc_t setSDA<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            SimuI2CReadfunc_t readSDA<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token class-name\">simuI2CDelayusfunc_t</span> delayus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 参数检测</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>Instance <span class=\"token operator\">&amp;&amp;</span> setSCL <span class=\"token operator\">&amp;&amp;</span> setSDA <span class=\"token operator\">&amp;&amp;</span> readSDA <span class=\"token operator\">&amp;&amp;</span> delayus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> I2C_PARAMRTER_INVAIL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Instance<span class=\"token operator\">-></span>setSCLPin <span class=\"token operator\">=</span> setSCL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Instance<span class=\"token operator\">-></span>setSDAPin <span class=\"token operator\">=</span> setSDA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Instance<span class=\"token operator\">-></span>read_SDAPin <span class=\"token operator\">=</span> readSDA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    Instance<span class=\"token operator\">-></span>DelayUs <span class=\"token operator\">=</span> delayus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Instance<span class=\"token operator\">-></span>timeOut <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speed <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> speed <span class=\"token operator\">&lt;=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 延时时长，500 非固定值自行计算</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        Instance<span class=\"token operator\">-></span>period <span class=\"token operator\">=</span> <span class=\"token number\">500</span> <span class=\"token operator\">/</span> speed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 默认 100 k</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        Instance<span class=\"token operator\">-></span>period <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 拉高总线，使处于空闲状态</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> I2C_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至于底层的高低电平变化，gpio 配置等，应该属于 bsp 的初始化或者是 gpio 的 ADT 的任务，而非 iic 的特性.</p>\n<h3 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h3>\n<p>IIC 用的最多的 对应用层的接口是什么呢？<br />\n 毫无疑问是读写，所以对外的接口只需要由 下面几个即可<br />\n有些时候会有 读写混合操作，所以我这里多留了一个接口</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SimuI2CStatus_t <span class=\"token function\">WriteDataBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t  <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// I2C 结构体实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>    deviceAddress<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// I2C 驱动设备地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>    <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// I2C 写数据数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                   <span class=\"token class-name\">uint16_t</span>         size            <span class=\"token comment\">// I2C 写数据大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SimuI2CStatus_t <span class=\"token function\">ReadDataBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t  <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// I2C 结构体实例</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>   deviceAddress<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// I2C 驱动设备地址</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>   <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span>           <span class=\"token comment\">// I2C 读数据数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                   <span class=\"token class-name\">uint16_t</span>         size            <span class=\"token comment\">// I2C 读数据大小</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SimuI2CStatus_t <span class=\"token function\">WriteReadDataBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t  <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// I2C 结构体实例</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                       <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>    deviceAddress<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// I2C 驱动设备地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                       <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>    <span class=\"token operator\">*</span>wData<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// I2C 写数据数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                       <span class=\"token class-name\">uint16_t</span>         wSize<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// I2C 写数据大小</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                       <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>    <span class=\"token operator\">*</span>rData<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// I2C 读数据数组</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                       <span class=\"token class-name\">uint16_t</span>         rSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// I2C 读数据大小</span></pre></td></tr></table></figure><p>由于逻辑上面也说过了，这里就不重复啰嗦了</p>\n<h4 id=\"读数据\"><a class=\"anchor\" href=\"#读数据\">#</a> 读数据</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief                   I2C 读数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance          I2C 结构体实例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param deviceAddress     I2C 驱动设备地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param data              I2C 读数据数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param size              I2C 读数据大小</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @retval                  I2C 通信状态</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SimuI2CStatus_t <span class=\"token function\">ReadDataBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> deviceAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                  <span class=\"token class-name\">uint16_t</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 启动通信</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">SimuI2CStart</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 发送地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> deviceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> Instance<span class=\"token operator\">-></span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">recieveByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        data<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">SimuI2C_NAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token function\">SimuI2C_Ack</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> I2C_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"写数据\"><a class=\"anchor\" href=\"#写数据\">#</a> 写数据</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief                   I2C 写数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance          I2C 结构体实例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param deviceAddress     I2C 驱动设备地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param data              I2C 写数据数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param size              I2C 写数据大小</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @retval                  I2C 通信状态</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SimuI2CStatus_t <span class=\"token function\">WriteDataBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> deviceAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                   <span class=\"token class-name\">uint16_t</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 起始信号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">SimuI2CStart</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 发送地址</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> deviceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> Instance<span class=\"token operator\">-></span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> Instance<span class=\"token operator\">-></span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        data<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">SimuI2CStop</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> I2C_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"读写数据混合\"><a class=\"anchor\" href=\"#读写数据混合\">#</a> 读写数据混合</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief                   I2C 读写混合操作</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance          I2C 结构体实例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param deviceAddress     I2C 驱动设备地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param wData             I2C 写数据数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param wSize             I2C 写数据大小</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @param rData             I2C 读数据数组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @param rSize             I2C 读数据大小</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @retval                  I2C 通信状态</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SimuI2CStatus_t <span class=\"token function\">WriteReadDataBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                       <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> deviceAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                       <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>wData<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                       <span class=\"token class-name\">uint16_t</span> wSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                       <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rData<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                       <span class=\"token class-name\">uint16_t</span> rSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 启动 通信</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">SimuI2CStart</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> deviceAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> Instance<span class=\"token operator\">-></span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>wSize<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>wData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> Instance<span class=\"token operator\">-></span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 再启动</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">SimuI2CStart</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> deviceAddress<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 写</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">,</span> Instance<span class=\"token operator\">-></span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rSize<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token operator\">*</span>rData <span class=\"token operator\">=</span> <span class=\"token function\">recieveByteBySimuI2C</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\\</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        rData<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token function\">SimuI2C_NAck</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token function\">SimuI2C_Ack</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// I2C 通信停止</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">SimuI2CStop</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> I2C_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"iic-基础函数\"><a class=\"anchor\" href=\"#iic-基础函数\">#</a> IIC 基础函数</h3>\n<p>这里 我们会去实现 IIC 的  <code>start</code> ,  <code>stop</code> ,  <code>waitAck</code> ,  <code>ACK</code> ,  <code>NACK</code> ,  <code>sendByte</code> ,  <code>readByte</code>  等函数<br />\n这里需要注意:<br />\n<strong>I2C 除 STOP 每个阶段跳变 SCL 都处于低电平，否则会被视为发送结束</strong></p>\n<h4 id=\"起始信号-3\"><a class=\"anchor\" href=\"#起始信号-3\">#</a> 起始信号</h4>\n<p>这里需要注意一下的就是 SCL 的钳位，保持电平，出发送信号</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 起始信号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SimuI2CStart</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 释放总线</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 开始信号，SDA 下降沿</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 钳住 SCL 准备发送数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结束信号\"><a class=\"anchor\" href=\"#结束信号\">#</a> 结束信号</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 终止信号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SimuI2CStop</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// I2C 拉低 SCL 允许 SDA 电平变化</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"等待应答-2\"><a class=\"anchor\" href=\"#等待应答-2\">#</a> 等待应答</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 等待应答</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param timeOut   应答超时时间</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @retval          I2C_OK:     收到应答</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *                  I2C_ER:  未收到应答信号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">static</span> SimuI2CStatus_t <span class=\"token function\">SimuI2CWaitAck</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> timeOut<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 当 SCL 低电平，SDA 拉高，拉高 SCL</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 检测 SDA 是否为低电平</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拉高 SDA</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 拉高 SCL</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span><span class=\"token function\">read_SDAPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>timeOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">SimuI2CStop</span><span class=\"token punctuation\">(</span>Instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 异常直接 Stop</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> I2C_ER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// I2C 阶段跳变 SCL 默认拉低</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> I2C_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"产生应答\"><a class=\"anchor\" href=\"#产生应答\">#</a> 产生应答</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 应答信号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SimuI2C_Ack</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// SCL 低，SDA 低，SCL 高，SCL 低</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"产生nack\"><a class=\"anchor\" href=\"#产生nack\">#</a> 产生 NAck</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 非应答信号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SimuI2C_NAck</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// SCL 低，SDA 高，SCL 高，SCL 低</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    Instance->SetSCLPin(I2C_PIN_RESET);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// SDA 拉高产生，NACK</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 发送 1bit 数据 注意是 bit 不是 Byte</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"发送一个字节-2\"><a class=\"anchor\" href=\"#发送一个字节-2\">#</a> 发送一个字节</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 发送一个字节</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param byte      发送的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendByteBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 拉低 SCL 准备传输数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 逐位发送，模拟移位发送器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>byte <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        byte <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据左移一位</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 发送数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"读一个字节\"><a class=\"anchor\" href=\"#读一个字节\">#</a> 读一个字节</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief           I2C 读一个字节</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param Instance  I2C 实例结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @retval          读到的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token function\">recieveByteBySimuI2C</span><span class=\"token punctuation\">(</span>SimuI2CObject_t <span class=\"token operator\">*</span>Instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> receive <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Instance<span class=\"token operator\">-></span><span class=\"token function\">setSDAPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 读各个位</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        receive <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 判断是 1 则 累加，最低为置位和 ++ 效果一致</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span><span class=\"token function\">read_SDAPin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            receive<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">setSCLPin</span><span class=\"token punctuation\">(</span>I2C_PIN_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Instance<span class=\"token operator\">-></span><span class=\"token function\">DelayUs</span><span class=\"token punctuation\">(</span>Instance<span class=\"token operator\">-></span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> receive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一些想法\"><a class=\"anchor\" href=\"#一些想法\">#</a> 一些想法</h2>\n<p>其实两种实现本质上没有什么区别，甚至可以说第一种看上去会更加简洁，深得 C 语言设计核心，简洁高效<br />\n但是对我来说，第一种方法在想在应用层去继续实现抽象的话会很麻烦.<br />\n 例如 oled, 抽象的时候就必须在抽出一层特有的 iic 结构体作为父类，或者放一个 write 指针到 oled 中，写 iic.<br />\n 这种风格不是我希望看见的，虽然我现在没有很好的分层的思想，但是终究分层的实现一个设备类耦合度会低很多很多的，而且重构会更加方便.<br />\n 虽然说单片机就那点功能，没有必要搞那么多花里胡哨的的东西.<br />\n 但是毕竟代码毕竟是给人的，出问题了重构还是自己来搞，所以无论是什么的代码都还是需要认认真真的去编写.<br />\n 对待代码，对待产品是需要有敬畏之心的.</p>\n<p>PS: 关于新实现的 iic 的代码我会尽快上传到 github 和 Gitee 上，并且尽快对 oled 项目的软件 iic 进行重构</p>\n<h2 id=\"相关项目\"><a class=\"anchor\" href=\"#相关项目\">#</a> 相关项目</h2>\n<p>oled 驱动包含 软硬件 IIC 和 DMA 传输，基于 HAL 库实现<br />\n Github 链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvLXl3ei9PTEVEX0RldmljZQ==\">https://github.com/to-ywz/OLED_Device</span></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "通信协议",
                "协议"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E4%B8%99%E7%94%B2%E7%A7%91%E6%8A%80/",
            "url": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E4%B8%99%E7%94%B2%E7%A7%91%E6%8A%80/",
            "title": "面试锦集(一)——丙甲科技",
            "date_published": "2021-09-27T01:44:37.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>作为一个四非二本末流师范院校的工科专业的学生，给大厂投简历的都不如树叶落水，一丝波纹都没有.<br />\n 大厂 HR 们一看院校就直接 pass 了，除非走内推，像我着这种大厂基本就没什么希望.<br />\n 从 9 月 15 号开始投，直到现在还是 0 offer, 这还是我第一次面试 (╯_╰).<br />\n 就感叹一下，下面的经历，诸位就当看个笑话就好.</p>\n<h1 id=\"面试经历\"><a class=\"anchor\" href=\"#面试经历\">#</a> 面试经历</h1>\n<h2 id=\"hr-面\"><a class=\"anchor\" href=\"#hr-面\">#</a> hr 面</h2>\n<p>hr 给我打电话的时候，我正在做 智能涂鸦 的性格测试，做完之后发现有一个未接电话没当回事。当时以为是快递电话，因为前几天中通丢件了，说是要给我下午 5 点会打电话，当时差不多 5 点 (是真的巧). 然后我直接打回去了，显示的是杭州，我楞了一下 (因为一直都没有接到过面试).<br />\n 电话通了之后 对面的小姐姐说:&quot;您是？&quot;, 我愣了一下说了句:&quot;是你们给我，打电话的&quot;. 然后对面就明白了，然后，然后就开始了猝不及防的 hr 面，以至于我最后连他们是哪个公司都不知道的情况下结束了 hr 面 (´。＿。｀).<br />\n 最后我还是厚着脸皮问了是哪个公司つ﹏⊂.<br />\n 值得庆幸的是 hr 也是个新手，大家都是第一次。所以也还好，真就是什么样的人遇上什么样的 hr (狗头)<br />\n 不过总体来说 丙甲的 hr 还是很棒的，非常非常温柔和客气，非常 nice.<br />\n 总体是问了 为什么走选择嵌入式，对嵌入式的看法，能不能接受杭州的环境，什么时候能实习以及安排了一下 技术面的时间</p>\n<h2 id=\"技术面\"><a class=\"anchor\" href=\"#技术面\">#</a> 技术面</h2>\n<p>技术面总体感觉没有问什么特别细的东西，就大致问了问各个项目，可能也是我投的是实习的缘故.</p>\n<p>这次技术面在项目上有几个地方把我问住了<br />\n第一个是 TCP/IP 协议有没有自定义协议，我愣了一下没反应过来说了个没有。我当时以为是说，有没有自己形成 类似于 http、C0AP 之类的协议.<br />\n 第二个是 KMP 算法，时间太久真的没想明白，就记得从下次不是一个个往后跳，连  <code>next</code>  数组都忘了<br />\n第三个是 状态机的问题，问我在垃圾桶识别的时候用什么控制，我当时以为问的是 轮询，前后台 和 RTOS, 结果我没有<br />\n第四个是 数字滤波算法，我一直以为 iir 能用电路实现，显然不能，不过 iir 可以用 FPGA 实现的，问了我为什么要用 iir, 我答了手头能实现和体现出来的效果就是这样的。感觉除了 认为 iir 可以硬件实现之外都么有什么问题<br />\n第五个是 PID 算法，问了一下 PID 和 位置式 PID 的区别，我当时第一反应是就是两个是一样的，后面他说还是有些不同的在积分环节上。我才回过神来，位置式 PID 是直接使用 PD 环的，不使用 积分环节，积分环节会导致</p>\n<p>然后就问了一下 C 语言 的问题:<br />\n 第一个是  <code>static</code>  加在全局变量前面的作用。我当时楞了一下，然后反应过来了是限制作用域，因为全局变量本身就是静态存储，加不加 static 并没有什么区别，但是在链接的时候，如果没有  <code>static</code>  那么这个在链接的时候就会和其他文件里的同名变量冲突<br />\n第二个是  <code>#define</code>  和  <code>const</code>  的区别。这个还是比较简单的，最简单的一个就是  <code>const</code>  定义的常量在编译过程中实现的，在内存中存在空间的， <code>#define</code>  定义的常量在预编译过程中完成替换，在内存中没有空间。还有一些细节上的东西我当时没打上来<br />\n第三个是  <code>memmove</code>  和  <code>memcpy</code>  的区别。这个真的是把我问懵了，因为用的少愣是想了很久了，这里主要是内存重叠的问题，主在 copy 过程中会出现 源地址 会和 起始地址重叠</p>\n<p>整体来说，还是第一次面试的原因，过于紧张，基础知识不够牢固，对 c 库函数的不熟悉</p>\n<h1 id=\"知识点总结\"><a class=\"anchor\" href=\"#知识点总结\">#</a> 知识点总结</h1>\n<h2 id=\"tcpip\"><a class=\"anchor\" href=\"#tcpip\">#</a> TCP/IP</h2>\n<h3 id=\"网络模型\"><a class=\"anchor\" href=\"#网络模型\">#</a> 网络模型</h3>\n<h4 id=\"iso-七层网络模型\"><a class=\"anchor\" href=\"#iso-七层网络模型\">#</a> ISO 七层网络模型:</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n<th>典型服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>所有能和用户交互产生网络流量的程序</td>\n<td>FTP、SMTP、HTTP</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>用于处理两个系统中</td>\n<td>ASCII、JPEG</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>向表示层 / 用户层进程提供建立连接并在连接上有序的传输数据.(也被称为同步)</td>\n<td>ADSP、ASP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>负责主机之间的通信，端到端的通信，传输单位：报文段 / 数据报</td>\n<td>TCP、UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>把分组从源端传输到目的端，分组交换网络的不同主机所提供的通信服务。单位是数据报</td>\n<td>IP、IPx、ICMP、ARP、OSPF</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>把网络层数据组装成帧，单位为数据帧</td>\n<td>SDLC、HDLC、PPP、STP</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>在物理介质上实现网络传输 单位 bit</td>\n<td>RJ45、802.3</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/Snipaste_2021-09-28_16-16-27.png\" alt=\"ISO\" /></p>\n<h4 id=\"五层网络模型\"><a class=\"anchor\" href=\"#五层网络模型\">#</a> 五层网络模型</h4>\n<p>应用层、传输层、网络层、数据链路层、物理层</p>\n<h4 id=\"tcpip网络模型\"><a class=\"anchor\" href=\"#tcpip网络模型\">#</a> TCP/IP 网络模型</h4>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/Snipaste_2021-09-28_16-16-44.png\" alt=\"TCP/IP\" /></p>\n<h2 id=\"kmp算法\"><a class=\"anchor\" href=\"#kmp算法\">#</a> KMP 算法</h2>\n<p>KMP 算法最大特点在于，利用以匹配完成的信息进行转跳<br />\n转跳方式依赖于  <code>next</code>  数组， <code>next</code>  实现的方法是通过 计算最大真前缀长度实现的.<br />\n 具体可以参考这篇博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGFrZXItY29kZS9wLzExNTc4MzE5Lmh0bWw=\">传送门</span></p>\n<h2 id=\"iir-应用\"><a class=\"anchor\" href=\"#iir-应用\">#</a> IIR 应用</h2>\n<p>人体心电信号中常带有工频干扰 (50HZ)、基线漂移 (频率低于 0.5Hz) 和肌电干扰等各种噪声</p>\n<h3 id=\"基线漂移\"><a class=\"anchor\" href=\"#基线漂移\">#</a> 基线漂移</h3>\n<p>基线漂移一般由于信号采集时呼吸及人体移动造成的，表现为低频率的缓慢变化噪声，其频率一般小于 0.5Hz.<br />\n 基线滤波的一个主要问题是滤波后会对 ST 段产生影响，由于基线频率与 ST 段的频率很接近，如果滤波器选择不好的话，有可能会导致 ST 段发生改变.<br />\n 由于 ST 段是判断心肌梗死，心肌缺血等疾病的主要参数之一，滤波导致的 ST 段改变是不能接受的<br />\n美国心脏协会 (AHA) 推荐在使用非线性相移的 IIR 滤波器时，其截止频率最高为 0.05Hz, 使用具有线性相移的 FIR 滤波器时，截止频率最高可以到 0.67Hz, 对应 40 的心率</p>\n<h3 id=\"零相位的基线滤波\"><a class=\"anchor\" href=\"#零相位的基线滤波\">#</a> 零相位的基线滤波</h3>\n<p>在使用 IIR 实现线性相位的滤波器应用中，有一类特殊的滤波器 — 零相位滤波器.<br />\n 该滤波器通过前向和后向两次滤波，实现零相移，保证了 ST 段不失真。相对于 FIR 的高阶次导致较多运算量来说，零相移滤波器能实现较低的运算次数。但零相移也有一个较为致命的缺点，由于存在后向滤波，所以需要全部数据采集完成后，才可以进行第二次滤波，这样导致了在实时环境中无法使用</p>\n<h3 id=\"肌电干扰\"><a class=\"anchor\" href=\"#肌电干扰\">#</a> 肌电干扰</h3>\n<p>肌电干扰属于高频信号，一般在实际中，采用截止频率为 20Hz、30Hz 和 40Hz 的低通滤波器进行滤除</p>\n<h2 id=\"static-用法\"><a class=\"anchor\" href=\"#static-用法\">#</a> static 用法</h2>\n<p>限制作用域，存储方式变为静态存储</p>\n<ol>\n<li>修饰全局变量，限制作用域。在链接过程中，多文件中的重名变量不会冲突.</li>\n<li>修饰局部变量，延长生命周期，存储方式变为静态存储只进行一次初始化.</li>\n<li>修饰函数，限制函数作用域，局限在文件内部。在连接过程中避免和多文件中同名函数冲突</li>\n</ol>\n<h2 id=\"define-和-const-的区别\"><a class=\"anchor\" href=\"#define-和-const-的区别\">#</a>  <code>#define</code>  和  <code>const</code>  的区别</h2>\n<ol>\n<li><code>const</code>  定义的常量在程序运行过程中只有一份拷贝 (因为它是全局的只读变量，存放在静态区), 而  <code>#define</code>  定义的宏常量在内存中有若干个拷贝 (没有存空间)</li>\n<li><code>#define</code>  宏是在预编译阶段进行替换，而 <code>const</code>  修饰的只读变量是在编译的时候确定其值</li>\n<li><code>#define</code>  宏没有类型，而  <code>const</code>  修饰的只读变量具有特定的类型</li>\n<li><code>#define</code>  不能被调试， <code>const</code>  可以被调试</li>\n</ol>\n<h2 id=\"memmove-和-memcpy-的区别\"><a class=\"anchor\" href=\"#memmove-和-memcpy-的区别\">#</a>  <code>memmove</code>  和  <code>memcpy</code>  的区别</h2>\n<p>首先  <code>memcpy</code>  和  <code>memmove</code>  都是 c 语言库函数，位于  <code>string.h</code>  中的函数.<br />\n 其函数原型分别为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用都是拷贝一段内存的内容，到目的地址。区别在于，<strong>在内存重叠时， <code>memmove</code>  可以保证数据的正确复制，而  <code>memcpy</code>  不可以</strong><br />\n情况如图<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/memove.png\" alt=\"memmove\" /><br />\n 对于第一种情况  <code>memcpy</code>  可以完美解决，但是对于后面这两种  <code>memcpy</code>  就无法保证复制结果.<br />\n 所以  <code>memcpy</code>  实现方法因该如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对 其进行分类讨论则可得到  <code>memmove</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp_d <span class=\"token operator\">></span> tmp_s <span class=\"token operator\">&amp;&amp;</span> tmp_s<span class=\"token operator\">+</span>n <span class=\"token operator\">></span> tmp_d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 内存重叠</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      tmp_d <span class=\"token operator\">=</span> tmp_d<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      tmp_s <span class=\"token operator\">=</span> tmp_s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 先将回被重叠的地方存入目的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">--</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "面试",
                "面试"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E7%AC%94%E8%AF%95%E9%94%A6%E9%9B%86-%E6%99%BA%E8%83%BD%E6%B6%82%E9%B8%A6/",
            "url": "https://to-ywz.github.io/work/%E7%AC%94%E8%AF%95%E9%94%A6%E9%9B%86-%E6%99%BA%E8%83%BD%E6%B6%82%E9%B8%A6/",
            "title": "笔试锦集(一)——智能涂鸦",
            "date_published": "2021-09-26T10:52:27.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>智能涂鸦整体感觉还好，没有想象中的难。涉及到 linux 基础，c 语言，makefile 方向的知识</p>\n<h1 id=\"linux-方向\"><a class=\"anchor\" href=\"#linux-方向\">#</a> Linux 方向</h1>\n<p>linux 这一块考了 一个 malloc 是系统那部分提供的方法，一个 linux 端口占用查看<br />\n这一方面我的知识比较欠缺，端口查看是  <code>netstat -tunlp</code>  , malloc 的提供方盲猜了个  <code>glibc</code> , 事实也就是这个。当时是想  <code>malloc</code>  也是个库函数，八成和 GUN 有关系。还真就是 <code>gun libraries c</code>  .<br />\n<strong>PS: glibc 是 linux 下面 c 标准库的实现，即 GNU C Library</strong></p>\n<h1 id=\"makefile\"><a class=\"anchor\" href=\"#makefile\">#</a> makefile</h1>\n<p>这个就考了一个问题:</p>\n<blockquote>\n<p>定义一个可以跨文件的 makefile 变量的关键字</p>\n</blockquote>\n<p>很巧，我就会这一个，考其他的。我还真不一定能能记得，因为  <code>makefile</code>  也是大一的时候学的，都忘完了つ﹏⊂<br />\n答案是 <code>export</code></p>\n<h1 id=\"c-语言\"><a class=\"anchor\" href=\"#c-语言\">#</a> C 语言</h1>\n<p>余下的都是 C 语言的题目，毕竟这个才是重头戏.<br />\n 老生常谈的考了 static 的作用，这个在这<a href=\"\">篇文</a>中说过我就不再细说<br />\n接下去就说一些不一样的</p>\n<h2 id=\"字节对齐\"><a class=\"anchor\" href=\"#字节对齐\">#</a> 字节对齐</h2>\n<p><code>#pragma  pack(x)</code>  的作用和一字节对齐.<br />\n 题目大概是这样的:</p>\n<blockquote>\n<p>求 下面结构体的大小</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span>  <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">char</span> a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<p>结构体大小必然需要考虑到 内存对齐，但是这里比较有意思的就是 有一句  <code>#pragma  pack(1)</code> , 这表示结构体按一字节对齐<br />\n如果没有这句宏那么，结果就是 32 位机下 1+4+8+(3) 字节，后面 这三个字节是补全 <code>char</code>  类型 4 字节对齐.<br />\n 但是因为有 就变成的 1 字节对齐，所以结果是 13 字节<br />\n<strong> PS: #pragma pack () 是解除 1 字节对齐</strong></p>\n<p>实际测试代码如下 (偷个懒，用 cpp 输出比较快):</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>   </span><span class=\"token comment\">// 一字节 对齐</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">// 解除 1 字节对齐</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"柔性数组0-长数组\"><a class=\"anchor\" href=\"#柔性数组0-长数组\">#</a> 柔性数组 (0 长数组)</h2>\n<p>这道题是我唯一不确定的题目，应为用到的太少了 (个人)<br />\n 题目大致如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Data_t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">short</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Flex_Array_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Flex_Array_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Flex_Array_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Flex_Array_t <span class=\"token operator\">*</span>Array <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.value = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.temp = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.len = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.arr[0] = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.arr[1] = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里考了两个知识点，一个是字节对齐，另一个是柔性数组.<br />\n 在 32 位机的条件下，4 字节对齐，所以大小是 1+4+2 +(3+2)= 12 字节，0 长数组不占空间，<br />\n0 长数组，在 ISO 标准里是不支持的，但是 gcc 在 c99 中预先提供了支持。相关文档再此:&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy9aZXJvLUxlbmd0aC5odG1s\">Arrays of Length Zero</span>.&quot;<br />\n 我感觉 0 长数组的结构体其实就和 <code>extern int arr[]</code>  极其类似 (不过没有跨文件作用域的效果), 在没有定义变量之前都不会产生存储， <code>sizeof</code>   的结果下他们并不占用空间。对于 <code>Flex_Array_t</code>  也是同一个道理.<br />\n 其实，严格意义上来说，0 长就类似数组首地址，而数组的首地址仅仅是一个标签，不占用空间，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其汇编代码如下<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/%E6%9C%AA%E8%B6%8A%E7%95%8C%E6%95%B0%E7%BB%84.png\" alt=\"ASM_Array\" /><br />\narr 存储在 为一个内存标签，和 main 标签作用类似 (.comm 是声明未初始化的内存段空间)<br />\n<strong> PS: 这也是指针和数组首地址的最大不同</strong></p>\n<p>回到题目，这道题目在弄清楚这两个问题和就变简单了， <code>buf</code>  的大小为 14, 那么  <code>buf</code>  被 赋给  <code>Array</code>  的时候，就是从  <code>arr[0]</code>  开始赋值到  <code>arr[13]</code>  为止</p>\n<p>那么就可以先得出  <code>Array.arr[0]</code>  和  <code>Array.arr[1]</code>  分别为  <code>0x0a</code>  和  <code>0x0b</code> , 因为结构体的数组不占空间，多出的那  <code>len</code>  必然是给  <code>arr[0]</code>  的.<br />\n 余下的就很好推断了  <code>Array.value = 0</code> , 补齐 3 字节， <code>Array.temp = 0x07060504</code> ,  <code>int</code>  本为 4 字节不用补齐.  <code>Array.len = 0x0908</code> ,  <code>short</code>  类型补齐 2 字节.<br />\n 嗯？！到这里就有一个大问题了既然补齐了 <code>short</code>  两个字节，那么为什么  <code>arr</code>  数值不是未知数呢？前面说过 柔性数组 大小为 0, 我们开辟的空间大小为 结构体大小大再多上 2 字节.<br />\n 我们使用  <code>malloc</code>  函数开辟出的空间是连续的所以对于 柔性数组来说，不管前面补没补齐，都从上一个数据类型结束初开始计算，算是一个 c99 的特性吧.<br />\n 具体原因我以后在琢磨琢磨.</p>\n<h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<p>冒泡排序的实现难度较低，我之前写过一遍介绍冒泡排序及其优化的文章，感兴趣的可以去看看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGFrZXItY29kZS9wLzEwMjk2NzMwLmh0bWw=\">传送门</span>.</p>\n<h2 id=\"memmove-实现\"><a class=\"anchor\" href=\"#memmove-实现\">#</a> memmove 实现</h2>\n<p>这就是面完没两个小时的丙甲，刚问过这就直接撞上了，都是缘分啊。感兴趣可以去看看<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTLyVFNiVCMSU4MiVFOCU4MSU4Qy8lRTklOUQlQTIlRTglQUYlOTUlRTklOTQlQTYlRTklOUIlODYtJUU0JUI4JTk5JUU3JTk0JUIyJUU3JUE3JTkxJUU2JThBJTgwLw==\">传送门</span>.</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "笔试",
                "笔试"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E4%B8%8A%E6%B5%B7%E4%B8%AD%E7%94%B5/",
            "url": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E9%94%A6%E9%9B%86-%E4%B8%8A%E6%B5%B7%E4%B8%AD%E7%94%B5/",
            "title": "面试锦集(二)——上海中电",
            "date_published": "2021-09-26T10:52:27.000Z",
            "content_html": "<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>整体来说，上海中电的技术面让我感觉起来很舒服，很和蔼而且也给了我很多我项目上的建议，还帮分析我向做的远程遥控小车的方案，就很 nice, 要是没有更好的选择基本时就这家了，.</p>\n<h1 id=\"面试经历\"><a class=\"anchor\" href=\"#面试经历\">#</a> 面试经历</h1>\n<p>因为是第二次面试，所以心态也放缓了一些，问了两个项目，一个是智能车，一个是无线智能节点。问了智能车，为什么使用这款摄像头、摄像头采用的协议 sccb, 车辆采用的 rt-thread 的线程安排，为什么要使用 sobel 算子，IIC 多主机请求的仲裁方式，我主要负责那一块。整体上答的还行，还是很愉快的.<br />\n 然后是无线节点，这个项目问了 ADS1292, 用了什么滤波，这老生常谈了。为什么用用这个滤波，效果最好，能实现的最稳定. 8266 的与 MCU 通信方式，简述一下数据帧结构，说一下 UART 数据帧的结构.<br />\n 到这里面试官对其他项目就没有什么兴趣了。开始问了一些偏软件的问题，大概包括 C、C++、操作系统、计算机网络、数据库。这一块我就 C 答的还可以，其他就拉了，数据库我学的可认真了，居然全忘了.<br />\n 虽然，最后面试官觉得我的技术栈基础还可以，最后问了一下我的绩点，唉，我绩点那就是根本看不得。但是很显然有些拉。要不然能拿到更高的实习工资つ﹏⊂.</p>\n<h1 id=\"知识点总结\"><a class=\"anchor\" href=\"#知识点总结\">#</a> 知识点总结</h1>\n<h2 id=\"关于项目\"><a class=\"anchor\" href=\"#关于项目\">#</a> 关于项目</h2>\n<p>项目主要还是那些问题，不过这次问了一个新的，关于 IIC 协议<br />\n IIC 协议中多主机进行请求的时候，IIC 协议是如何处理的。这个问题比较巧，最近我 IIC 调的比较多，然后重写了一下 IIC 驱动 OLED 的库.<br />\n 感兴趣的可以去看一下<a href=\"\">连接</a><br />\n这里简单说一下，IIC 总线自带仲裁机制。无论多少个主机发起请求，第一个拉低 SDA 的主机 获取到当前总线的控制权</p>\n<h2 id=\"uart-协议\"><a class=\"anchor\" href=\"#uart-协议\">#</a> UART 协议</h2>\n<p>UART 数据帧格式如下<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211017100215.png\" alt=\"UART\" /><br />\nUART 的 空闲电平为 高电平，起始位为 0 , 8 位数据位，低位数据先行先发  <code>LSB</code>  (最低位), 一位奇偶校验位，再加上 1 位停止位 (高电平 1)<br />\n UART 数据帧各个位详解:</p>\n<ul>\n<li>起始位：发送 1 位逻辑 0 (低电平), 开始传输数据.</li>\n<li>数据位：可以是 5~8 位的数据，先发低位，再发高位，一般常见的就是 8 位 (1 个字节), 其他的如 7 位的 ASCII 码.</li>\n<li>校验位：奇偶校验，将数据位加上校验位，1 的位数为偶数 (偶校验), 1 的位数 4 为奇数 (奇校验).</li>\n<li>停止位：停止位是数据传输结束的标志，可以是 1/1.5/2 位的逻辑 1 (高电平).</li>\n<li>空闲位：空闲时数据线为高电平状态，代表无数据传输.</li>\n</ul>\n<h3 id=\"关于异步\"><a class=\"anchor\" href=\"#关于异步\">#</a> 关于异步</h3>\n<p>UART 是异步传输，以 1 个字符为传输单位，传输 2 个字符之间的时间间隔，比如传输 0X33 后再传输 0X35, 这两者时间间隔是未知的.<br />\n 但是同一字符内相邻位间的时间间隔是确定的，比如 0X33 低两位的 1 和 1 之间的时间间隔是确定的，这涉及到 UART 传输速率的概念 —— 波特率.</p>\n<p>波特率的单位是  <code>bps</code> , 全称是 <code>bit per second</code> , 意为每秒钟传输的  <code>bit</code>  数量.<br />\n 波特率 9600bps, 代表每秒钟传输 bit 的数量为 9600, 那么传输 1bit 数据的时间就是 1/9600=104us, 波特率 115200bps, 代表传输 1bit 数据的时间是 8us.</p>\n<p>这里说明一下，对于 STM32 来说，最大波特率取决于 时钟主频 HCLK , UART 的频率是主频的 1/8 或 1/16.<br />\n 如果抛开物理限制，UART 的最大速率为 20kbps.</p>\n<h3 id=\"关于传输\"><a class=\"anchor\" href=\"#关于传输\">#</a> 关于传输</h3>\n<p>大致的说一下，UART 传输的过程.<br />\n 首先，UART1 以 115200 波特率发送 0X33, 先在数据线上放 1 个 104us 脉宽的低电平 (起始位), 然后是连续 2 个 104us 脉宽的高电平 (2bit 逻辑 1), 依次类推.<br />\n 其次，UART2 以 115200 波特率接收 0X33, 通过数这些数据的脉宽，来确认数据.</p>\n<p>为了确保数据传输的正确性，减少误差，一般 UART1 和 UART2 之间的波特率差别小于 10%, 一次最多只能传输 1 个字节 (8bit), 也有效减小了累计误差.</p>\n<h2 id=\"c\"><a class=\"anchor\" href=\"#c\">#</a> C</h2>\n<p>C 语言这一块还是老样子，问了一下  <code>static</code>  的作用， <code>const</code>  的作用</p>\n<h2 id=\"c-2\"><a class=\"anchor\" href=\"#c-2\">#</a> C++</h2>\n<h3 id=\"c-和-c-最大的区别\"><a class=\"anchor\" href=\"#c-和-c-最大的区别\">#</a> C++ 和 C 最大的区别</h3>\n<p>这里我回答的是 类、模板、重载，面向对象的思维，这个没有标准答案，就是个过度问题，有理即可</p>\n<h3 id=\"如何使用-c-实现-c-的重载\"><a class=\"anchor\" href=\"#如何使用-c-实现-c-的重载\">#</a> 如何使用 C 实现 C++ 的重载</h3>\n<p>这个就很有意思，C++ 的重载机制无非就是在编译的时候重命名函数名。所以我才用函数  <code>##</code>  运算符和可变参数的方式简单的实现了一下函数重载.<br />\n 面试官和我说，也可以使用 void* 指针作为参数实现，但是 void* 只能实现一个参数的重载，多参数重载就无法实现.<br />\n 这一块我还得继续琢磨琢磨。我之前的 重载实现文章可以到这去看看. <span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0MlRTglQUYlQUQlRTglQTglODAvQyVFOCVBRiVBRCVFOCVBOCU4MCVFNSU4NyVCRCVFNiU5NSVCMCVFOSU4NyU4RCVFOCVCRCVCRC8=\">传送门</span><br />\n或者看这篇研究<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2tsZXNzaW5jLmNvbS9hcnRpY2xlcy9vdmVybG9hZGluZy8=\">传送门</span></p>\n<h3 id=\"数据成员\"><a class=\"anchor\" href=\"#数据成员\">#</a> 数据成员</h3>\n<p>分为三类：私有、公有、保护.<br />\n 私有数据成员可以被继承，但是无法被访问.</p>\n<h3 id=\"map-的-特点\"><a class=\"anchor\" href=\"#map-的-特点\">#</a> MAP 的 特点</h3>\n<p>真的久了不写算法，数据结构的特性的忘记了.<br />\nMap 的特性是 数据以键值对的方式存在，会将数据按 值的大小进行排序.<br />\nset 和 map 最大的区别在于，前者 无序去重，后者 有序包重.<br />\n 其他的数据结构，我下次再开篇文章复习复习</p>\n<h2 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h2>\n<h3 id=\"进程和线程的区别\"><a class=\"anchor\" href=\"#进程和线程的区别\">#</a> 进程和线程的区别</h3>\n<p><strong>本质区别:</strong> 进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位<br />\n<strong>资源开销:</strong> 进程都有独立的代码和数据空间 (上下文), 进程间切换需要大量的保存上下文。线程可以视为轻量级的线程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器<br />\n<strong>作用力:</strong>   一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮<br />\n<strong>执行过程:</strong> 每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行</p>\n<h3 id=\"进程间通信ipc\"><a class=\"anchor\" href=\"#进程间通信ipc\">#</a> 进程间通信 (IPC)</h3>\n<p>我当时就说了消息传递。还是对概念不够清晰<br />\n进程间通信 (IPC) 分为 4 大类:</p>\n<ul>\n<li>消息传递 (管道、FIFO、消息队列)</li>\n<li>同步 (互斥量、条件变量、读写锁、文件和写记录锁、信号量)</li>\n<li>共享内存 (匿名的和具名的)</li>\n<li>远程过程调用</li>\n</ul>\n<h2 id=\"计算机网络\"><a class=\"anchor\" href=\"#计算机网络\">#</a> 计算机网络</h2>\n<p>由于我答的很拉跨，ISO 7 层模型都回答的结结巴巴的，就问了一些基础的问题</p>\n<h3 id=\"iso-7层网络模型\"><a class=\"anchor\" href=\"#iso-7层网络模型\">#</a> ISO 7 层网络模型</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>作用</th>\n<th>典型服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>所有能和用户交互产生网络流量的程序</td>\n<td>FTP、SMTP、HTTP</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>用于处理两个系统中</td>\n<td>ASCII、JPEG</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>向表示层 / 用户层进程提供建立连接并在连接上有序的传输数据.(也被称为同步)</td>\n<td>ADSP、ASP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>负责主机之间的通信，端到端的通信，传输单位：报文段 / 数据报</td>\n<td>TCP、UDP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>把分组从源端传输到目的端，分组交换网络的不同主机所提供的通信服务。单位是数据报</td>\n<td>IP、IPx、ICMP、ARP、OSPF</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>把网络层数据组装成帧，单位为数据帧</td>\n<td>SDLC、HDLC、PPP、STP</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>在物理介质上实现网络传输 单位 bit</td>\n<td>RJ45、802.3</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/Snipaste_2021-09-28_16-16-27.png\" alt=\"ISO\" /></p>\n<h4 id=\"五层网络模型\"><a class=\"anchor\" href=\"#五层网络模型\">#</a> 五层网络模型</h4>\n<p>应用层、传输层、网络层、数据链路层、物理层</p>\n<h4 id=\"tcpip网络模型\"><a class=\"anchor\" href=\"#tcpip网络模型\">#</a> TCP/IP 网络模型</h4>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/Snipaste_2021-09-28_16-16-44.png\" alt=\"TCP/IP\" /></p>\n<h3 id=\"tcp-属于那一层的协议\"><a class=\"anchor\" href=\"#tcp-属于那一层的协议\">#</a> TCP 属于那一层的协议</h3>\n<p>有了上面的巩固，很显然 TCP 是 传输层的协议 (我居然还想了那么久),</p>\n<h3 id=\"tcp-和-udp-的区别\"><a class=\"anchor\" href=\"#tcp-和-udp-的区别\">#</a> TCP 和 UDP 的区别</h3>\n<p>这个就很简单了，因为用过所以还是有一定的了解的.<br />\nTCP 是可靠稳定的连接，TCP 是一对一，数据模式<br />\n UDP 是不可靠连接，UDP 可以 一对一、多对多，流模式</p>\n<h4 id=\"tcp-transmission-control-protocol\"><a class=\"anchor\" href=\"#tcp-transmission-control-protocol\">#</a> TCP (Transmission Control Protocol)</h4>\n<p>TCP 是一个面向连接的协议，即在发数据之前，必须和对方建立可靠连接.<br />\nTCP 的建立需要经过三次对话，大致情节模拟一下:</p>\n<ol>\n<li>主机 A 向 主机 B 发出连接请求数据包              A: 我想发数据</li>\n<li>主机 B 向主机 A 发送同意连接和要求同步             B: 可以，什么时候发</li>\n<li>主机 A 再发出一个数据包确认主机 B 的要求同步       A: 我现在就发，你做好准备</li>\n</ol>\n<h5 id=\"三次握手过程\"><a class=\"anchor\" href=\"#三次握手过程\">#</a> 三次握手过程</h5>\n<ol>\n<li>主机 A 发送 一个含有同步序列号的标志位的数据段给主机 B, 向主机 B 请求建立连接.<br />\n 这个数据段包含两个信息：我要和你通信；你可以用哪个序列作为其实数据段来回应我</li>\n<li>主机 B 收到 主机 A 请求后，用带有确认的 ACK 和同步序列号 (SYN) 标志的数据段响应主机 A<br />\n 这个数据段同样包含两个人信息：我收到了你的请求，你可以传输数据；你要用哪个序列号作为起始数据段来回应我</li>\n<li>主机 A 回复 一个确认 ACK, 建立 TCP 连接<br />\n这里只含有一个信息，我收到了回复，将要开始传输数据了.</li>\n</ol>\n<p><strong>特点</strong>：没有应用层的数据，这里仅仅是建立连接， <code>SYN</code>  这个标志位值只可能在 TCP 建立连接的时候置 1, 握手结束后  <code>SYN</code>  被置 0</p>\n<h5 id=\"四次挥手过程\"><a class=\"anchor\" href=\"#四次挥手过程\">#</a> 四次挥手过程</h5>\n<p>第一次：当主机 A 完成数据传输后，将控制位  <code>FIN</code>  置 1, 提出停止 TCP 连接的请求<br />\n第二次：主机 B 收到 FIN 后对其作出响应，确认这一方向上的 TCP 连接将关闭，将 ACK 置 1<br />\n 第三次：由 B 端再提出反方向的关闭请求，将  <code>FIN</code>  置 1<br />\n 第四次：主机 A 对主机 B 的请求进行确认，将 <code>ACK</code>  置 1, 双方向的关闭结束</p>\n<p>由 TCP 的三次握手和四次断开可以看出，TCP 使用面向连接的通信方式，大大提高了数据通信的可靠性，使发送数据端和接收端在数据正式传输前就有了交互，为数据正式传输打下了可靠的基础</p>\n<h5 id=\"为什么要三次握手\"><a class=\"anchor\" href=\"#为什么要三次握手\">#</a> 为什么要三次握手</h5>\n<p>个人觉得是为了确认当前通信的信道可用，尤其是当 TCP 发生断开重连后，单单一次应答无从确定连接时本次新连接的 ACK 还是旧链接延时的 ACK. 而且所谓的三次握手也是确定一个信道是否有效的最少次数.<br />\nTCP 的可靠性依赖于  <code>seq</code>  序列号来实现。通过  <code>sqe</code>  序号的来实现可靠重传，从而避免连接复用的时候无法分别出  <code>seq</code>  是延时或者是 旧链接的  <code>seq</code> , 因此需要三次握手来确定双方的  <code>ISN</code>  ( <code>ISN</code>  是初始的 <code>seq</code>  序列号)</p>\n<p>再挖细一点，还是上面那个依据</p>\n<blockquote>\n<p>TCP 的可靠性是依靠  <code>swq</code>  实现的.(seq 全程为  <code>sequence numbers</code> )</p>\n</blockquote>\n<p>TCP 协议在被制定的时候就有一个基本设定，通过 TCP 发出的每一个包，都有一个 <code>sequence numbers</code> .  <code>sequence numbers</code>  为有序值，所以所有的包都可以被确认收到.<br />\n 确认机制是累计的，对于一个  <code>sequence numbers x</code>  的确认，这代表 x 系列号之前的包都是被确认的。当然，不包括 x.<br />\nTCP 协议没有限制一个重复的连接被重复使用的。这时候，就有了 上面所说的问题：这条连接突然断开重连后，TCP 怎么样识别之前旧链接重发的包？<br />\n 这就是需要上面所提到  <code>ISN</code>  校对的价值了.<br />\n 每当生成一个新的连接的时候，都会有一个初始序列号 (Initial Sequence Number ISN) 生成器会生成一个新的 32 位的 ISN.<br />\n 这个生成器会使用一个 32 位的时钟，大约 每 4µs 进行一次 inc, 所以 ISN 会在大约 4.55 小时循环一次。一般来说，在网络中并不会比最大分段寿命 (Maximum Segment Lifetime (MSL)), 默认使用 2 分钟长.  <code>MSL</code>  远比 4.55 小时要多的多，所以可以认定 ISN 唯一<br />\n发送方与接收方都会有自己的 ISN (下面的例子中就是 X 与 Y) 来做双方互发通信，具体的描述如下:</p>\n<blockquote>\n<ol>\n<li>A --&gt; B  SYN my sequence number is X</li>\n<li>A &lt;-- B  ACK your sequence number is X</li>\n<li>A &lt;-- B  SYN my sequence number is Y</li>\n<li>A --&gt; B  ACK your sequence number is Y</li>\n</ol>\n</blockquote>\n<p>2 与 3 都是 B 发送给 A, 因此可以合并在一起，因此成为 three way (or three message) handshake (其实翻译为三步握手，或者是三次通信握手更为准确)</p>\n<p>三次握手 (A three way handshake) 是必须的，因为  <code>sequence numbers</code>  没有绑定到整个网络的全局时钟 (全部统一使用一个时钟，就可以确定这个包是不是延迟到的) 以及 TCPs 可能有不同的机制来选择 ISN (初始序列号).<br />\n 接收方接收到第一个  <code>SYN</code>  时，没有办法知道这个  <code>SYN</code>  是是否延迟了很久了，除非他有办法记住在这条连接中，最后接收到的那个  <code>sequence numbers</code>  (然而这不总是可行的)<br />\n 这句话的意思是：一个  <code>seq</code>  过来了，跟现在记住的  <code>seq</code>  不一样，我怎么知道他是上条延迟的，还是上上条延迟的呢？<br />\n 所以，接收方一定需要跟发送方确认  <code>SYN</code></p>\n<p>假设不确认 SYN 中的  <code>seq</code> , 那么就只有:</p>\n<blockquote>\n<ol>\n<li>A --&gt; B  SYN my sequence number is X</li>\n<li>A &lt;-- B  ACK your sequence number is X  SYN my sequence number is Y</li>\n</ol>\n</blockquote>\n<p>只有 B 确认了收到了 A 的  <code>seq</code> ,  A 无法认收到 B 的。也就是说，只有 A 送给 B 的包都是可靠的，而 B 送给 A 的则不是，所以这不是靠的连接.<br />\n 这种情况如果只需要 A 发送给 B , B 无需回，则可以不做三次次握手.</p>\n<p><strong>TCP 的包头结构</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">源端口 16 位</td>\n<td style=\"text-align:center\">目标端口 16 位</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">序列号 32 位</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">回应序号 32 位</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TCP 头长度 4 位</td>\n<td style=\"text-align:center\">reserved 6 位</td>\n<td style=\"text-align:center\">控制代码 6 位</td>\n<td style=\"text-align:center\">窗口大小 16 位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">偏移量 16 位</td>\n<td style=\"text-align:center\">校验和 16 位</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">选项 32 位 (可选)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"udp-user-data-protocol\"><a class=\"anchor\" href=\"#udp-user-data-protocol\">#</a> UDP (User Data Protocol)</h4>\n<ol>\n<li>UDP 是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上.<br />\n 在发送端，UDP 传送数据的速度仅仅是受应用程序生成数据的速度、 计算机的能力和传输带宽的限制；在接收端，UDP 把每个消息段放在队列中，应用程序每次从队列中读一个消息段.</li>\n<li>传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息</li>\n<li>UDP 信息包的标题很短，只有 8 个字节，相对于 TCP 的 20 个字节信息包的额外开销很小</li>\n<li>吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、 源端和终端主机性能的限制</li>\n<li>UDP 是面向报文的，发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付给 IP 层</li>\n</ol>\n<p><code>ping</code>  命令就是 UDP,  <code>ping</code>  是使用 IP 和网络控制信息协议 (ICMP), 因而没有涉及到任何传输协议 (UDP/TCP) 和应用程序。它发送 icmp 回送请求消息给目的主机</p>\n<h5 id=\"udp的包头\"><a class=\"anchor\" href=\"#udp的包头\">#</a> UDP 的包头</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">源端口 16 位</td>\n<td style=\"text-align:center\">目的端口 16 位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">长度 16 位</td>\n<td style=\"text-align:center\">校验和 16 位</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sokect-的常用函数\"><a class=\"anchor\" href=\"#sokect-的常用函数\">#</a> Sokect 的常用函数</h3>\n<p>这个我就记得一个 bind. 唉，真就是废了.</p>\n<h4 id=\"socket-基本操作\"><a class=\"anchor\" href=\"#socket-基本操作\">#</a> socket 基本操作</h4>\n<ol>\n<li>socket () 函数</li>\n<li>bind ()   函数</li>\n<li>listen () 函数  connect () 函数</li>\n<li>accept () 函数</li>\n<li>read ()   函数  wriet ()   函数</li>\n<li>close ()  函数</li>\n</ol>\n<h2 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h2>\n<p>这个比上面那个还要拉，第一个问题就死了，我就记得一个原子性</p>\n<h3 id=\"事务的性质\"><a class=\"anchor\" href=\"#事务的性质\">#</a> 事务的性质</h3>\n<ol>\n<li>原子性：事务的原子性是指事务中包含的所有操作要么全做，要么全不做 (all or none).</li>\n<li>一致性：在事务开始以前，数据库处于一致性的状态，事务结束后，数据库也必须处于一致性状态.</li>\n<li>隔离性：事务隔离性要求系统必须保证事务不受其他并发执行的事务的影响，也即要达到这样一种效果：对于任何一对事务 T1 和 T2, 在事务 T1 看来，T2 要么在 T1 开始之前已经结束，要么在 T1 完成之后才开始执行</li>\n<li>持久性：一个事务一旦成功完成，它对数据库的改变必须是永久的，即便是在系统遇到故障的情况下也不会丢失</li>\n</ol>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "面试",
                "面试"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8C%E9%93%BE%E8%A1%A8/",
            "url": "https://to-ywz.github.io/computer-science/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8C%E9%93%BE%E8%A1%A8/",
            "title": "链表(二)——双向链表",
            "date_published": "2021-09-25T23:24:06.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>上篇文章说过单链表.</p>\n<blockquote>\n<p>单链表中的节点具有 数据域和指针域，常见基本形式为 充当数据域的 value 字段 和 充当指针域的 next 引用字段。节点通过引用字段 <strong>有序</strong>链接，称为链表</p>\n</blockquote>\n<p>一个数据结构的出现，肯定会有其变式，用于优化原先数据结构的不足.<br />\n 双链表的出现也是如此，双链表解决了链表不可逆向查找的问题.</p>\n<h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h2>\n<p>双链表既为单链表的变式，其工作方式必然也与单链表相似。但变式毕竟是变式，还是会有不同的地方.<br />\n 双链表 比单链表多出了 一个引用字段  <code>prev</code>  . 有了这个字段，我们就可以找到当前节点的 前驱节点.<br />\n 双链表例子如图:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092605.png\" alt=\"双链表\" /><br />\n绿色箭头表示  <code>prev</code>  工作方式</p>\n<h2 id=\"节点结构\"><a class=\"anchor\" href=\"#节点结构\">#</a> 节点结构</h2>\n<p>双向链表节点典型定义</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DoublyListNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DoublyListNode</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DoublyListNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> DoublyListNode<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>与单链接列表类似，我们将使用头结点来表示整个列表.</p>\n<p>一样还是来个 cpp 版本</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">DoublyListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DoublyListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">DoublyListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"操作分析\"><a class=\"anchor\" href=\"#操作分析\">#</a> 操作分析</h1>\n<p>同样的单链表有的双链表都不会少，增删查改都是类似的.<br />\n 与单链表相同的方式访问数据:</p>\n<ol>\n<li>无法在常量级的时间内访问随机位置.</li>\n<li>必须从头部遍历才能得到我们想要的结点.</li>\n<li>在最坏的情况下，时间复杂度将是 O (N), 其中 N 是链表的长度.<br />\n 对于基本操作，添加和删除，下面还会单独说明，这两个操作由于多出一个前驱引用，操作略显麻烦一些.</li>\n</ol>\n<h2 id=\"添加操作\"><a class=\"anchor\" href=\"#添加操作\">#</a> 添加操作</h2>\n<h3 id=\"在链表中添加节点\"><a class=\"anchor\" href=\"#在链表中添加节点\">#</a> 在链表中添加节点</h3>\n<p>一般来说，想在现有节点  <code>prev</code>  之后插入一个新节点  <code>cur</code> , 分为 3 个步骤:</p>\n<ol>\n<li>初始化  <code>cur</code>  节点，将  <code>val</code>  赋予  <code>cur-&gt;val</code> ;<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092706.png\" alt=\"init\" /></li>\n<li>链接  <code>cur</code>  与  <code>prev</code>  和  <code>next</code> ,  <code>next</code>  为  <code>prev</code>  原始的下一个节点；<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092731.png\" alt=\"link\" /></li>\n<li>用  <code>cur</code>  重新链接  <code>prev</code>  和  <code>next</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092752.png\" alt=\"link\" /></li>\n</ol>\n<h3 id=\"特例一-在头部添加节点\"><a class=\"anchor\" href=\"#特例一-在头部添加节点\">#</a> 特例一：在头部添加节点</h3>\n<p>同样的 在头部的操作也是双链表的一个特例，步骤如下:</p>\n<ol>\n<li>初始化  <code>cur</code>  节点，将  <code>val</code>  赋予  <code>cur-&gt;val</code> ;<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092815.png\" alt=\"head_insert\" /></li>\n<li>链接  <code>cur</code>  与  <code>head</code>  节点， <code>cur</code>  的  <code>prev</code>  引用字段链接到空<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092835.png\" alt=\"head_insert\" /></li>\n<li>将  <code>head</code>  的  <code>prev</code>  字段与 <code>cur</code>  链接<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092852.png\" alt=\"head_insert\" /></li>\n</ol>\n<h3 id=\"特例二-在尾部添加节点\"><a class=\"anchor\" href=\"#特例二-在尾部添加节点\">#</a> 特例二：在尾部添加节点</h3>\n<ol>\n<li>初始化  <code>cur</code>  节点，将  <code>val</code>  赋予  <code>cur-&gt;val</code> ;<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092941.png\" alt=\"end_insert\" /></li>\n<li>找到  <code>tail</code>  节点，将  <code>cur</code>  与  <code>tail</code>  节点连接， <code>cur</code>  的  <code>next</code>  引用字段链接到空<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092957.png\" alt=\"end_insert\" /></li>\n<li>将  <code>tail</code>  的  <code>next</code>  字段与 <code>cur</code>  链接<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093020.png\" alt=\"end_insert\" /></li>\n</ol>\n<h2 id=\"删除操作\"><a class=\"anchor\" href=\"#删除操作\">#</a> 删除操作</h2>\n<p>如果我们想从双链表中删除一个现有的结点  <code>cur</code> , 我们可以简单地将它的前一个结点  <code>prev</code>  与下一个结点  <code>next</code>  链接起来</p>\n<blockquote>\n<p>与单链表不同，使用 “prev” 字段可以很容易地在常量时间内获得前一个结点。</p>\n</blockquote>\n<p>因为我们不再需要遍历链表来获取前一个结点，所以时间和空间复杂度都是 O (1)</p>\n<h3 id=\"在链表中删除节点\"><a class=\"anchor\" href=\"#在链表中删除节点\">#</a> 在链表中删除节点</h3>\n<p>删除节点步骤如下 (步骤略微细分):</p>\n<ol>\n<li>链接  <code>cur-&gt;next</code>  到  <code>cur-&gt;prev</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093033.png\" alt=\"delete\" /></li>\n<li>链接  <code>cur-&gt;prev</code>  到  <code>cur-&gt;next</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093053.png\" alt=\"delete\" /></li>\n<li><code>cur</code>  的 两个引用字段链接到自己，然后释放<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093116.png\" alt=\"delete\" /></li>\n</ol>\n<h3 id=\"特例一-在头部删除节点\"><a class=\"anchor\" href=\"#特例一-在头部删除节点\">#</a> 特例一：在头部删除节点</h3>\n<p>删除头部节点步骤如下:</p>\n<ol>\n<li>链接  <code>head-&gt;next-&gt;prev</code>  到 空指针<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093136.png\" alt=\"delete_head\" /></li>\n<li><code>head-&gt;next</code>  链接到空指针，释放  <code>head</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093149.png\" alt=\"delete_head\" /></li>\n</ol>\n<h3 id=\"特例二-在尾部删除节点\"><a class=\"anchor\" href=\"#特例二-在尾部删除节点\">#</a> 特例二：在尾部删除节点</h3>\n<p>删除头部节点步骤如下:</p>\n<ol>\n<li>链接  <code>head-&gt;next-&gt;prev</code>  到 空指针<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093216.png\" alt=\"delete_tail\" /></li>\n<li><code>head-&gt;next</code>  链接到空指针，释放  <code>head</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127093255.png\" alt=\"delete_tail\" /></li>\n</ol>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>下面的代码以带头节点的链表格式实现。大体思路实现与不带头节点的链表原理一致.<br />\n 接口格式源于 leetcode 707 链表设计.<br />\n 各位可自行测试自己的实现方式，本文的所有代码都在本地测试过，放心食用 (ฅ・ω・ฅ)</p>\n<h2 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<p>需要注意上面说的几个特例，在插入删除的操作的时候</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyLinkedList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>MyLinkedList <span class=\"token operator\">*</span><span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    head<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 1. index &lt; 0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 2. 链表为空</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 3. index 过大</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 查找 第 index 个节点，可能存在两种情况</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//  1. 存在 第 index 个节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  2. 不存在 第 index 个节点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> head <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//head 非空代表存在整个值 返回 -1 ,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 否则返回 val</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">?</span> head<span class=\"token operator\">-></span>val <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 初始化新节点</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 指向 head 后面的节点</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 如果为空，也会指向空，所以无需 next 指向空</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//obj 为头节点，obj->next 为第一个节点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 1. node->next 指向 obj->next 表示 新节点指向原本的第一个节点，从此之后 新节点 就可以访问到旧节点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 2. node->prev = obj 表示 node 的前驱指针 链接上 头节点 node, 这个时候就可以断开，obj->next 和 obj 之间的链接了</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 3. obj->next 指针 指向 node , node 成为链表的第一个节点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 这里考虑第一次插入节点</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 4. 因为 node 在 1 出获得了 原本第一个节点的地址，所以 next->prev 为原本第一个节点的前驱指针，指向了 node, node 的 前驱链接合</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 当链表为空，尾插变头插</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// 初始化节点</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 查找最后一个节点</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//obj 为空 无法获取到前一个节点</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 尾节点指向新节点</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    tail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">// 过滤非法 index &lt; 0, 使用头插法，题目要求，正常情况过滤负数，特判头节点</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">// 找到第 index-1 个节点</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> head<span class=\"token operator\">-></span>next <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 和获取第 index 值 类似，只不过这里需要获取 前一个节点</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">// 判断退出条件</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 初始化节点，避免浪费空间</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">// 插入节点，道理同 myLinkedListAddAtHead 部分的注释</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">//node 链接 到 head 和 head->next</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 链接到 head</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 链接到 head->next</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">//head 和 head->next 链接到 node</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token comment\">// 插入尾节点特判</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// head->next =</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">// 异常拦截</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token comment\">// 分类讨论</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token comment\">// 1. 删除头节点</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">// 存下要销毁的节点</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        temp <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token comment\">// 头节点指向第二个节点</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token comment\">// 第二个节点链接上头节点</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\">// 考虑所删除的链表只有一个节点</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        obj<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token comment\">// 找到 第 index - 1 个节点</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> head<span class=\"token operator\">-></span>next <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token comment\">// 删除节点</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token comment\">// 保留节点指针</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    temp <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token comment\">//index-1 节点的 链接到  index+1 节点</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token comment\">// 特判删除最后一个节点</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token comment\">//index+1 节点的 链接到  index-1 节点</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token comment\">// 释放节点</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token comment\">// 异常拦截</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"本地测试代码\"><a class=\"anchor\" href=\"#本地测试代码\">#</a> 本地测试代码</h2>\n<p>这里是一组测试样例</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> head<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GET_INDEX</span> <span class=\"token expression\"><span class=\"token number\">5</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is index %d value %d\\n\"</span><span class=\"token punctuation\">,</span> GET_INDEX<span class=\"token punctuation\">,</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> GET_INDEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============================================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Test finis\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "数据结构",
                "链表",
                "链表"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/",
            "url": "https://to-ywz.github.io/computer-science/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/",
            "title": "链表(一)——单链表",
            "date_published": "2021-09-25T02:57:33.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>计算机中的线性结构有两种方法实现，第一种就是喜闻乐见的数组形式。第二种则是链式结构.<br />\n 与数组相比链式结构可以使用碎片的内存块来实现存储。常简逻辑形式如下:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110022024967.png\" alt=\"\" /><br />\n 如图所示链表中的每一个元素都是一个单独的对象，每个对象之间通过指针 (引用) 的方式相连接.<br />\n 这种连接方式使得，链表的大小位动态的可以随时添加和减少 (在存在 MMU 的计算机中); 也是因为这种链接方式，链表丧失了数组的常数级数据访问的速度.</p>\n<p>链表存在两种类型：单链表和双链表。上面的就是单链表的例子，下面的则为双链表<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110022025859.png\" alt=\"\" /><br />\n与单链表相比，双链表多了一个可以逆向查找的操作，以存储空间为代价解决了单链表不能逆向查找的问题</p>\n<h1 id=\"单链表概述\"><a class=\"anchor\" href=\"#单链表概述\">#</a> 单链表概述</h1>\n<p>所有数据结构最大的目的就是更高效用内存的<strong>增删查改</strong>数据.<br />\n 单链表也不例外，所以单链表数据结构组成中在逻辑上分为了 <strong>数据域和指针域</strong>。数据域用于存储指定类型的数据，指针域用于存储下一个链表节点的地址.<br />\n 链表之所以称之为链式，就是因为指针域的指针存在。当这些相同类型的数据节点按某种顺序通过指针链接起来就被称为链表<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/202110022024967.png\" alt=\"\" /><br />\n图中红色箭表示链表是如何链接起来的</p>\n<h2 id=\"节点结构\"><a class=\"anchor\" href=\"#节点结构\">#</a> 节点结构</h2>\n<p>在 c 语言中数组无法包含不同的数据类，所以很显然链表这种数据结构只能通过  <code>struct</code>  来实现<br />\n常见的链表节点如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SingListNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SingListNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SingListNode_t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里再留一个 cpp 的写法 (纪念我早已忘记的 cpp)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">SinglyListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//cpp 不需要 typedef 就可以使用结构体的名称来声明变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    SinglyListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">SinglyListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h2>\n<p>有了上面的存储结构还不能称之为数据结构。前面说过数据结构的存在是为了高效的利用内存对数据进行增删查改，所以有存储结构必定会有在其之上的一系列操作<br />\n这里再啰嗦一下上面说过的一些话<br />\n在链表中访问单链表中的随机元素平均的时间复杂度为 O (N). 因为每一次我们都只能从链表的头部进行遍历，直到找到第 n 个元素<br />\n如上图：如果想要访问第 3 个节点，那么在链表中唯一的方法就是 从头节点开始 每一次通过  <code>next</code>  指针进行跳转到下一个节点.<br />\n 即 10 通过  <code>next</code>  获得到 节点 2 的地址，节点 2 通过 自己的  <code>next</code>  获取到 节点 3 的地址，进行了 两次转跳.</p>\n<h1 id=\"常用操作分析\"><a class=\"anchor\" href=\"#常用操作分析\">#</a> 常用操作分析</h1>\n<p>在链表中最为常用的算法就是  <code>添加和删除</code> ，在这两个操作中会涉及到 &quot;大量&quot; 的指针操作抽象逻辑，理解了这两个操作之后就可以很容易的实现其他的链表操作</p>\n<h2 id=\"添加操作\"><a class=\"anchor\" href=\"#添加操作\">#</a> 添加操作</h2>\n<h3 id=\"在表中插入一个节点\"><a class=\"anchor\" href=\"#在表中插入一个节点\">#</a> 在表中插入一个节点</h3>\n<p>当给定一个节点  <code>prev_node</code>  , 如果我们想要在它后面添加一个新的值  <code>val</code>  , 在逻辑上我们分为如下几步:</p>\n<ol>\n<li>初始化新节点，并将  <code>val</code>  赋值给新节点  <code>cur</code>  的  <code>val</code>  ;<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gusq2bvxkwj60mi07cmxb02.jpg\" alt=\"insert_node_0\" /></li>\n<li>将  <code>cur</code>  的  <code>next</code>  字段链接到  <code>prev_node</code>  的下一个节点  <code>next_node</code>  ;<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gusq2g7s4ij60mj07vweo02.jpg\" alt=\"insert_node_1\" /></li>\n<li>将  <code>prev_node</code>  的  <code>next</code>  字段链接到  <code>cur</code> <br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gusq2kgz0wj60mp088glt02.jpg\" alt=\"insert_node_2\" /><br />\n 与数组不同，链表不需要将所有元素移动到插入元素之后。时间复杂度为 O (1)</li>\n</ol>\n<h3 id=\"特例一-在头部插入节点\"><a class=\"anchor\" href=\"#特例一-在头部插入节点\">#</a> 特例一：在头部插入节点</h3>\n<p>上面所上述的是链表中的节点插入，但是我们还需要考虑到整个链表的所有位置的插入。例如：表头和表尾总所周知，我们使用头节点来定位整个链表故在列表的头部加入一个新节点  <code>head</code>  非常致命</p>\n<ol>\n<li>初始化新节点，并将  <code>val</code>  赋值给新节点  <code>cur</code>  的  <code>val</code>  ;<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gusr46emc0j60no05mdfx02.jpg\" alt=\"head_insert_0\" /></li>\n<li>将新节点 链接到原始节点  <code>head</code></li>\n<li>让  <code>cur</code>  变为  <code>head</code> <br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gusr4bzw53j60nh05ct8t02.jpg\" alt=\"head_insert_1\" /></li>\n</ol>\n<h3 id=\"特例二-在尾部插入节点\"><a class=\"anchor\" href=\"#特例二-在尾部插入节点\">#</a> 特例二：在尾部插入节点</h3>\n<p>尾部插入节点更为简单</p>\n<ol>\n<li>初始化新节点，并将  <code>val</code>  赋值给新节点  <code>cur</code>  的  <code>val</code>  ;<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gusxhell40j60m104ldfx02.jpg\" alt=\"tail_insert_0\" /></li>\n<li>找到  <code>end</code>  节点，将  <code>end</code>  节点链接到  <code>cur</code></li>\n<li><code>cur</code>  节点 链接到空指针<br />\n<img data-src=\"\" alt=\"alt_insert_1\" /></li>\n</ol>\n<h2 id=\"删除操作\"><a class=\"anchor\" href=\"#删除操作\">#</a> 删除操作</h2>\n<h3 id=\"在表中删除现有节点\"><a class=\"anchor\" href=\"#在表中删除现有节点\">#</a> 在表中删除现有节点</h3>\n<p>从单链表中删除现有节点  <code>cur</code>  , 可以分为两步:</p>\n<ol>\n<li>找到  <code>cur</code>  的上一个节点  <code>prev_node</code>  及其下一个节点  <code>next</code>  ;<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gusz81im0yj60o003zmx802.jpg\" alt=\"delete_0\" /></li>\n<li>链接到  <code>prev_node</code>  到  <code>cur</code>  的  <code>next_node</code> <img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gusz87tr7ij60nb03wjrh02.jpg\" alt=\"delete_1\" /></li>\n<li>将  <code>cur</code>  的  <code>next</code>  字段链接到  <code>NULL</code>  , 然后释放  <code>cur</code>  节点.<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gusz8ng1qtj60nt04c3ym02.jpg\" alt=\"delete_2\" /><br />\nps: 图中的节点指向了自己然后被  <code>free</code>  掉后等价于指向空</li>\n</ol>\n<p>在  <code>step 1</code>  中，需要找出  <code>prev_node</code>  和   <code>next_node</code>  .  <code>cur</code>  的字段很容易找出  <code>next_node</code>  , 但是，我们必须从头结点遍历链表，以找出   <code>prev_node</code>  , 其的平均时间是 O (N), 其中 N 是链表的长度.<br />\n 因此，删除结点的时间复杂度将是 O (N).</p>\n<h3 id=\"特例一-删除头节点\"><a class=\"anchor\" href=\"#特例一-删除头节点\">#</a> 特例一：删除头节点</h3>\n<p>同样删除头部节点也是一个较为特殊的操作，一个不小心整个链表就会丢失.</p>\n<ol>\n<li><code>head</code>  的  <code>next</code>  字段链接到  <code>head-&gt;next</code>  的  <code>next</code>  字段上.<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gut10l7daij60ku04vdfv02.jpg\" alt=\"delete_head_0\" /></li>\n<li><code>head</code>  的  <code>next</code>  连接道 空指针，然后释放  <code>head</code>  .<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gut11cppm8j60ni03r0su02.jpg\" alt=\"delete_head_1\" /></li>\n</ol>\n<h3 id=\"特例二-删除尾节点\"><a class=\"anchor\" href=\"#特例二-删除尾节点\">#</a> 特例二：删除尾节点</h3>\n<p>尾节点的操作也很简单，需要记住最终指向空即可，设尾节点为  <code>tail</code></p>\n<ol>\n<li>找到  <code>tail</code>  的 上一个 节点  <code>prev_node</code>  .<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gut109ewv7j60l604vwek02.jpg\" alt=\"delete_tail_0\" /></li>\n<li>将  <code>prev_node</code>  的  <code>next</code>  字段指向 空指针.<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gut1050nw3j60kn05374e02.jpg\" alt=\"delete_tail_1\" /></li>\n<li><code>tail</code>  的  <code>next</code>  字段 链接到空指针，然后释放.</li>\n</ol>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>下面的代码以带头节点的链表格式实现。大体思路实现与不带头节点的链表原理一致.<br />\n 接口格式源于 <a href=\"https://leetcode-cn.com/problems/design-linked-list/\"> <code>leetcode 707 链表设计</code> </a> .<br />\n 各位可自行测试自己的实现方式，本文的所有代码都在本地测试过，放心食用 (ฅ・ω・ฅ)</p>\n<h3 id=\"链表部分\"><a class=\"anchor\" href=\"#链表部分\">#</a> 链表部分</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyLinkedList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>MyLinkedList <span class=\"token operator\">*</span><span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 1. index &lt; 0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 2. 链表为空</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 3. index 过大</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     查找 第 index 个节点<span class=\"token punctuation\">,</span> 可能存在两种情况</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  1. 存在 第 index 个节点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//  2. 不存在 第 index 个节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> head <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 查 value 不需要获取前一个节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//head 非空代表存在整个值 返回 -1 ,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 否则返回 val</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">?</span> head<span class=\"token operator\">-></span>val <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 初始化新节点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 指向 head 后面的节点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 如果为空，也会指向空，所以无需 next 指向空</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 当链表为空，尾插变头插</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 初始化节点</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 查找最后一个节点</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>tail <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tail<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//obj 为空 无法获取到前一个节点</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// 尾节点指向新节点</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    tail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 过滤非法 index &lt; 0, 使用头插法，题目要求，正常情况过滤负数，特判头节点</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 找到第 index-1 个节点</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> head<span class=\"token operator\">-></span>next <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 和获取第 index 值 类似，只不过这里需要获取 前一个节点</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 判断退出条件</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">// 初始化节点，避免浪费空间</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    node<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">// 插入节点</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">// 异常拦截</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token comment\">// 分类讨论</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">// 1. 删除头节点</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        temp <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        obj<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token comment\">// 找到 第 index - 1 个节点</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> head<span class=\"token operator\">-></span>next <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">// 不存在则退出 函数</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 删除节点</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    temp <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>MyLinkedList <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token comment\">// 异常拦截</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        temp <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        head <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"本地测试主函数\"><a class=\"anchor\" href=\"#本地测试主函数\">#</a> 本地测试主函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    MyLinkedList <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> param_1 <span class=\"token operator\">=</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The index %d value is %d\\n\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> param_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=====================head insert============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================end insert=============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    val <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================index insert=============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    val <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    index <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================delete=============================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printfList</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "数据结构",
                "链表",
                "链表"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/Keil%E5%88%87%E6%8D%A2%E8%87%B3ARMCC-V6/",
            "url": "https://to-ywz.github.io/Embedded/STM32/Keil%E5%88%87%E6%8D%A2%E8%87%B3ARMCC-V6/",
            "title": "Keil切换至ARMCC-V6",
            "date_published": "2021-08-15T08:19:12.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"arm-compiler-6\"><a class=\"anchor\" href=\"#arm-compiler-6\">#</a> ARM Compiler 6</h1>\n<p>Keil V5 默认的编译器 是 ARM 自家的 ARM Compiler Version 5 (下面称为 AC5), 编译速度是很大的问题，不过编译出来的大小还是可以让人满意的.<br />\n 个人觉得 IAR 除了编译速度快，其实和 keil 差不多.<br />\n 但是现在 ARM Compiler Version 6 (下面称为 AC6) 的出现使得 Keil 的编译速度大幅上升.<br />\n 但是 从 AC5 切换到 AC6 并不是无缝切合的，需要进行一些配置.<br />\n 我会在这篇博客记录，我 从 AC5 切换到 AC6 出现过的问题，也方便诸位小伙伴查阅.</p>\n<h1 id=\"keil-如何抛弃-ac6\"><a class=\"anchor\" href=\"#keil-如何抛弃-ac6\">#</a> Keil 如何抛弃 AC6</h1>\n<p>在 keil 官方 是有很完整的一套说明的，诸位英语好可以自行看文档手册.<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vYXBwbm90ZXMvZmlsZXMvYXBudF8yOTgucGRm\"> 传送门</span><br />\n这里还有更加详细的文档:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vc3VwcG9ydC9tYW4vZG9jcy9hcm1jbGFuZ19pbnRyby8=\"> 传送门</span></p>\n<p>我安装 的是 Keil 5.33<br />\n 第一步，选择 AC6 编译器<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/005Q2GK3ly8gthocvs3r9j30lq0gbq5c.jpg\" alt=\"\" /><br />\n第二步，配置 优化等级<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127090916.png\" alt=\"\" /><br />\n优化等级配置为  <code>O1</code>  , 警告选择  <code>AC5</code>  级别，勾选 短枚举和  <code>wchar</code>  类型<br />\n第三步，修改汇编<br />\n这一步我们可以选择升级 CMSIS 的 pack 包，这样子我们新建的工程就可以直接进行编译了，<br />\n 无需修改汇编代码.<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127090941.png\" alt=\"\" /><br />\n 如果，要修改老版本的代码，则需要自己去修改启动文件。和  <code>__weak</code>  等汇编代码<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091003.png\" alt=\"\" /><br />\n这里由于，代码量太多，我就不放了，诸位自行修改</p>\n<p>到这一步，就可以直接编译了.<br />\n 下面看看两个编译时间的对比<br />\n AC5:<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091019.png\" alt=\"\" /><br />\nAC6:<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091039.png\" alt=\"\" /><br />\n 差不多快了 7 倍，而且所用的空间也明显减小了</p>\n<h1 id=\"bug2-rt-thrad-在-stm32cubemx-移植\"><a class=\"anchor\" href=\"#bug2-rt-thrad-在-stm32cubemx-移植\">#</a> bug2: RT-Thrad 在 STM32CubeMx 移植</h1>\n<p>我在移植 RT-Thread 的 底层调度器会出问题，会被识别为 C 的源码<br />\n所以需要进行修改<br />\n对文件右键选择 Option for File''<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091103.png\" alt=\"\" /><br />\n 选择汇编代码<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091120.png\" alt=\"\" /><br />\n这样子就不会出现 error 了</p>\n<p>正在找其他 bug, 未完...</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "keil",
                "ARMCCV6"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-CCS%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-CCS%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B/",
            "title": "TMS320F28379学习之旅:CCS工程的建立",
            "date_published": "2021-08-11T05:27:27.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h1>\n<p>PS: 图床出问题了，图片会有些糊，新浪直接上传图像有很大失真，等大佬维护好图床之后，或者我找到新图床后，再去更新一下这里的图片</p>\n<p>电赛延期了，虽然我不觉的今年的控制类题会是网上说的什么球形机器人，不过我也对控制题不怎么感兴趣<br />\n刘哥说了要做，那就做呗.<br />\n 第一次说延期的时候打算直接拿 32 做球形机器人，现在开赛遥遥无期，就先学学 TI 的 DSP , 他们说这个搞电机控制非常好.<br />\n 原本是想让我拿一块 TI 的 TMS320F28553 学的，结果莫得，只能拿这个双核的 TMS320F28379 开始我的 DSP 学习之旅.<br />\nTI 的 CCS 和 资料找起来是真的麻烦.(我还是喜欢 MDK)<br />\n 学吧学吧，为了梦想！</p>\n<h1 id=\"最最最最大前提说明\"><a class=\"anchor\" href=\"#最最最最大前提说明\">#</a> 最最最最大前提说明</h1>\n<p><strong>PS: 本教程环境为 Windows10 + CCS 10.4.0.00006 + C2000Ware + VSCode</strong></p>\n<h1 id=\"安装-ccs-1040\"><a class=\"anchor\" href=\"#安装-ccs-1040\">#</a> 安装 CCS 10.4.0</h1>\n<p><strong>PS: CCS 安装路径不能有任何中文，计算机的用户也不能是中文的！！！</strong><br />\n 诸位如果是中文用户名，最简单的方法就是，重装电脑 (狗头).<br />\n 但事实就是重装系统是最省事的方法.<br />\n 不过肯定会有人像我这样，知道鸽子飞起来，不知道鸽子用啥飞的人.<br />\n 如果这样的话，自行搜索 windows 修改电脑用户名称，大部分网上教程还是能说明白的.<br />\n 直接修改是没用的，还要修改注册表，桌面路径，C 盘的用户名称.<br />\nC2000Ware 这玩意我装了三天，删了好多次注册表，才装上去的.<br />\n 再也不用中文用户名了，颓废.</p>\n<p>言归正传，CCS 的 安装包可以直接去官网下载，这里给诸位贴一个下载链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL3Rvb2wvQ0NTVFVESU8=\"> 传送门</span><br />\n进去之后保持英文界面，中文界面可能导致找不到下载界面，但是可以鼠标右键谷歌翻译 (封杀成这样了吗...)<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080714.png\" alt=\"\" /><br />\n 然后点击 Download 进入下载区域<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080700.png\" alt=\"\" /><br />\n点击第一个，会弹出一个对话框选择第一个里的 windows 版本<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080648.png\" alt=\"\" /><br />\n下载完毕后和正常软件安装方式类似<br />\n不过 CCS 这里有一个检测，分别检测 系统，安装路径，中文字符 (Unicode 字符) 和反病毒软件<br />\n其中 Unicode 检测就是中文字符检测，前三个要是 有异常是无法安装 CCS 的.<br />\n 后面杀毒软件是个提示，无关紧要，一般不出问题<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080631.png\" alt=\"\" /><br />\n然后就是安装路径，安装包选择 (没必要选 full installation),<br />\n 接下去就是选择软件包了，C2000 少不了，顺带安装了 MSP430 和 432<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080614.png\" alt=\"\" /><br />\n 然后是调试器安装，我全选了，诸位按需修改<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080602.png\" alt=\"\" /><br />\n后面就是无脑 next, 在经过数分钟的猫猫摸鱼后，CCS 就安装完毕了</p>\n<h1 id=\"安装-c2000ware\"><a class=\"anchor\" href=\"#安装-c2000ware\">#</a> 安装 C2000Ware</h1>\n<p>安装这是因为，28379 毕竟是 32 位的 DSP 辣么多寄存器，配置不过来，还是得用库函数<br />\n C2000Ware 里有大量的例程，可以用于学习，能在学东西的时候少走些弯路.<br />\n 话又说会来，底层的寄存器在配置的时候发生了什么变化，还是需要知道的<br />\n PS: 安装这一块我就不截图了，放个链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tLmNuL3Rvb2wvY24vQzIwMDBXQVJFP2tleU1hdGNoPUMyMDAwV2FyZSUyMDElMjAwMCUyMDA2JTIwMDAlMjBzZXR1cCZhbXA7dGlzZWFyY2g9U2VhcmNoLUNOLVByb2R1Y3Rz\"> 传送门</span></p>\n<p>C2000Ware 的安装要比 CCS 来的简单，我们只需要选择路径就好，<br />\n 除了 C2000Ware 之外还有一个 软件也有历程，但是说是历程少，我就没怎么留心<br />\n又是几分钟的猫猫摸鱼，装完之后没有快捷方式会出现在你安装路径中<br />\n<strong> PS: 用户名是中文但是修改成英文的猫猫需要注意，可能会出现找不到开始菜单栏的错误，在安装过程中，如果出现这个错误，就乖乖的去把注册表里的你之前的中文用户名相关的信息全部改了我也不太清楚是哪一个东西的问题，我是改了快 6 个点</strong></p>\n<p>安装完毕后大概是这样的<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080547.png\" alt=\"\" /><br />\n boards 文件夹是 TI 的 LaunchPad 的历程<br />\n device_support 和 driverlib 都是库函数 具体区别我没分清楚<br />\n libraries 和 example 都是 历程，具体区别我也没分清楚，以后学明白了再回来补充说明</p>\n<h1 id=\"新建-empty-工程\"><a class=\"anchor\" href=\"#新建-empty-工程\">#</a> 新建 Empty 工程</h1>\n<p>这里我比较懒，而且不熟悉 手中的 LaunchPad 到底需要什么 配置我选择直接导入历程中的 empty_project<br />\n 等以后学明白再来更新，徒手建立新工程的方法<br />\n打开 CCS , 选择工作区，自行新建文件夹<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080533.png\" alt=\"\" /><br />\n进去后界面如下，点击 file 然后选择 import<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080520.png\" alt=\"\" /><br />\n 接着会弹出一个导入类型选择，我们选 CCS project<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080505.png\" alt=\"\" /><br />\n 选完之后会出现一个新的界面，点击 Browse 在 C2000Ware 安装的路径下找到自己型号的 Project<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080453.png\" alt=\"\" /><br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080440.png\" alt=\"\" /><br />\n 然后点击 Finish, 就可以看到这个界面了，同时 import 的工程会在你的工作区中生成，不会在原文件中 修改<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080425.png\" alt=\"\" /><br />\n在 CCS 中没有 Download , 只有 DEBUG, 习惯就好，至于其他功能我还在琢磨</p>\n<h1 id=\"学习启动仪式点个灯\"><a class=\"anchor\" href=\"#学习启动仪式点个灯\">#</a> 学习启动仪式：点个灯</h1>\n<p>一个空工程建立完毕了，为了有点仪式感，点个灯庆祝一下.<br />\n 我去翻了一下原理图，D9 和 D10 分别是 pin 31 和 pin 34.<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211117080406.png\" alt=\"\" /><br />\n 无论啥板子，LED 点亮无非就是 GPIO 操作.<br />\n 把 GPIO 配置成 什么模式，上拉还是下来，输出什么电平，不认识寄存器直接先去查查 库函数<br />\n奈何我英语太差没看明白，直接去翻例程，发现 涉及到几个函数</p>\n<p>配置引脚工作模式<br />\n <code>void GPIO_setPadConfig(uint32_t pin, uint32_t pinType)</code> <br />\n 配置引脚输出方向<br />\n <code>void GPIO_setDirectionMode(uint32_t pin, GPIO_Direction pinIO)</code> <br />\n 配置引脚出电压<br />\n <code>static inline void GPIO_writePin(uint32_t pin, uint32_t outVal)</code></p>\n<p>这些函数在库里都有注释，不过全是英文的，还在我的阅读能力之内.<br />\n 注释可以直接看到参数范围，或者取什么参数.<br />\n 这里我直接贴一下我的源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @file main.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @author BlackSheep (blacksheep.208h@gmail.com)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @brief </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @version 0.1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @date 2021-08-11</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @copyright Copyright (c) 2021</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Included Files</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// LED Marco</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LED_ON</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LED_OFF</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEVICE_DELAY_MS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// funcation</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setupLED</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_trunON</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_turnOFF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// Initializes system control, device clock, and peripherals</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">Device_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">Device_initGPIO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// Initializes LED GPIO</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">setupLED</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">Interrupt_initModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">Interrupt_initVectorTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// Enable interrupts and debug event</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    EINT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// E INT: Enable interrupt</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    ERTM<span class=\"token punctuation\">;</span> <span class=\"token comment\">// E RTM:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">250000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">500000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_trunON</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">GPIO_writePin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> LED_ON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_trunOFF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">GPIO_writePin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> LED_OFF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">LED_Toggle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">GPIO_togglePin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setupLED</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED1<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED1<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED2<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>DEVICE_GPIO_PIN_LED2<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// End of File</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr></table></figure><p>现象是 LED1 闪烁 先亮，然后 250ms 后 LED2 亮，然后熄灭顺序也相同，<br />\n 不过我是用了 gpio 反转的函数 原理和上面差不多</p>\n<p>好了，这篇新建工程就这样了.<br />\n 以上是我个人观点，如有不正，望大佬斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32TIM%E7%BC%96%E7%A0%81%E5%99%A8%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32TIM%E7%BC%96%E7%A0%81%E5%99%A8%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE/",
            "title": "STM32TIM编码器模式配置",
            "date_published": "2021-08-09T11:43:23.000Z",
            "content_html": "<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n<h1 id=\"stm32-hal库-编码器模式配置\"><a class=\"anchor\" href=\"#stm32-hal库-编码器模式配置\">#</a> STM32 HAL 库 编码器模式配置</h1>\n<p>前几天准备电赛的时候，朋友编码器数值读不出来，我好奇也就凑合了一下，记录一下配置过程</p>\n<p><strong>PS: 开发环境 STM32 HAL 库 + STM32CubeMX + MDK + VSCode + Windows10</strong></p>\n<h2 id=\"相关硬件\"><a class=\"anchor\" href=\"#相关硬件\">#</a> 相关硬件</h2>\n<h3 id=\"电机\"><a class=\"anchor\" href=\"#电机\">#</a> 电机</h3>\n<p>用的是 370 电机，减速器为 513, 减速比为 1:30<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092041.png\" alt=\"\" /></p>\n<h3 id=\"编码器\"><a class=\"anchor\" href=\"#编码器\">#</a> 编码器</h3>\n<p>用的和电机一体的霍尔编码器，不知直到从哪买的，淘宝上查出来是 13pr<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092103.png\" alt=\"\" /></p>\n<h3 id=\"主控\"><a class=\"anchor\" href=\"#主控\">#</a> 主控</h3>\n<p>用的普中的 407 核心板，换了一个牛角座，没有使用它 usb 转串口<br />\n跳线帽一接上，对接 Xshell Jlink 直接红灯.<br />\n 用了一对 lora 的无线串口，外部高速晶振 8M<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092119.png\" alt=\"\" /></p>\n<h2 id=\"hal库配置\"><a class=\"anchor\" href=\"#hal库配置\">#</a> HAL 库配置</h2>\n<h3 id=\"工欲善其事\"><a class=\"anchor\" href=\"#工欲善其事\">#</a> 工欲善其事</h3>\n<p>学习一个功能最好的方法就是直接查阅数据手册.<br />\n 脉冲计数最有可能是定时器的输入捕获功能，所以咱先去看看有没有定时器有没有对应的模式，这种工作模式基本都在 通用或者高级 定时器上，先去看看高级定时器<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092140.png\" alt=\"\" /><br />\n哎，有。那再看看通用定时器<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092158.png\" alt=\"\" /><br />\n也有，TIM2 和 TIM5 的 counter 还是 32 位的<br />\n这样子就齐活了，现在去看看 编码器转起来的波形密度，决定用哪个定时器<br />\n 13 ppr 我实在是不明白什么意思，只能等转起来直接看数据了<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092215.png\" alt=\"\" /><br />\n啧，这只能用 TIM2 先顶着了。接下去就去新建工程啦</p>\n<h3 id=\"基本配置\"><a class=\"anchor\" href=\"#基本配置\">#</a> 基本配置</h3>\n<p>新建 HAL 库的新工程我就不详细说了，不会的可以参见这篇博客: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0NTL0VtYmVkZGVkL1NUTTMyLyVFNiU5NiVCMCVFNSVCQiVCQUhBTCVFNSVCQSU5MyVFNSVCNyVBNSVFNyVBOCU4QiVFNyU5QSU4NCVFNiU5NiVCOSVFNiVCMyU5NS8=\">传送门</span>.<br />\n 这里我就简单的说一下基本配置</p>\n<h4 id=\"sys-配置\"><a class=\"anchor\" href=\"#sys-配置\">#</a> SYS 配置</h4>\n<p>为了防止锁死芯片，Debug 选项配置为  <code>Serial Wire</code></p>\n<h4 id=\"时钟配置\"><a class=\"anchor\" href=\"#时钟配置\">#</a> 时钟配置</h4>\n<p>我使用外部高速晶振，<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092238.png\" alt=\"\" /></p>\n<p>外部晶振 8M, 主频 168M, 时钟树如下<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092305.png\" alt=\"\" /><br />\n然后为了便于查看结果开启一路串口 USART1<br />\n 配置如下<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092320.png\" alt=\"\" /></p>\n<p>由于 TIM2 的  <code>Counter Period</code>  是 32 位的所以我在这里选择了 TIM2<br />\n 没有进行分频，计数值拉到最大，防止溢出中断，通道 1 和通道 2 被编码器模式复用，所以编程灰色， <code>combined Channels</code>  选择  <code>Encoder Mode</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092337.png\" alt=\"\" /></p>\n<p>然后成功工程即可</p>\n<h2 id=\"相关函数\"><a class=\"anchor\" href=\"#相关函数\">#</a> 相关函数</h2>\n<p>我们这里就简单的使用 DMA 和 IT 模式以后再探索</p>\n<h3 id=\"启动编码器计数\"><a class=\"anchor\" href=\"#启动编码器计数\">#</a> 启动编码器计数</h3>\n<p>Encoder Mode 的 初始化函数和开启函数如下 如下图:<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092351.png\" alt=\"\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HAL_StatusTypeDef <span class=\"token function\">HAL_TIM_Encoder_Start</span><span class=\"token punctuation\">(</span>TIM_HandleTypeDef <span class=\"token operator\">*</span>htim<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数是 对应的定时器 htim2, 因为有 A 相位，B 相位 使用两个通道，所以使用参数 <code>TIM_CHANNEL_ALL</code> <br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092413.png\" alt=\"\" /></p>\n<h3 id=\"获取编码器数值\"><a class=\"anchor\" href=\"#获取编码器数值\">#</a> 获取编码器数值</h3>\n<p>获取脉冲方向，返回方向 0 或 1</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__HAL_TIM_IS_TIM_COUNTING_DOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取脉冲次数函数，返回脉冲次数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__HAL_TIM_GET_COUNTER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>TIM2 定时器 Encoder 模式读出的数值自带方向 (正负)</p>\n<h2 id=\"简单读取数值测试\"><a class=\"anchor\" href=\"#简单读取数值测试\">#</a> 简单读取数值测试</h2>\n<p>我这里写了一个简单的测试样例</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getEncoderValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> Direction <span class=\"token operator\">=</span> <span class=\"token function\">__HAL_TIM_IS_TIM_COUNTING_DOWN</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>htim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> GetData <span class=\"token operator\">=</span> <span class=\"token function\">__HAL_TIM_GET_COUNTER</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>htim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encoder: %d\\r\\n\"</span><span class=\"token punctuation\">,</span> GetData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果如下<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092433.png\" alt=\"\" /><br />\n我测出这个电机转一圈会产生 600 次脉冲，TIM2 和 TIM5 读出的 脉冲数自带方向当从 0 开始反向选装 printf 打印出的数据自带符号，</p>\n<p>使用 printf 记得重定向一下  <code>printf</code> <br />\n 这里提供一下全版本的 编译器的 printf 重定向</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span> __CC_ARM <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PUTCHAR_PROTOTYPE</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span>        </span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * Arm Compiler above 6.10.1 (armclang)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>__ARMCC_VERSION<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>__ARMCC_VERSION <span class=\"token operator\">>=</span> <span class=\"token number\">6100100</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PUTCHAR_PROTOTYPE</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * GNU Compiler</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">elif</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span> __GNUC__ <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/* With GCC, small printf (option LD Linker->Libraries->Small printf</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   set to 'Yes') calls __io_putchar() */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PUTCHAR_PROTOTYPE</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token function\">__io_putchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>PUTCHAR_PROTOTYPE</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 具体哪个串口可以更改 huart1 为其它串口</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">HAL_UART_Transmit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>huart1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h2>\n<p>大概小结一下，开启编码器模式:</p>\n<ol>\n<li>选定定时器，选定 Encoder 模式</li>\n<li>配置 分配因子 和 计数周期</li>\n<li>使用相关函数 获取计数值</li>\n</ol>\n<p>以上皆为个人简单实践，如有错误，望斧正.</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": []
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/RT-Thread-Nano%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5/",
            "url": "https://to-ywz.github.io/Embedded/STM32/RT-Thread-Nano%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5/",
            "title": "RT-Thread 线程间同步",
            "date_published": "2021-08-07T08:42:32.000Z",
            "content_html": "<h2 id=\"前情\"><a class=\"anchor\" href=\"#前情\">#</a> 前情</h2>\n<p>PS: 以下内容参考 RT-Thread 标准版本文档<br />\n RTOS 的加入大大的减少了时序冲突，也带来了新的问题.<br />\n 如何让线程 按照一定顺序执行？<br />\n 线程的执行顺序由优先级决定<br />\n同等优先级读入顺序，顺序执行，单次最大执行时间由时间片决定</p>\n<p>按这种情况，则会存在 一块 RAM 内 在同一时间内，被两个线程操作.<br />\n 例如，LCD 显示 Camera 采集的图像这个需求.<br />\n 仅仅依赖上述限制，就会出现，LCD 开开心心的在画图，摄像头啪的一下，很快啊，LCD 没有闪，LCD 被换了一幅图都没有发觉，然后继续画，就出现 &quot;脏数据&quot; , 图就显示异常了</p>\n<p>这时候就涉及到了 共享内存的排他性，我们需要做到同一时间内有且仅有一个线程对共享内存进行操作，<br />\n 如上面举的例子，LCD 和 Camera 操作内存的时候 需要两个线程需要互斥并且需要按一定顺序去执行，这样子才能实现目标功能<br />\n这种行为就被称为同步.</p>\n<p>几个概念:</p>\n<ol>\n<li>\n<p>什么是同步？<br />\n 同步是指按预定的先后次序进行运行.<br />\n 线程的同步是指 多个线程 通过 特定机制 来控制线程之间的 执行顺序.<br />\n 换而言之，没有同步，线程之间将是无序的.<br />\n 并非说无序不好，如果线程和线程之间 本没有冲突 或 临界资源 那么，无序也无可厚非</p>\n</li>\n<li>\n<p>什么是临界区？<br />\n 多个线程同时 访问或操作 统一块区域 (代码).</p>\n</li>\n<li>\n<p>什么线程互斥<br />\n对于临界资源访问的排他性，当多个线程都需要使用临界资源时，任何时刻最多只允许一个线程去使用.<br />\n 线程互斥可以视为一个特殊的线程同步</p>\n</li>\n</ol>\n<p>对于线程同步，无论使用什么方法，其核心都是: <mark>临界区有且仅有最多一个线程运行</mark></p>\n<h2 id=\"线程同步方式\"><a class=\"anchor\" href=\"#线程同步方式\">#</a> 线程同步方式</h2>\n<h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<h4 id=\"什么是信号量\"><a class=\"anchor\" href=\"#什么是信号量\">#</a> 什么是信号量:</h4>\n<p>RT-Thraed 官方 举的例子很形象，我就发表自己的见解了，下面来自 RT-Thraed 标准文档</p>\n<ol>\n<li>当停车场空的时候，停车场的管理员发现有很多空车位，此时会让外面的车陆续进入停车场获得停车位</li>\n<li>当停车场的车位满的时候，管理员发现已经没有空车位，将禁止外面的车进入停车场，车辆在外排队等候</li>\n<li>当停车场内有车离开时，管理员发现有空的车位让出，允许外面的车进入停车场待空车位填满后，又禁止外部车辆进入</li>\n</ol>\n<p>这个例子中，管理员相当于信号量，空车位的个数为信号量的值，停车区相当于临界区，车辆就相当于线程<br />\n车辆 获取 车位，可以视为 线程 通过尝试拿走信号量的值，来获取 临界资源</p>\n<h4 id=\"工作机制\"><a class=\"anchor\" href=\"#工作机制\">#</a> 工作机制</h4>\n<p>每个信号量对象都有一个信号量值和等待线程队列<br />\n信号量的值对应了信号量对象的实例数目，资源数目<br />\n当信号量值为 0 时，线程再通过 信号量 申请进入临界区的时候，就会被挂起到该信号量的等待队列上，直到新的信号量实例产生</p>\n<h4 id=\"信号量控制\"><a class=\"anchor\" href=\"#信号量控制\">#</a> 信号量控制</h4>\n<p>在 RT-Thread 中，信号量控制块 (scb) 是操作系统控制信号量的一个数据结构，由  <code>struct rt_semaphore</code>  表示，<br />\n 其句柄由  <code>rt_sem_t</code>  表示.<br />\n 简单来说，信号量控制块 在 C 语言 中的体现 是信号量结构体，而句柄就是指向这个数据类型的指针<br />\n在 rt-thraed 中 信号量 由 rt_ipc_object 派生，被 IPC 容器管理，最大值为 65535.</p>\n<p>至于什么是容器，我理解 为同种功能 或 同种 通信方式共同存储的地方，例如 IPC 容器，就只存放进程间通信的 结构体，什么信号量，互斥量，管道，消息队列之类<br />\n更简单点说就是，我们把水果分为 苹果，香蕉，梨... 但是他们都是水果这个容器，但是 西红柿想进来就不行，因为他是蔬菜，不属于水果这个容器</p>\n<p>PS: 初始值为 1 的信号量，为二值信号</p>\n<h4 id=\"信号量的管理\"><a class=\"anchor\" href=\"#信号量的管理\">#</a> 信号量的管理</h4>\n<p>在 RT-Thread 中 关于 信号量的 以共有一下四种:</p>\n<ol>\n<li>创建 / 初始化:  <code>rt_sem_create/init()</code> .  <code>create</code>  为动态创建， <code>init</code>  为静态创建</li>\n<li>获取       :  <code>rt_sem_take/trytake()</code> .  <code>trytake</code>  是非堵塞 获取 信号量.</li>\n<li>释放       :  <code>rt_sem_release()</code> .</li>\n<li>删除 / 脱离  :  <code>rt_sem_delete/detach()</code> .  <code>detach</code>   仅仅是将信号量从链表中移除<br />\n<img data-src=\"https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/ipc1/figures/06sem_ops.png\" alt=\"alt 图片来源: https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/ipc1/ipc1?id=%e4%bf%a1%e5%8f%b7%e9%87%8f\" /></li>\n</ol>\n<h4 id=\"创建信号量\"><a class=\"anchor\" href=\"#创建信号量\">#</a> 创建信号量</h4>\n<p>RT-Thread 中，创建信号量接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_sem_t</span> <span class=\"token function\">rt_sem_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token class-name\">rt_uint32_t</span> value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token class-name\">rt_uint8_t</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当这个函数被调用的时候，系统会从对象管理器中申请一个 semaphore 对象，并初始化这个对象，然后初始化 父类 IPC 对象以及 semaphore 相关部分<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091719.png\" alt=\"\" /></p>\n<p>函数参数中有一个 flag. 这个 参数 代表了当信号量值为 0 时，线程等待时的排序方式.<br />\n <code>RT_IPC_FLAG_FIFO</code> : 先进先出，线程采用队列的方式，谁先来谁先处理<br />\n <code>RT_IPC_FLAG_PRIO</code> : 等待队列按优先级排队，</p>\n<p>PS:  <code>RT_IPC_FLAG_FIFO</code>  属于非实时调度方式，除非应用程序非常在意先来后到，否则建议采用 RT_IPC_FLAG_PRIO, 即确保线程的实时性</p>\n<h4 id=\"删除信号量\"><a class=\"anchor\" href=\"#删除信号量\">#</a> 删除信号量</h4>\n<p>删除 create 生成的信号量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当释放 信号量时，有线程正在等待信号量，那么函数会先唤醒等待在该信号量上的线程，然后 再释放信号量资源.<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091731.png\" alt=\"\" /></p>\n<h4 id=\"初始化信号量-和-脱离信号量\"><a class=\"anchor\" href=\"#初始化信号量-和-脱离信号量\">#</a> 初始化信号量 和 脱离信号量</h4>\n<p>对于静态信号量，内存空间再编译时就被分配了，放在数据段或未初始化的数据段上，就像放在 猫舍的 猫猫<br />\n这时候，只需要 init 信号量即可，让其回到自己家中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span>       sem<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 信号量对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span>     <span class=\"token operator\">*</span>name<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 信号量名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    <span class=\"token class-name\">rt_uint32_t</span>    value<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 信号量初始值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token class-name\">rt_uint8_t</span>     flag<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 信号量标志</span></pre></td></tr></table></figure><p>与动态创建相比，init 少了申请内存空间的部分，其他还是一致的<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091748.png\" alt=\"\" /></p>\n<p>与动态创建的信号量不同的是，静态的信号量无法被释放，只能从内核对象管理器中移除，<br />\n 毕竟空间是编译过程中分配出来的，又不能让程序自己再编译自己一次<br />\n函数接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_detach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>于动态创建的 信号量相似，内核先唤醒挂在该信号等待列表上的线程，然后将这信号量从内核管理器上脱离.<br />\n 等待线程会获得一个错误码.</p>\n<p>PS: 对于那些一直要使用的 信号量 建议直接设置为静态的，这样子可以保证线程启动时，即存在信号量.<br />\n 对于 在一定时间内使用的信号量，或者是间歇性使用的信号量，则 使用 create 来创建，这样子有利于内存资源 的重复利用</p>\n<h4 id=\"获取信号量\"><a class=\"anchor\" href=\"#获取信号量\">#</a> 获取信号量</h4>\n<p>在 RT-Thread 中 存在两种 获取信号量的方式：阻塞获取 和 非阻塞获取</p>\n<p><strong>对于阻塞获取:</strong><br />\n 当线程执行到获取信号量时，如果 信号量 非空，则使信号量 -1, 并执行对应的程序<br />\n如果为空，申请该信号量的线程将根据 time  参数的情况选择直接返回、或挂起等待一段时间、或永久等待，直到其他线程释放信号量或者超时</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_take</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span>    sem<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 信号量对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token class-name\">rt_int32_t</span>  time  <span class=\"token comment\">// 指定的等待时间，单位是操作系统时钟节拍</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>time</code>  参数除了正常 的参数之外有两个宏，分别代表，永久等待 和 直接返回.<br />\n <code>RT_WAITING_NO</code>  和  <code>RT_WAITING_FOREVER</code> .</p>\n<p><strong>对于非阻塞获取:</strong><br />\n 如果 我们不想线程某个线程 在数据采集时 就被挂起，则可以使用 无等待的方式获取信号量<br />\n接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_trytake</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当 信号量值不可用时，线程直接返回  <code>-RT_ETIMOUT</code>  然后回到正常执行线程其他程序<br />\n PS: 当  <code>time</code>  参数设置为  <code>RT_WAITING_NO</code>  时 等价于 非阻塞获取</p>\n<h4 id=\"释放信号量\"><a class=\"anchor\" href=\"#释放信号量\">#</a> 释放信号量</h4>\n<p>释放信号量可以唤醒挂起在该信号量上的线程.<br />\n 接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_sem_t</span> sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当 信号量的等待线程中没有线程时，信号量值 +1, 如果存在等待线程则由该线程获取其产生的信号</p>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091805.png\" alt=\"\" /></p>\n<h4 id=\"应用场合\"><a class=\"anchor\" href=\"#应用场合\">#</a> 应用场合</h4>\n<p>我觉得 信号量十分适合 传感器数据采集线程 和 显示线程的同步.<br />\n 准确来说，但凡涉及到多个线程同时访问 统一临界资源的时候就很合适，毕竟 &quot;脏数据&quot; 还是很烦人的</p>\n<p>中断和线程之间也可以 使用信号量来 同步<br />\n最典型的就是串口通信.<br />\n 当串口没有收到数据的时候，数据处理线程被挂起<br />\n一旦串口收到数据接收完数据后释放信号量，如上文所属，当等待列表有线程挂起时，信号量已就位就会直接启动等待线程队列的线程<br />\n最典型的例子就是 FinSH, msh 交互时响应速度极快</p>\n<p>还可以用于资源计数器<br />\n这一块就类似 CPU 和高速缓存。可能是数据采集线程过于慢 而 数据处理线程需要数据过多且处理速度快，<br />\n 这样子就可以 初始化信号量不为 1 , 这样子通过多次 take 信号量直到信号量位空才开始工作，就能达到 降速同步的效果</p>\n<p>PS: 一般资源计数类型多是混合方式的线程间同步，因为对于单个的资源处理依然存在线程的多重访问，这就需要对一个单独的资源进行访问、处理，并进行锁方式的互斥操作.</p>\n<h3 id=\"互斥量\"><a class=\"anchor\" href=\"#互斥量\">#</a> 互斥量</h3>\n<h4 id=\"什么是互斥量\"><a class=\"anchor\" href=\"#什么是互斥量\">#</a> 什么是互斥量</h4>\n<p>这一块官方的例子就不太合适了.<br />\n 我来说一说我的理解，我觉得信号量就是一个示波器，当你在使用的时候，其他人就不能使用，只有等你使用完毕后，其他人才能去使用</p>\n<h4 id=\"工作机制-2\"><a class=\"anchor\" href=\"#工作机制-2\">#</a> 工作机制</h4>\n<p>互斥量可以视为 一个比较特殊的 信号量，因为只有 0 和 1.<br />\n 但与信号量不同的地方在于，互斥量支持递归访问，和 避免优先级反转.<br />\n 例如，数据处理优先级的高，但是由于数据并没有次啊及完毕，处理线程只能先挂起，等待采集线程执行完毕<br />\n这时就可以考虑使用互斥锁.<br />\n 互斥量只有两种状态，开锁 | 闭锁。当有线程持有它时，互斥量处于上锁状态。当这个线程解锁互斥量时，互斥量处于 空闲态.<br />\n 当一个线程持有 互斥量时，其他线程无法对齐进行开锁或持有，而且互斥量的拥有者能再此获得这个锁.<br />\n 就类似于你给你的保险柜又套了一个更大的保险柜.</p>\n<p>官方文档里有一句话说的不太明白:<br />\n <code>这个特性与一般的二值信号量有很大的不同：在信号量中, 因为已经不存在实例, 线程递归持有会发生主动挂起（最终形成死锁）</code> <br />\n可能官方认为看到这的都是有很扎实 操作系统功底 的人，所以没有介绍一下 什么是递归持有，什么是死锁以及 递归持有 是如何形成死锁的<br />\n我在这简单的说一下下，毕竟我 OS 学的也很烂，要不然也不至于来看 理解多线程编程</p>\n<p><strong>死锁:</strong><br />\n 所谓的死锁就是 两个或两个以上的线程互相持有对方所需要的资源，如果线程不主动释放资源，两个程序都处于挂起态，一直不被执行<br />\n产生死锁需要满足一些条件:</p>\n<ol>\n<li>互斥：释放和拿走信号都是一个线程，而且这个信号量最大值为 1.</li>\n<li>请求和保持：一个线程中存在释放和获取两个操作</li>\n<li>不剥夺：信号量的最大值为 1</li>\n<li>循环等待：在 RTT 中为 rt_sem_take 使用  <code>RT_WAITING_FOREVER</code>  参数<br />\n一般来说，单线程死锁只可能是递归持有 (虽然我也不明白为什么要递归持有)</li>\n</ol>\n<p>满足以上条件的 代码大概长成这样 (不是死锁):</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thread1_entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>parameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 互斥 只有 0 和 1, 我拿走后，其他线程想用只能等我释放</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">rt_sem_create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sem_lock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> RT_IPC_FLAG_PRIO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 尝试上锁，拿不到就死等，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取信号量，获取成功后就可以对临界区数据写入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">handle_RecData</span><span class=\"token punctuation\">(</span>RecBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里进行数据处理，RecBuf 为临界区数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量，让其他线程可以处理临界区数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 开锁，我不放开，没有人能拿到这个锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现实中死锁的例子大概就像这样:<br />\n<img data-src=\"https://s2.51cto.com/oss/202012/17/0dfeb6e46a3a3266229402c70e8fa12f.jpg-wh_651x-s_1043876250.jpg\" alt=\"alt\" /></p>\n<p>两个线程的死锁大概是这样子的 (写代码有些麻烦，就直接画个图，很丑つ﹏⊂)<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091830.png\" alt=\"\" /><br />\n 双横线的箭头表示当前执行到的位置，单线箭头表示 语句之间的等待关系<br />\n线程 1 和 线程 2 相互等待所需的资源被释放就形成死锁</p>\n<p><strong>递归持有</strong><br />\n递归还是很熟悉的，所谓的递归持有就是在一个线程中多次 take 了 同一个信号量.<br />\n 但由于 该信号量是二值信号，在第一次被 take 之后，信号量就归为 0. 如果没有外部的线程释放信号量，或者当前线程主动释放信号量，那么就会产生死锁</p>\n<p>代码在 rt-thread 中的 样子大概是这样的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thread1_entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>parameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">/* 临 界 区，上 锁 进 行 操 作 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取信号量，此时信号量为被获取，变成了 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t  操作临界区 1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">rt_sem_take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">,</span> RT_WAITING_FOREVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 想再次获取，但是此时由于信号量为 0, 获取不到就一直等待，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 但是释放信号量的操作在下面，所以信号量根本释放不了，这个线程就锁死在上面那句语句，成了解不开的死锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 所以下面的部分永远不会执行到</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    操作临界区 2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量，让其他线程可以处理临界区数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">rt_sem_release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sem_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量，让其他线程可以处理临界区数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用二值信号进行递归持有很容易导致死锁，所以遇到这种情况建议直接使用 互斥量.</p>\n<p><strong>关于优先级反转</strong><br />\n所谓的优先级反转就是，因为逻辑设计不合理而导致线程真正的优先级和预设的优先级不同.<br />\n 当 高优先级的线程  <code>A</code>  和 低优先级的线程  <code>B</code>  共享相同资源 buf 时，<br />\n 会存在 低优先级 <code>B</code>  占用  <code>buf</code> , 而 高优先级的  <code>A</code>  已就绪，<br />\n 这时候就会 切换到  <code>A</code> , 然而  <code>buf</code>  被占用， <code>A</code>  只能先被挂起，等待  <code>B</code>  释放  <code>buf</code> <br />\n 当这时候如果存在一个优先级介于  <code>A</code>   <code>B</code>  之间的线程  <code>C</code> , 且  <code>C</code>  在  <code>B</code>  未释放  <code>buf</code>  的时候就 进入了就绪态<br />\n那么  <code>B</code>  就会被中断，先去执行  <code>C</code> , 这样子就导致  <code>A</code>  线程的优先级比  <code>C</code>  高，但 后于  <code>C</code>  执行<br />\n这就算优先级反转</p>\n<h4 id=\"互斥量的管理方式\"><a class=\"anchor\" href=\"#互斥量的管理方式\">#</a> 互斥量的管理方式</h4>\n<p>与信号量类似，互斥量 也分为 静态和动态 创建，对应的废弃方式也是分为 脱离 和 删除.<br />\n 释放和获取的接口是一致的<br />\n<img data-src=\"https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/ipc1/figures/06mutex_ops.png\" alt=\"alt 图片来源: https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/ipc1/ipc1?id=%e4%ba%92%e6%96%a5%e9%87%8f\" /></p>\n<h4 id=\"创建和删除互斥量\"><a class=\"anchor\" href=\"#创建和删除互斥量\">#</a> 创建和删除互斥量</h4>\n<p>这一块是 动态 创建和删除 互斥量<br />\n<strong>创建互斥量</strong><br />\n接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_mutex_t</span> <span class=\"token function\">rt_mutex_create</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 互斥量的名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                            <span class=\"token class-name\">rt_uint8_t</span> flag   <span class=\"token comment\">// 已作废，均按 RT_IPC_FLAG_PRIO 处理</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>虽然官方说作废了，但在两个初始化中还是有赋值的操作的，只不过在 take 时进行了修改，只建议各位手动填入  <code>RT_IPC_FLAG_PRIO</code> .<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091926.png\" alt=\"\" /></p>\n<p><strong>删除互斥量</strong><br />\n接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_delete</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，所有被挂起的线程都会被环形，并获得一个 其他错误的 错误返回值</p>\n<h4 id=\"初始化和脱离互斥量\"><a class=\"anchor\" href=\"#初始化和脱离互斥量\">#</a> 初始化和脱离互斥量</h4>\n<p>以下方法适用于静态互斥量</p>\n<p><strong>初始化互斥量</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_init</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 互斥量对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                       <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 互斥量的名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       <span class=\"token class-name\">rt_uint8_t</span> flag      <span class=\"token comment\">// 该标志已经作废</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>脱离互斥量</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_detach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用该函数接口后，内核先唤醒所有挂在该互斥量上的线程（线程的返回值是 -RT_ERROR）, 然后系统将该互斥量从内核对象管理器中脱离</p>\n<h4 id=\"获取互斥量\"><a class=\"anchor\" href=\"#获取互斥量\">#</a> 获取互斥量</h4>\n<p>任何时刻，互斥量只能被一个线程持有</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_take</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 被申请的互斥量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token class-name\">rt_int32_t</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 超时时间</span></pre></td></tr></table></figure><p>如果互斥量没有被控制，那么线程成功获取该互斥量.<br />\n 如果互斥量已经被当前线程线程控制，则该互斥量的持有计数加 1, 当前线程也不会挂起等待。这样就可以避免递归持有导致锁死<br />\n如果互斥量已经被其他线程占有，则当前线程在该互斥量上挂起等待，直到其他线程释放它或者等待时间超过指定的超时时间</p>\n<h4 id=\"无等待获取互斥量\"><a class=\"anchor\" href=\"#无等待获取互斥量\">#</a> 无等待获取互斥量</h4>\n<p>当用户不想在申请的互斥量上挂起线程进行等待时，可以使用无等待方式获取互斥量，无等待获取互斥量使用下面的函数接口:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_trytake</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"释放互斥量\"><a class=\"anchor\" href=\"#释放互斥量\">#</a> 释放互斥量</h4>\n<p>线程完成互斥量所控制的资源访问后，应该尽快的释放其控制的互斥量，使得其他线程能及时获取该互斥量<br />\n避免加锁过久导致实时性降低</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_mutex_release</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_mutex_t</span> mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用该函数的线程必须是该互斥量的所有者，每释放一次该互斥量，持有数就 -1.<br />\n 当该互斥量的持有计数为零时，互斥量回复空闲状态，可被其他线程获取，等待在该信号量上的线程将被唤醒</p>\n<p>如果线程的运行优先级被互斥量提升。那么当互斥量被释放后，线程恢复为持有互斥量前的优先级</p>\n<p><img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127091940.png\" alt=\"优先级恢复\" /></p>\n<h4 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h4>\n<p>互斥量的使用比较单一，因为它是信号量的一种，并且它是以锁的形式存在<br />\n在初始化的时候，互斥量永远都处于开锁的状态，而被线程持有的时候则立刻转为闭锁的状态.</p>\n<p>互斥量更适合于:</p>\n<ol>\n<li>单一线程内部信号量多次持有信号量，导致 无法释放 (目前没有遇到，遇到再处理)</li>\n<li>可能会由于多线程同步而造成优先级翻转的情况，这个比较适合用在 单一传感器 需要被多个线程获取境界资源的场景</li>\n</ol>\n<h3 id=\"事件集\"><a class=\"anchor\" href=\"#事件集\">#</a> 事件集</h3>\n<h4 id=\"什么是事件集\"><a class=\"anchor\" href=\"#什么是事件集\">#</a> 什么是事件集</h4>\n<p>事件集是线程同步的一种方式，一个事件集可以包含多个世界，利用事件可以完成一对多，多对多的线程间同步.<br />\n 例如，当按键按下 LED 点亮，或者 ADC 检测到电压过低 OLED , LED, 蜂鸣器同时报警.<br />\nRTT 官方的例子很不错。我就直接搬过来啦<br />\n以下文字来源于 RTT 文档中心 --&gt;RT-Thread 标准版 --&gt; 内核 --&gt; 事件集部分</p>\n<p>以坐公交为例说明事件，在公交站等公交时可能有以下几种情况：<br />\n①P1 坐公交去某地，只有一种公交可以到达目的地，等到此公交即可出发<br />\n②P1 坐公交去某地，有 3 种公交都可以到达目的地，等到其中任意一辆即可出发<br />\n③P1 约另一人 P2 一起去某地，则 P1 必须要等到 “同伴 P2 到达公交站” 与 “公交到达公交站” 两个条件都满足后，才能出发<br />\n将 P1 去某地视为 线程，将 “公交到达公交站”、“同伴 P2 到达公交站” 视为 事件 的发生，<br />\n 情况①是特定事件唤醒线程<br />\n情况②是任意单个事件唤醒线程<br />\n情况③是多个事件同时发生才唤醒线程</p>\n<h4 id=\"工作机制-3\"><a class=\"anchor\" href=\"#工作机制-3\">#</a> 工作机制</h4>\n<p>与信号量不同，它可以实现一对多，多对多的同步.<br />\n 即一个线程和多个事件的关系可设置为:</p>\n<ol>\n<li>任一事件唤醒线程</li>\n<li>多个事件共同唤醒一个线程</li>\n<li>多个线程同步多个事件</li>\n</ol>\n<p>在 RT-Thread 中 事件集的特点:</p>\n<ol>\n<li>事件至于线程相关，事件之间相互独立：每个线程有 32 个事件标志位，采用 32bit 的无符号整型数据进行记录，每一个 bit 代表一个事件；</li>\n<li>事件仅有同步功能，无法传输数据</li>\n<li>事件无排队性，多次向线程发送同一事件 (如果未来得及读走), 其效果等同于之发送一次</li>\n</ol>\n<p>在 RT-Thread 中，每个线程都拥有一个事件信息标记，它有三个属性，</p>\n<ol>\n<li><code>RT_EVENT_FLAG_AND</code>  (逻辑与),</li>\n<li><code>RT_EVENT_FLAG_OR</code>  (逻辑或)</li>\n<li><code>RT_EVENT_FLAG_CLEAR</code>  (清除标记)</li>\n</ol>\n<p>当线程等待事件同步时，可以通过 32 个事件标志 和 这个事件信息标记来判断当前接收的事件是否满足同步条件</p>\n<h4 id=\"管理方式\"><a class=\"anchor\" href=\"#管理方式\">#</a> 管理方式</h4>\n<p>RT-Thread 的接口做的还是很不错的，事件集的接口 和 信号量，互斥量的接口都十分类似<br />\n都分为静态和动态创建删除，再加特有的 发送和接收 函数<br />\n<img data-src=\"https://www.rt-thread.org/document/site/rt-thread-version/rt-thread-standard/programming-manual/ipc1/figures/06event_ops.png\" alt=\"alt 图片来源: https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/programming-manual/ipc1/ipc1?id=%e4%ba%8b%e4%bb%b6%e9%9b%86\" /></p>\n<h4 id=\"创建和删除事件集\"><a class=\"anchor\" href=\"#创建和删除事件集\">#</a> 创建和删除事件集</h4>\n<p>以下为动态创建控制块<br />\n<strong>创建</strong><br />\n创建 信号量的时候，内核会先创建一个 事件集控制块，然后进行初始化</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_event_t</span> <span class=\"token function\">rt_event_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 事件集的名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token class-name\">rt_uint8_t</span> flag     <span class=\"token comment\">// RT_IPC_FLAG_FIFO 或 RT_IPC_FLAG_PRIO</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>调用该函数接口时，系统会从对象管理器中分配事件集对象，并初始化这个对象，然后初始化父类 IPC 对象<br />\n<img data-src=\"https://gitee.com/code-qin/pic/raw/master/PicGo-Update/20211127092002.png\" alt=\"\" /><br />\n看看人家，框架设计的好，写代码都轻松很多</p>\n<p><strong>删除</strong><br />\n delete 只能删除 create 出来的事件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"初始化和脱离事件集\"><a class=\"anchor\" href=\"#初始化和脱离事件集\">#</a> 初始化和脱离事件集</h4>\n<p><strong>初始化</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_init</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 事件集对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 事件集的名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token class-name\">rt_uint8_t</span> flag     <span class=\"token comment\">// 事件集的标志</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>调用该接口时，需指定静态事件集对象的句柄（即指向事件集控制块的指针）, 然后系统会初始化事件集对象，并加入到系统对象容器中进行管理</p>\n<p><strong>脱离</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_detach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用户调用这个函数时，系统首先唤醒所有挂在该事件集等待队列上的线程（线程的返回值是 - RT_ERROR）, 然后将该事件集从内核对象管理器中脱离</p>\n<h4 id=\"发送事件\"><a class=\"anchor\" href=\"#发送事件\">#</a> 发送事件</h4>\n<p>发送事件函数可以发送事件集中的一个或多个事件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_send</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 事件集对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token class-name\">rt_uint32_t</span> set   <span class=\"token comment\">// 发送的一个或多个事件的标志值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"接收事件\"><a class=\"anchor\" href=\"#接收事件\">#</a> 接收事件</h4>\n<p>内核使用 32 位的无符号整数来标识事件集，它的每一位代表一个事件，因此一个事件集对象可同时等待接收 32 个事件.<br />\n 内核可以通过指定选择参数 “逻辑与” 或 “逻辑或” 来选择如何激活线程<br />\n使用 “逻辑与” 参数表示只有当所有等待的事件都发生时才激活线程，<br />\n 而使用 “逻辑或” 参数则表示只要有一个等待的事件发生就激活线程</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">rt_err_t</span> <span class=\"token function\">rt_event_recv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">rt_event_t</span> event<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 事件集对象的句柄</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                       <span class=\"token class-name\">rt_uint32_t</span> set<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 接收线程感兴趣的事件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       <span class=\"token class-name\">rt_uint8_t</span> option<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 接收选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       <span class=\"token class-name\">rt_int32_t</span> timeout<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定超时时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       <span class=\"token class-name\">rt_uint32_t</span><span class=\"token operator\">*</span> recved  <span class=\"token comment\">// 指向接收到的事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>option</code>  的可选参数如下:</p>\n<ol>\n<li><code>RT_EVENT_FLAG_OR</code>    : 逻辑与</li>\n<li><code>RT_EVENT_FLAG_AND</code>   : 逻辑或</li>\n<li><code>RT_EVENT_FLAG_CLEAR</code> : 选择清除重置事件标志位</li>\n</ol>\n<p>当用户调用接口时，系统根据  <code>set</code>  参数 和 接收选项  <code>option</code>  来判断它要接受的事件是否发生<br />\n如果已经发生，则根据参数  <code>option</code>  上是否设置有  <code>RT_EVENT_FLAG_CLEAR</code>  来决定是否重置事件的相应标志位<br />\n如果没有发生，则把等待的  <code>set</code>  和  <code>option</code>  参数填入线程本身的结构中，然后把线程挂起在此事件上，直到其等待的事件满足条件或等待时间超过指定的超时时间</p>\n<h4 id=\"应用场景-2\"><a class=\"anchor\" href=\"#应用场景-2\">#</a> 应用场景</h4>\n<p>我自己目前没用过，事件集 很难说它的适用场景，下面这段话直接来自于 RT-Thread 官方.<br />\n 等我琢磨明白了我再写篇博客，举个实际的例子 (T_T).</p>\n<p>事件集可使用于多种场合，它能够在一定程度上替代信号量，用于线程间同步.<br />\n 一个线程或中断服务例程发送一个事件给事件集对象，而后等待的线程被唤醒并对相应的事件进行处理.</p>\n<p>但是它与信号量不同的是，事件的发送操作在事件未清除前，是不可累计的，而信号量的释放动作是累计的.</p>\n<p>事件的另一个特性是，接收线程可等待多种事件，即多个事件对应一个线程或多个线程.<br />\n 同时按照线程等待的参数，可选择是 “逻辑或” 触发还是 “逻辑与” 触发.</p>\n<p>这个特性也是信号量等所不具备的，<strong>信号量只能识别单一的释放动作</strong>，而不能同时等待多种类型的释放.</p>\n<h2 id=\"笔记总结\"><a class=\"anchor\" href=\"#笔记总结\">#</a> 笔记总结</h2>\n<p>写的代码太少，以至于很多很难分出 三者之间的应用场景.<br />\n 举不出例子，明天试着拿知识做点小实验.</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "RTOS",
                "RTOS"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "待风而起",
    "subtitle": "以梦为马 驰骋世间",
    "icon": "https://to-ywz.github.io/images/favicon.ico",
    "description": "如风一般悠长",
    "home_page_url": "https://to-ywz.github.io",
    "items": [
        {
            "id": "https://to-ywz.github.io/2021/07/06/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%88%A4%E6%96%AD%E9%A2%98/",
            "url": "https://to-ywz.github.io/2021/07/06/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%88%A4%E6%96%AD%E9%A2%98/",
            "title": "编译原理判断题",
            "date_published": "2021-07-06T01:09:53.000Z",
            "content_html": "<h1 id=\"编译原理判断题\"><a class=\"anchor\" href=\"#编译原理判断题\">#</a> 编译原理判断题</h1>\n<ol>\n<li class=\"quiz false\">\n<p>计算机高级语言翻译成低级语言只有解释一种方式。</p>\n</li>\n<li class=\"quiz false\">\n<p>在编译中进行语法检查的目的是为了发现程序中所有错误。</p>\n</li>\n<li class=\"quiz false\">\n<p>“用高级语言书写的源程序都必须通过编译，产生目标代码后才能投入运行” 这种说法。</p>\n</li>\n<li class=\"quiz false\">\n<p>编译程序与具体的机器有关，与具体的语言无关。</p>\n</li>\n<li class=\"quiz false\">\n<p>编译程序是对高级语言程序的解释执行。</p>\n</li>\n<li class=\"quiz false\">\n<p>程序语言的语言处理程序是一种应用软件。</p>\n</li>\n<li class=\"quiz false\">\n<p>正则文法其产生式为 A-&gt;a，A-&gt;Bb, A,B∈VN，a,b∈VT。</p>\n</li>\n<li class=\"quiz false\">\n<p>若一个句型中出现了某产生式的右部，则此右部一定是该句型的句柄。</p>\n</li>\n<li class=\"quiz true\">\n<p>一个句型的句柄一定是文法某产生式的右部。</p>\n</li>\n<li class=\"quiz false\">\n<p>产生式是用于定义词法成分的一种书写规则。</p>\n</li>\n<li class=\"quiz true\">\n<p>如果一个文法存在某个句子对应两棵不同的语法树，则称这个文法是二义的。</p>\n</li>\n<li class=\"quiz true\">\n<p>正规文法产生的语言都可以用上下文无关文法来描述。</p>\n</li>\n<li class=\"quiz true\">\n<p>归约和规范推导是互逆的两个过程。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个上下文无关文法的开始符，可以是终结符或非终结符。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个句型的直接短语是唯一的。 </p>\n</li>\n<li class=\"quiz false\">\n<p>一个句型一定句子。 </p>\n</li>\n<li class=\"quiz true\">\n<p>如果一个文法存在某个句子对应两棵不同的语法树，则文法是二义性的。 </p>\n</li>\n<li class=\"quiz false\">\n<p>从一个句型到另一个句型的推导过程是唯一的。</p>\n</li>\n<li class=\"quiz false\">\n<p>二义文法不是上下文无关文法。</p>\n</li>\n<li class=\"quiz true\">\n<p>文法是描述语言的语法结构的形式规则。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个有限状态自动机中，有且仅有一个唯一的终态。</p>\n</li>\n<li class=\"quiz true\">\n<p>两个正规集相等的必要条件是他们对应的正规式等价。</p>\n</li>\n<li class=\"quiz false\">\n<p>r 和 s 分别是正规式，则有 L (r|s)=L (r) L (s)。</p>\n</li>\n<li class=\"quiz true\">\n<p>确定的自动机以及不确定的自动机都能正确地识别正规集</p>\n</li>\n<li class=\"quiz true\">\n<p>正规文法产生的语言都可以用上下文无关文法来描述。</p>\n</li>\n<li class=\"quiz false\">\n<p>编译过程中，语法分析器的任务是分析单词是怎样构成的。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个确定有限状态自动机中，有且仅有一个唯一的终态。</p>\n</li>\n<li class=\"quiz true\">\n<p>设 R 和 S 分别是字母表∑上的正规式，则有 L (R|S)=L (R)∪L (S)。</p>\n</li>\n<li class=\"quiz false\">\n<p>自动机 M1 和 M2 的状态数不同，则二者必不等价。</p>\n</li>\n<li class=\"quiz true\">\n<p>对任何正规式 e，都存在一个 NFA M，满足 L (M)=L (e)。</p>\n</li>\n<li class=\"quiz false\">\n<p>每个文法都能改写为 LL (1) 文法。</p>\n</li>\n<li class=\"quiz true\">\n<p>递归下降法不允许任一非终极符是直接左递归的。</p>\n</li>\n<li class=\"quiz true\">\n<p>递归下降分析法是自顶向下分析方法。</p>\n</li>\n<li class=\"quiz true\">\n<p>一个 LL (l) 文法一定是无二义的。</p>\n</li>\n<li class=\"quiz false\">\n<p>语法分析时必须先消除文法中的左递归 。</p>\n</li>\n<li class=\"quiz true\">\n<p>并不是每个文法都能改写成 LL (1) 文法。</p>\n</li>\n<li class=\"quiz false\">\n<p>要构造行之有效的自上而下的分析器，则必须消除左递归。</p>\n</li>\n<li class=\"quiz false\">\n<p>自底而上语法分析方法的主要问题是候选式的选择。</p>\n</li>\n<li class=\"quiz false\">\n<p>简单优先文法允许任意两个产生式具有相同右部。</p>\n</li>\n<li class=\"quiz false\">\n<p>算符优先分析法每次都是对句柄进行归约。</p>\n</li>\n<li class=\"quiz false\">\n<p>LR 分析法是自顶向下语法分析方法。 </p>\n</li>\n<li class=\"quiz true\">\n<p>LR 分析法在自左至右扫描输入串时就能发现错误，但不能准确地指出出错地点。</p>\n</li>\n<li class=\"quiz true\">\n<p>LR 分析器的任务就是产生 LR 分析表。 </p>\n</li>\n<li class=\"quiz false\">\n<p>lR 分析技术无法适用二义文法。 </p>\n</li>\n<li class=\"quiz false\">\n<p>综合属性是用于 “自上而下” 传递信息。</p>\n</li>\n<li class=\"quiz false\">\n<p>一个语义子程序描述了一个文法所对应的翻译工作。 </p>\n</li>\n<li class=\"quiz true\">\n<p>程序中的表达式语句在语义翻译时不需要回填技术。 </p>\n</li>\n<li class=\"quiz false\">\n<p>树形表示和四元式不便于优化，而三元式和间接三元式则便于优化。 </p>\n</li>\n<li class=\"quiz true\">\n<p>进行代码优化时应着重考虑循环的代码优化，这对提高目标代码的效率将起更大作用。</p>\n</li>\n<li class=\"quiz true\">\n<p>仅考虑一个基本块，不能确定一个赋值是否真是无用的。 </p>\n</li>\n<li class=\"quiz true\">\n<p>削减运算强度破坏了临时变量在一基本块内仅被定义一次的特性。 </p>\n</li>\n<li class=\"quiz false\">\n<p>在中间代码优化中循环上的优化主要有不变表达式外提和削减运算强度。</p>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "编译原理",
                "编译原理,题库"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/07/05/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E9%80%89%E6%8B%A9%E9%A2%98/",
            "url": "https://to-ywz.github.io/2021/07/05/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E9%80%89%E6%8B%A9%E9%A2%98/",
            "title": "编译原理选择题",
            "date_published": "2021-07-05T08:13:43.000Z",
            "content_html": "<h1 id=\"编译原理选择题练习\"><a class=\"anchor\" href=\"#编译原理选择题练习\">#</a> 编译原理选择题练习</h1>\n<ol>\n<li class=\"quiz\">\n<p>编译程序是一种常用的<span class=\"gap\"></span>软件 。</p>\n<ul class=\"options\">\n<li>应用</li>\n<li class=\"correct\">系统</li>\n<li>支撑</li>\n<li>自动化</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>编译程序分成若干个 “遍” 是为了 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>提高程序的执行效率</li>\n<li class=\"correct\">使程序的结构更加清晰</li>\n<li>利用有限的机器内存并提高机器的执行效率</li>\n<li>利用有限的机器内存但降低了机器的执行效率</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>对于使用的函数没有定义的错误信息，是编译的<span class=\"gap\"></span>阶段报告的。</p>\n<ul class=\"options\">\n<li>词法分析</li>\n<li>语法分析</li>\n<li class=\"correct\">语义分析</li>\n<li>代码生成</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>和代码优化部分不是每个编译程序都必需的。</p>\n<ul class=\"options\">\n<li>语法分析</li>\n<li class=\"correct\">中间代码生成</li>\n<li>词法分析</li>\n<li>目标代码生成</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析器用于识别<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>字符串</li>\n<li>语句</li>\n<li class=\"correct\">单词</li>\n<li>标识符</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>语法分析器则可以发现源程序中的<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>语义错误</li>\n<li>语法和语义错误</li>\n<li>错误并校正</li>\n<li class=\"correct\">语法错误</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>编译程序绝大多数时间花费在<span class=\"gap\"></span>上。</p>\n<ul class=\"options\">\n<li>出错处理</li>\n<li>词法分析</li>\n<li>目标代码生成</li>\n<li class=\"correct\">表格管理</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>不可能是目标代码的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>汇编指令代码</li>\n<li>可重定位指令代码</li>\n<li>绝对指令代码</li>\n<li class=\"correct\">中间代码</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>描述一个语言的文法是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>唯一的</li>\n<li class=\"correct\">不唯一的</li>\n<li>可能唯一，也可能不唯一</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若文法 G 定义的语言是无限集，则文法必然是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>前后文无关文法</li>\n<li>正规文法</li>\n<li>二义性文法</li>\n<li class=\"correct\">递归文法</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>给定文法 G [A]：A→bA∣cc 试问在下面的符号串中，为文法句子的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">cc   </li>\n<li>bcbc</li>\n<li>bcbcc</li>\n<li>bccbcc</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>由文法的开始符经 0 步或多步推导产生的文法符号序列是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>短语</li>\n<li>句柄</li>\n<li class=\"correct\">句型   </li>\n<li>句子</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G 产生的<span class=\"gap\"></span>的全体是该文法描述的语言。</p>\n<ul class=\"options\">\n<li>句型</li>\n<li>终结符集</li>\n<li>非终结符集</li>\n<li class=\"correct\">句子</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>一个文法所描述的语言是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">唯一的      </li>\n<li>不唯一的</li>\n<li>可能唯一，好可能不唯一</li>\n</ul>\n</li>\n<li>\n<p>设有以下方法</p>\n<pre><code>GN: N→N’ \n    N’ → D | N’D  \n    D →  0|1|2……|9\n</code></pre>\n<p class=\"quiz\">下列哪个句型中有最右推导<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>2D</li>\n<li>D6D</li>\n<li class=\"correct\">N‘88      </li>\n<li>DND</li>\n</ul>\n</li>\n<li>\n<p>设有文法</p>\n<pre><code>G[S]：S→ABS|Aa|b    \nA→a      \nB→b|SBB|ε\n</code></pre>\n<p class=\"quiz\">该文法的一个句子：abbaa 对应的语法树如图，试问根据该语法树，求得该句子的短语有<span class=\"gap\"></span>个。</p>\n<ul class=\"options\">\n<li class=\"correct\">8 个  </li>\n<li>6 个</li>\n<li>7 个</li>\n<li>9 个</li>\n</ul>\n</li>\n<li>\n<p>设有文法 G [I]： I→I0  | I1  | I a  | Ic  | a  | b  | c 下列符号串中是该文法的句子的有.</p>\n<pre><code>①ab0 \n②a0c01 \n③aaa \n④bc10\n</code></pre>\n<p class=\"quiz\">可选项有:<span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>①</li>\n<li class=\"correct\">②③④        </li>\n<li>③④</li>\n<li>①②③④</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G：S→xSx|y 所识别的语言是</p>\n<ul class=\"options\">\n<li>xyx</li>\n<li class=\"correct\">(xyx)*     </li>\n<li>xnyxn (n0)</li>\n<li>x*y+</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G [N]=（{b}, {N, B}, N, {N→b│bB, B→bN}）, 该文法所描述的语言是</p>\n<ul class=\"options\">\n<li bi│i≥0=\"\">L(G[N])=</li>\n<li class=\"correct\">L(G[N])={b2i│i≥0}    </li>\n<li b2i+1│i≥0=\"\">L(G[N])=</li>\n<li b2i+1│i≥1=\"\">L(G[N])=</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设文法为：S→SA|A A→a|b 则对句子 aba, 下面    是规范推导。</p>\n<ul class=\"options\">\n<li>SSASAAAAAaAAabAaba</li>\n<li class=\"correct\">SSASAAAAAAAaAbaaba </li>\n<li>SSASAASAaSbaAbaaba</li>\n<li>SSASaSAaSbaAbaaba</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>如果文法 G 是无二义性的，则它的任何句子 a <span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">最左推导和最右推导对应的语法树必定相同</li>\n<li>最左推导和最右推导对应的语法树可能不同</li>\n<li>最左推导和最右推导必定相同</li>\n<li>可能存在两个不同的最左推导，但它们对应的语法树相同</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在编译中产生语法树是为了</p>\n<ul class=\"options\">\n<li class=\"correct\">语法分析     </li>\n<li>语义分析</li>\n<li>词法分析</li>\n<li>产生目标代码</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>一个句型中的最左<span class=\"gap\"></span>称为该句型的句柄。</p>\n<ul>\n<li>短语</li>\n<li class=\"correct\">简单短语     </li>\n<li>素短语</li>\n<li class=\"options\">终结符号<br />\n</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G 所描述的语言是的集合。</p>\n<ul class=\"options\">\n<li>文法 G 的字母表 V 中所有符号组成的符号串</li>\n<li>文法 G 的字母表 V 的闭包 V * 中的所有符号串</li>\n<li class=\"correct\">由文法的开始符号推出的所有终极符串</li>\n<li>由文法的开始符号推出的所有符号串</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设 G 是一个给定的文法，S 是文法的开始符号，如果 S-&gt;x (其中 x∈V*), 则称 x 是文法 G 的一个 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>候选式</li>\n<li class=\"correct\">句型   </li>\n<li>单词</li>\n<li>产生式</li>\n</ul>\n</li>\n<li>\n<p>文法</p>\n<pre><code>G[E]:   E-&gt;T | E+T\n        T-&gt;F | T*F\n        F-&gt;a | (E)\n</code></pre>\n<p>该文法句型 E ＋ F ﹡(E ＋ T) 的简单短语</p>\n<pre><code>①（E ＋ T）   \n② E ＋ T   \n③ F   \n④ F﹡(E ＋ T)\n</code></pre>\n<p class=\"quiz\">是下列符号串中的<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>① 和 ③</li>\n<li class=\"correct\">② 和 ③    </li>\n<li>③ 和 ④</li>\n<li>③</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若一个文法是递归的，则它所产生的语言的句子<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">是无穷多个     </li>\n<li>是有穷多个</li>\n<li>是可枚举的</li>\n<li>个数是常量</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>如果 L (M1)=L (M2), 则 M1 与 M2<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">等价            </li>\n<li>都是二义的</li>\n<li>都是无二义的</li>\n<li>它们的状态数相等</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G： <code>E→E+T|T</code>   <code>T→T*P|P</code>   <code>P→(E)|i</code>  则句型  <code>P+T+i</code>  的句柄为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>P+T</li>\n<li class=\"correct\">P        </li>\n<li>P+T+i</li>\n<li>i</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 <code>G:S→S+T|T1</code>   <code>T→T*P|P</code>   <code>P→(S)|i</code>  句型 P+T+i 的短语有<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>i,P+T</li>\n<li class=\"correct\">P,P+T,i,P+T+i       </li>\n<li>P+T+i</li>\n<li>P, P+T, i</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>正则式的 “*” 读作<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>并且</li>\n<li>或者</li>\n<li>连接</li>\n<li>闭包     {.correct}\t</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>LL (1) 文法的条件是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li class=\"correct\">对形如 U→X1︱X2︱…︱Xn 的产生式，要求 SELECT（U→Xi）∩SELECT（U→Xj）＝, （i≠j）</li>\n<li>对形如 U→X1︱X2︱…︱Xn 的产生式，若 Xiε, 要求 FIRST（Xi）∩FOLLOW（U）＝</li>\n<li>A 和 B</li>\n<li>都不是</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在语法分析处理中，FIRST 集合、 FOLLOW 集合、 SELECT 集合均是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>非终极符集</li>\n<li class=\"correct\">终极符集     </li>\n<li>字母表</li>\n<li>状态集</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>高级语言编译程序常用的语法分析方法中，递归下降分析法属于<span class=\"gap\"></span> 分析方法。</p>\n<ul>\n<li>自左至右</li>\n<li class=\"correct\">自顶向下        </li>\n<li>自底向上</li>\n<li class=\"options\">自右向左<br />\n</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>采用自上而下分析，必须<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>消除左递归</li>\n<li>消除右递归</li>\n<li class=\"correct\">消除回溯            </li>\n<li>提取公共左因子</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析所依据的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>语义规则</li>\n<li class=\"correct\">构词规则  </li>\n<li>语法规则</li>\n<li>等价变换规则</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析器的输出结果是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>单词的种别编码</li>\n<li>单词在符号表中的位置</li>\n<li class=\"correct\">单词的种别编码和自身的值  </li>\n<li>单词自身值</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>正规式 M1 和 M2 等价是指<span class=\"gap\"></span>_。</p>\n<ul class=\"options\">\n<li>M1 和 M2 状态数相等</li>\n<li class=\"correct\">M1 和 M2 的有向弧条数相等  </li>\n<li>M1 和 M2 所识别的语言集合相等</li>\n<li>M1 和 M2 状态数和有向弧条数相等</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在状态转换图中，结点代表<span class=\"gap\"></span> 用圆圈表示。</p>\n<ul>\n<li>输入缓冲区</li>\n<li>向前搜索</li>\n<li class=\"correct\">状态       </li>\n<li class=\"options\">字符串<br />\n</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>词法分析器的输入是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>单词符号串</li>\n<li class=\"correct\">源程序  </li>\n<li>语法单位</li>\n<li>目标程序</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>有限状态自动机能识别<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>上下文无关文法</li>\n<li>上下文有关文法</li>\n<li class=\"correct\">正规文法          </li>\n<li>短语文法</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在自底向上的语法分析方法中，分析的关键是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li class=\"correct\">寻找句柄      </li>\n<li>寻找句型</li>\n<li>消除递归</li>\n<li>选择候选式</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>算符优先分析每次归约的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>最左直接短语</li>\n<li>直接短语</li>\n<li class=\"correct\">最左素短语      </li>\n<li>控制结点</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>文法 G：S→b|∧|(T) T→T∨S|S 则 FIRSTVT (T)=<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li><code>&#123; b, ∧, ( &#125; </code></li>\n<li><code>&#123; b, ∧, ) &#125;</code></li>\n<li class=\"correct\"><code>&#123; b, ∧, (, ∨ &#125;</code>     </li>\n<li><code>&#123; b, ∧, ）, ∨ &#125;</code></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>有文法 G：E→E*T  |  T   T→T+I  |  i 句子 1+2*8+6 按该文法 G 归约，其值为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>23</li>\n<li class=\"correct\">42    </li>\n<li>30</li>\n<li>17</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>如果文法是无二义的，那么规范归约是指<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>最左推导的逆过程</li>\n<li class=\"correct\">最右推导的逆过程 </li>\n<li>规范推导</li>\n<li>最左归约的逆过程</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在 LR 分析法中，分析栈中存放的状态是识别规范句型 <span class=\"gap\"></span>  的 DFA 状态。</p>\n<ul class=\"options\">\n<li>句柄</li>\n<li>前缀</li>\n<li class=\"correct\">活前缀        </li>\n<li>LR (0) 项目</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若项目集 Ik 含有 A-&gt;r.[n] 和 B-&gt;α.a [m] 项目，则在状态 Ik 时，仅当面临的输入符号 a∈FOLLOW (A) 时，才采取 “A-&gt;α.[n]” 动作的一定是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>LALR 文法</li>\n<li>LR (0) 文法</li>\n<li>LR (1) 文法</li>\n<li>SLR (1) 文法       {.correct}\t</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在 LR (0) 的 ACTION 子表中，如果某一行中存在标记为 “rj” 的栏，则____。</p>\n<ul class=\"options\">\n<li class=\"correct\">该行必定填满 rj   </li>\n<li>该行未填满 rj</li>\n<li>其他行也有 rj</li>\n<li>goto 子表中也有 rj</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>若状态 Ik 含有项目 “A→α.[n]”, 且仅当输入符号 a∈FOLLOW (A) 时，才用规则 “A →α[n]” 归约的语法分析方法是<span class=\"gap\"></span>__。</p>\n<ul class=\"options\">\n<li>LALR 分析法</li>\n<li>LR (0) 分析法</li>\n<li>LR (1) 分析法</li>\n<li class=\"correct\">SLR (1) 分析法</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>使用<span class=\"gap\"></span>可以定义一个程序的意义。</p>\n<ul class=\"options\">\n<li class=\"correct\">语义规则  </li>\n<li>词法规则</li>\n<li>产生规则</li>\n<li>左结合规则</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>终结符具有<span class=\"gap\"></span>__属性。</p>\n<ul class=\"options\">\n<li>传递</li>\n<li>继承</li>\n<li>抽象</li>\n<li class=\"correct\">综合  </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>有文法 G 及其语法制导翻译如下所示：则分析句子 1∧2∧3#4 其值为<span class=\"gap\"></span>。</p>\n<ul>\n<li>10</li>\n<li>34</li>\n<li class=\"correct\">14  </li>\n<li class=\"options\">54<br />\n</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>数组 <code>A[1..20,1..10]</code>  的首地址偏移量为 0, 按行存储，每个元素占一个字节，存储器按字编址，则 <code>A[i,j]</code>  的偏移地址为<span class=\"gap\"></span>__。</p>\n<ul class=\"options\">\n<li class=\"correct\">(i-1)×10+(j-1) </li>\n<li>(i-1)×20+(j-1)</li>\n<li>(i-1)+ (j-1)×10</li>\n<li>(i-1)+ (j-1)×20</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>中间代码生成时所依据的是<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>语法规则</li>\n<li>词法规则</li>\n<li class=\"correct\">语义规则    </li>\n<li>等价变换规则</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>四元式之间的联系是通过<span class=\"gap\"></span>__实现的。</p>\n<ul class=\"options\">\n<li>指示器</li>\n<li class=\"correct\">临时变量      </li>\n<li>符号表</li>\n<li>程序变量</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>下面<span class=\"gap\"></span>_不能作为一个基本块的入口。</p>\n<ul class=\"options\">\n<li>程序的第一个语句</li>\n<li>条件语句转移到的语句</li>\n<li class=\"correct\">无条件语句之后的下一条语句      </li>\n<li>无条件语句转移到的语句</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>一个控制流程图就是具有<span class=\"gap\"></span>_的有向图。</p>\n<ul class=\"options\">\n<li>唯一入口结点</li>\n<li>唯一出口结点</li>\n<li class=\"correct\">唯一首结点         </li>\n<li>唯一尾结点</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>基本块内的优化为<span class=\"gap\"></span>。</p>\n<ul class=\"options\">\n<li>代码外提，删除归纳变量</li>\n<li>删除多余运算，删除无用赋值</li>\n<li class=\"correct\">强度削弱，代码外提   </li>\n<li>循环展开，循环合并</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>下列<span class=\"gap\"></span>优化方法不是针对循环优化进行的。</p>\n<ul class=\"options\">\n<li>强度削弱</li>\n<li>删除归纳变量</li>\n<li class=\"correct\">删除多余运算      </li>\n<li>代码外提</li>\n</ul>\n</li>\n<li class=\"quize\">\n<p>优化可生成的目标代码。</p>\n<ul class=\"options\">\n<li>运行事件较短</li>\n<li>占用存储空间较小</li>\n<li>运行事件短但占用内存空间大</li>\n<li class=\"\" correct=\"\">运行时间短且占用存储空间小</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>代码优化的目的是。</p>\n<ul class=\"options\">\n<li>节省时间</li>\n<li>节省空间</li>\n<li class=\"correct\">节省时间和空间        </li>\n<li>把编译程序进行等价交换</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "编译原理",
                "编译原理,题库"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/07/05/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%A1%AB%E7%A9%BA%E9%A2%98/",
            "url": "https://to-ywz.github.io/2021/07/05/CS/Compilation_principle/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%A1%AB%E7%A9%BA%E9%A2%98/",
            "title": "编译原理填空题",
            "date_published": "2021-07-05T08:13:43.000Z",
            "content_html": "<h1 id=\"编译原理填空题\"><a class=\"anchor\" href=\"#编译原理填空题\">#</a> 编译原理填空题</h1>\n<ol>\n<li class=\"quiz fill\">\n<p>编译程序是将 <span class=\"gap\">高级语言程序</span> 翻译成 <span class=\"gap\">汇编语言或机器语言程序</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译程序的工作过程一般可以划分为 <span class=\"gap\">词法分析</span>，<span class=\"gap\">语法分析</span>，<span class=\"gap\">语义分析</span>，中间代码生成，中间代码优化，目标代码生成几个基本阶段，同时还会伴有 <span class=\"gap\">表格处理</span>，<span class=\"gap\">出错处理</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>对编译程序而言，输入数据是 <span class=\"gap\">源程序</span>，输出结果是 <span class=\"gap\">目标程序</span>  。</p>\n</li>\n<li class=\"quiz fill\">\n<p>程序设计语言的单词符号一般可分成下列 5 种 <span class=\"gap\">保留字</span>，<span class=\"gap\">标识符</span>，<span class=\"gap\">常数</span>，<span class=\"gap\">算符</span>，<span class=\"gap\">界符</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一个程序设计语言是一个记号系统，如同自然语言一样，它的完整的定义应包括 <span class=\"gap\">语法</span>和 <span class=\"gap\">语义</span>两个方面。</p>\n</li>\n<li class=\"quiz fill\">\n<p>文法中的终结符和非终结符的交集是 <span class=\"gap\">空集</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>最左推导是指每都对句型中的 <span class=\"gap\">最左</span> 非终结符进行扩展。</p>\n</li>\n<li class=\"quiz fill\">\n<p>在语法分析中，最常见的两种方法，一是 <span class=\"gap\">自底向上</span> 分析法，另一是 <span class=\"gap\">自顶向下</span>   分析法。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一个句型中的最左简单短语称为该句型的 <span class=\"gap\">句柄</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>若 A={a , b} , B={c , d} , 则集合 AB = <span class=\"gap\">{ac , ad , bc , bd}</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>设 x=AB , 则 x0= <span class=\"gap\">ε</span> , x1= <span class=\"gap\">AB</span> , x2 = <span class=\"gap\">ABAB</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>文法描述的语言是该文法一切 <span class=\"gap\">句子</span>的集合。</p>\n</li>\n<li class=\"quiz fill\">\n<p>设文法 G 有两条产生式（1）S→0S1 （2）S→01 , 则该文法的语言 <span class=\"gap\">L(G)={0n1n│n≥1} </span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一种描述字符串集合的工具叫文法，它是由一个四元式组组成的，分别是 <span class=\"gap\">VT（终极符集）</span> , <span class=\"gap\">VN（非终极符集合）</span> , <span class=\"gap\">P（产生式集合）</span> , <span class=\"gap\">S（开始符）</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>乔姆斯基把文法分成四种类型，即 0 型，1 型，2 型和 3 型。其中 <span class=\"gap\">2 型</span>文法又称为上下文无关文法，<span class=\"gap\">3 型</span>文法又称为正规文法。 </p>\n</li>\n<li class=\"quiz fill\">\n<p><span class=\"gap\">上下文无关文法</span> 有足够的能力描述现今程序设计语言的语法结构，比如描述算术表达式，描述各种语句等。</p>\n</li>\n<li class=\"quiz fill\">\n<p><span class=\"gap\">最右推导</span>  称为规范推导。</p>\n</li>\n<li class=\"quiz fill\">\n<p>最右推导亦称为 <span class=\"gap\">规范推导</span>，由此得到的句型称为 <span class=\"gap\">规范</span> 句型。</p>\n</li>\n<li class=\"quiz fill\">\n<p>令 ={a,b} , 上的正规式（a|b）* 对应的正规集为:  <span class=\"gap\">{ε , a , b , aa , ab… , 所有 a , b 组成的串}</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>令 ={d,.,e,+,-}, 则上的正规式 d*(.dd*|ε)(e (+|-|ε) dd*|ε) 表示的是 <span class=\"gap\">无符号数</span>  。</p>\n</li>\n<li class=\"quiz fill\">\n<p>设 Σ={a , b} , 则 Σ 上的正规式（a∣b）(a∣b) 相应的正规集为 <span class=\"gap\">{aa,ab,ba,bb}</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>一种描述字符串集合的工具叫自动机，它是由一个五元组组成的，分别是 <span class=\"gap\">字母表</span>，<span class=\"gap\">状态集</span>，<span class=\"gap\">开始状态</span>，<span class=\"gap\">末态集</span>，<span class=\"gap\">映射集</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>确定有限自动机 DFA 是 <span class=\"gap\">NFA</span> 的一个特例。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译技术中的词法分析阶段，常用的描述单词词法的工具主要包括正规文法和 <span class=\"gap\">正规式</span>    。</p>\n</li>\n<li class=\"quiz fill\">\n<p>词法分析阶段，常用的识别单词的有效工具是 <span class=\"gap\">有穷自动机</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>所谓一个语言的 <span class=\"gap\">语法</span> 是指一组规则，用它可以形成和产生一个合适的程序。</p>\n</li>\n<li class=\"quiz fill\">\n<p>自顶向下的语法分析方法的基本思想是：从文法的 <span class=\"gap\">开始符号</span> 开始，根据给定的输入串并按照文法的产生式一步一步的向下进行 <span class=\"gap\">直接推导</span>，试图推导出文法的 <span class=\"gap\">句子</span>，使之与给定的输入串 <span class=\"gap\">匹配</span> 。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>预测分析法属于 <span class=\"gap\">自顶向下</span>  的语法分析方法。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译技术中，常用的确定的自顶向下语法分析技术有预测分析法和 <span class=\"gap\">递归下降法</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>预测分析程序是使用一张 <span class=\"gap\">分析表</span> 和一个 <span class=\"gap\">符号栈</span>      进行联合控制的。</p>\n</li>\n<li class=\"quiz fill\">\n<p>自底向上的语法分析方法的基本思想是：从输入串入手，利用文法的产生式一步一步地向上进行 <span class=\"gap\">直接归约</span>，力求归约到文法的 <span class=\"gap\">开始符</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>自底向上分析法采用 <span class=\"gap\">移进</span>，归约，错误处理，<span class=\"gap\">接受</span>      等四种操作。</p>\n</li>\n<li class=\"quiz fill\">\n<p>分析句型时，应用算符优先分析技术时，每步被直接归约的是 <span class=\"gap\">最左素短语</span>，而应用 LR 分析技术时，每步被直接归约的是 <span class=\"gap\">句柄</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>已知算符文法 G: S→b|∧|(T) T→T,S|S 则 F IRSTVT ((T)=  <span class=\"gap\">  <code>b,  ∧,  ( ,   ,</code>  </span>。 </p>\n</li>\n<li class=\"quiz fill\">\n<p><span class=\"gap\">自下而上</span> 语法分析的关键问题是精确定义可归约串的概念。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>LR 分析法属于 <span class=\"gap\">自底向上</span>  的语法分析方法。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>LR 分析器由 <span class=\"gap\">总控程序</span>，<span class=\"gap\">分析表</span>，<span class=\"gap\">分析栈</span> 3 个部分组成。</p>\n</li>\n<li class=\"quiz fill quiz fill\">\n<p>活前缀是指 <span class=\"gap\">规范句型</span>  的一个前缀，这种前缀不含 <span class=\"gap\">句柄</span> 之后的任何符号。</p>\n</li>\n<li class=\"quiz fill\">\n<p>LR 语法分析技术的 LR (0) 项目中，根据分隔符所在位置及分隔符后符号的类别，我们称 A→α.[n] 称为<span class=\"gap\">归约</span> 项目 ；对文法开始符号 S΄ , 称 S΄→α.[n] 为 <span class=\"gap\">接授</span>  项目；称 A→α.aβ[n]（a 为终结符）为 <span class=\"gap\">移进</span>  项目。</p>\n</li>\n<li class=\"quiz fill\">\n<p>假定一个 LR (0) 规范族中含有的项目集 (状态) I , I={X→α.bβ[n] , A→γ.[m] , B→δ.[k]} , 则该项目集中含有 <span class=\"gap\">移进 - 归约</span> 冲突和 <span class=\"gap\">归约 - 归约</span> 冲突。</p>\n</li>\n<li class=\"quiz fill\">\n<p>属性文法中，文法符号的属性有两种，一种称为 <span class=\"gap\">继承属性</span>，另一种称为 <span class=\"gap\">综合属性</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>在编译技术中，常用的中间代码表示有 <span class=\"gap\">抽象语法树（AST）</span> , <span class=\"gap\">四元式（TAC）</span> , P-code,Bytecode 及 SSA。</p>\n</li>\n<li class=\"quiz fill\">\n<p>编译技术中，常用的两种语义计算模型有 <span class=\"gap\">属性文法</span> 和 <span class=\"gap\">翻译模式</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>根据属性文法中包含属性的类别，属性文法可分为 <span class=\"gap\">S - 属性</span> 文法和 <span class=\"gap\">L - 属性</span>文法。</p>\n</li>\n<li class=\"quiz fill\">\n<p>翻译模式在形式上类似于属性文法，但允许用 { } 括起来的语义动作出现在产生式右端的 <span class=\"gap\">任意</span> 位置，和属性文法相对应，翻译模式分为 <span class=\"gap\">S - 翻译模式</span> 和 <span class=\"gap\">L - 翻译模式</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>优化就是对程序进行各种 <span class=\"gap\">等价</span> 变换，使之能生成更有效的 <span class=\"gap\">目标代码</span> 。</p>\n</li>\n<li class=\"quiz fill\">\n<p>依据优化所涉及的程序范围，编译过程中可以进行的优化可以分为 <span class=\"gap\">局部优化</span>，<span class=\"gap\"> 循环优化</span>，<span class=\"gap\"> 全局优化</span>。</p>\n</li>\n<li class=\"quiz fill\">\n<p>局部优化是在 <span class=\"gap\">基本块</span> 范围内进行的一种优化。</p>\n</li>\n<li class=\"quiz fill\">\n<p>在程序流图中，对任意两个结点 m 和 n 而言，如果从流图的首结点出发，到达 n 的任一通路都要经过 m , 则称 m 是 n 的 <span class=\"gap\">支配结点（必经结点）</span> 。</p>\n</li>\n</ol>\n",
            "tags": [
                "学习笔记",
                "编译原理",
                "编译原理,题库"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/07/05/blog/prism%E4%B8%8B%E7%89%B9%E6%9C%89%E6%B8%B2%E6%9F%93/",
            "url": "https://to-ywz.github.io/2021/07/05/blog/prism%E4%B8%8B%E7%89%B9%E6%9C%89%E6%B8%B2%E6%9F%93/",
            "title": "prism下特有渲染",
            "date_published": "2021-07-05T01:21:14.000Z",
            "content_html": "<h1 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h1>\n<p>使用 markdown-it-prism 进行代码高亮，支持显示行号、行高亮 mark 、命令行提示符 command 、代码块标题。</p>\n<p>基本格式： [language] [title] [url] [link text] [mark] [command]</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>行高亮</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The bigger number is %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h1 id=\"练习与答案\"><a class=\"anchor\" href=\"#练习与答案\">#</a> 练习与答案</h1>\n<hr />\n<h2 id=\"title-练习题与答案quiz-true\"><a class=\"anchor\" href=\"#title-练习题与答案quiz-true\">#</a> title: 练习题与答案<br />\n quiz: true</h2>\n<ol>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz multi\">\n<p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br />\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://to-ywz.github.io/2021/07/01/blog/to-Build-shoka/to-Build-shoka/",
            "url": "https://to-ywz.github.io/2021/07/01/blog/to-Build-shoka/to-Build-shoka/",
            "title": "搭建 shoka 主题出现的问题",
            "date_published": "2021-07-01T05:03:01.000Z",
            "content_html": "<h2 id=\"hexo-更换-shoka-主题-出现的问题\"><a class=\"anchor\" href=\"#hexo-更换-shoka-主题-出现的问题\">#</a> hexo 更换 shoka 主题 出现的问题</h2>\n<p>PS: 由于出现问题的时候没有及时截图，所以下面的文章里没有相关图片，十分抱歉</p>\n<h2 id=\"hexo-g-出现-yamlsafeload-is-remove\"><a class=\"anchor\" href=\"#hexo-g-出现-yamlsafeload-is-remove\">#</a> hexo g 出现 yaml.safeLoad () is remove</h2>\n<p>错误信息大概是这样的，主要是第一句</p>\n<pre><code class=\"language-sh-\">err: Error: Function yaml.safeLoad is removed in js-yaml 4. Use yaml.load instead, which is now safe by default.\nat Object.safeLoad (D:Github_Hexo\\hexo\\node_modules\\js-yaml\\index.js:10:11)\nat Hexo. (D:Github_Hexo\\hexo\\themes\\shoka\\scripts\\generaters\\config.js:41:41)\nat Hexo.tryCatcher (D:Github_Hexo\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\nat Hexo. (D:Github_Hexo\\hexo\\node_modules\\bluebird\\js\\release\\method.js:15:34)\nat D:Github_Hexo\\hexo\\node_modules\\hexo\\lib\\extend\\filter.js:67:52\nat tryCatcher (D:Github_Hexo\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n</code></pre>\n<p>这玩意挺坑人的，查了半天文档才知道  <code>yaml.safeLoad</code>  已经弃用，得用 <code>yaml.load</code>  代替<br />\n可苦了我这个搞嵌入式的<br />\n去  <code>theme\\shoka\\scripts\\generaters\\config.js</code>  文件的 第 41 行 将  <code>yaml.safeLoad</code>  修改为  <code>yaml.load</code></p>\n<h2 id=\"hexo-g-出现-template-render-error\"><a class=\"anchor\" href=\"#hexo-g-出现-template-render-error\">#</a> hexo g 出现 Template render error</h2>\n<p><strong>ps: 果然和我想的一样这篇博客 hexo g 就出错，诸位自行把 <mark>全角符号修改为半角符号</mark>即可</strong><br />\n我被这个问题折磨了一天，怎么说呢出现这个问题的原因有很多，我是通过新建博客一步步排查，查出来的...<br />\n 可能只适用于我自己和当前博客主题<br />\n我这边出现这个问题的原因是两个</p>\n<ol>\n<li>文章中可能出现了 <code>｛｛``｝｝</code> ,  <code>｛％</code>   <code>％｝</code> 这种 hexo 无法转义的字符，核心原因就是 hexo 转义时候发生的错误，｛％ ％｝ ｛｛｝｝ 是 yaml 的一个语法<br />\n网上都是这么说的，让后你自己一查发现没有。这都是假象，你用 git 的 bash 去查找的时候会发现一个极其怪异的现象<br />\n所有图片都被翻译成了  <code>｛｛</code>   <code>｝｝</code>   <code>｛％</code>   <code>％｝</code> , 而且还不是一对的..., 我没有太大的兴趣去琢磨为什么，所以就只是简单的对图片用了外链接<br />\n git bash 查找 这几个符号的命令如下</li>\n</ol>\n<pre><code class=\"language-sh-\">grep -r '｛｛' source\ngrep -r '｝｝' source\ngrep -r '｛％' source\ngrep -r '％｝' source\n</code></pre>\n<ol start=\"2\">\n<li>对应的 js 未安装也会导致这个问题<br />\n当我改完了这个 bug 之后，我发觉还是没有解决，重新新建本地博客后，发现一开统计点击量就会 error 然后去补装了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">hexo-symbols-count-time</span><br />\n 也可以复制这个直接安装  <code>npm install hexo-symbols-count-time</code></li>\n</ol>\n<h2 id=\"hexo-d-发布到-github时出现-openssl-433-或-time-out-433\"><a class=\"anchor\" href=\"#hexo-d-发布到-github时出现-openssl-433-或-time-out-433\">#</a> hexo d 发布到 GitHub 时出现 openssl 433 或 time out 433</h2>\n<p>这里我电脑上是因为，运行了小猫咪所以出现这个问题。诸位如果使用其他 VPN 需要自行修改端口<br />\n如果使用小猫咪，没有修改过端口的话，直接复制可用 (不要着急 cv)</p>\n<pre><code class=\"language-sh-\">git config --global http.proxy 127.0.0.1:7890\ngit config --global https.proxy 127.0.0.1:7890\n</code></pre>\n<p>配置完毕后，建议先  <code>hexo clean</code>  之后再执行  <code>hexo g -d</code> <br />\n 如果你配置过代理，那么请先取消后再尝试一次，取消命令如下</p>\n<pre><code class=\"language-sh-\">git config --global --unset http.proxy  #取消git的http代理配置\ngit config --global --unset https.proxy #取消git的https代理配置\n</code></pre>\n<p>在取消之前或者配置之前先最好先查看一下代理配置相关信息，命令如下</p>\n<pre><code class=\"language-sh-\">git config --global http.proxy  #查看git的http代理配置\ngit config --global https.proxy #查看git的https代理配置\ngit config --global -l #查看git的所有配置\n</code></pre>\n<h2 id=\"hexo-部署-github-pages-自定义域名失效的问题\"><a class=\"anchor\" href=\"#hexo-部署-github-pages-自定义域名失效的问题\">#</a> Hexo 部署 Github Pages 自定义域名失效的问题</h2>\n<p>之前在这写博客少，也不想动脑子解决问题，所以每一次手动添加 CNAME. 现在忍不了，动手改了改<br />\n找到 hexo 博客根目录下的 source 文件.(注意，不是主题的 source 文件).<br />\n 当 hexo 生成静态页面时，根目录下的 source 文件夹中的内容，就会在生成的网页根目录中<br />\n你可以在部署到 github 后，在仓库中查看，此时本地根目录下 source 文件夹的内容就在仓库的根目下.<br />\n 从此之后，再也不需要手动上传 CNAME 了</p>\n<h2 id=\"写在最后\"><a class=\"anchor\" href=\"#写在最后\">#</a> 写在最后</h2>\n<p>上面的问题都是基于我自己的主题和环境配置，测试出来的问题<br />\n以后遇到什么问题也会在这里继续跟新的<br />\n如果没到帮到各位表示十分抱歉 (#_&lt;-)<br />\n 能帮到大家就更好啦（＾∀＾●）ﾉｼ</p>\n",
            "tags": [
                "blog",
                "blog"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/05/01/blog/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%86%99%E6%B3%95/",
            "url": "https://to-ywz.github.io/2021/05/01/blog/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%86%99%E6%B3%95/",
            "title": "数学公式写法",
            "date_published": "2021-05-01T05:03:01.000Z",
            "content_html": "<h2 id=\"数学公式写法\"><a class=\"anchor\" href=\"#数学公式写法\">#</a> 数学公式写法</h2>\n<p><strong>ps: 下面内容不一定所有 markdown 编辑全部支持，若出现 <code>ParseError: KaTeX parse error:</code>  则表示不支持该语法</strong><br />\n由于本文更换了 markdown 的渲染所以在博客上看见的基本都是乱码，可以直接复制到本地编辑器查看，基本不会有太大误差</p>\n<h3 id=\"行内与独行\"><a class=\"anchor\" href=\"#行内与独行\">#</a> 行内与独行</h3>\n<p>行内公式：将公式插入到本行内，符号:  <code>$公式内容$</code> , 如: <code> $xyz$</code> <br />\n 独行公式：将公式插入到新的一行内，并且居中，符号:  <code>$$公式内容$$</code> , 如:  <code>$$xyz$$</code></p>\n<h3 id=\"上标-下标与组合\"><a class=\"anchor\" href=\"#上标-下标与组合\">#</a> 上标、下标与组合</h3>\n<p 2=\"\">上标符号，符号: ^, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span><br />\n 下标符号，符号: _, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br />\n 组合符号，符号: {}, 如: {16}_{8}O{2+}_</p>\n<h3 id=\"汉字-字体与格式\"><a class=\"anchor\" href=\"#汉字-字体与格式\">#</a> 汉字、字体与格式</h3>\n<p x_1,\\dots,x_n=\"\">汉字形式，符号: \\mbox<ruby>}, 如: $V_{\\mbox {初始}}$\n字体控制，符号: \\displaystyle, 如: $\\displaystyle \\frac {x+y}{y+z}$\n下划线符号，符号: \\underline, 如: $\\underline {x+y}$\n标签，符号 \\tag {数字}, 如: $\\tag {11}$\n上大括号，符号: \\overbrace {算式}, 如: $\\overbrace {a+b+c+d}<rp>(</rp><rt>{2.0</rt><rp>)</rp></ruby>$<br />\n 下大括号，符号: \\underbrace {算式}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><munder><munder><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>1.0</mn></munder><mo>+</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">a+\\underbrace{b+c}_{1.0}+d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.076878em;vertical-align:-1.382438em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-1.617562em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span class=\"svg-align\" style=\"top:-2.26867em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.73133em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.382438em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span><br />\n 上位符号，符号: \\stacrel {上位符号}{基位符号}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo>⃗</mo></mover><mo><mover><mo><mo>=</mo></mo><mrow><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">f</mi></mrow></mover></mo></mrow><annotation encoding=\"application/x-tex\">\\vec{x}\\stackrel{\\mathrm{def}}{=}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.152978em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.714em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.20772em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.152978em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">=</span></span></span><span style=\"top:-3.5668699999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">d</span><span class=\"mord mathrm mtight\">e</span><span class=\"mord mathrm mtight\" style=\"margin-right:0.07778em;\">f</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"占位符\"><a class=\"anchor\" href=\"#占位符\">#</a> 占位符</h3>\n<p>两个 quad 空格，符号: \\qquad, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mspace width=\"2em\"/><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\qquad y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\nquad 空格，符号: \\quad, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mspace width=\"1em\"/><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\quad y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 大空格，符号，如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mtext> </mtext><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\ y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 中空格，符号:, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x : y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 小空格，符号，，如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x , y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 没有空格，符号 ``, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">xy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 紧贴，符号！，如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">!</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x ! y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">!</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>\n<h3 id=\"定界符与组合\"><a class=\"anchor\" href=\"#定界符与组合\">#</a> 定界符与组合</h3>\n<p>括号，符号: () \\big (\\big) \\Big (\\Big) \\bigg (\\bigg) \\Bigg (\\Bigg), 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>（）</mtext><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo><mo fence=\"false\">(</mo><mo fence=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">（）\\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">）</span><span class=\"mord\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"delimsizing size1\">)</span></span><span class=\"mord\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"delimsizing size2\">)</span></span><span class=\"mord\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"delimsizing size3\">)</span></span><span class=\"mord\"><span class=\"delimsizing size4\">(</span></span><span class=\"mord\"><span class=\"delimsizing size4\">)</span></span></span></span></span><br />\n 中括号，符号: [], 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[x+y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span><br />\n 大括号，符号: { }, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">{x+y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><br />\n 自适应括号，符号: \\left \\right, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mi>x</mi><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\left(x\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mi>x</mi><mrow><mi>y</mi><mi>z</mi></mrow><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\left(x{yz}\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span><br />\n 组合公式，符号: {上位公式 \\choose 下位公式}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mi>k</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">{n+1 \\choose k}={n \\choose k}+{n \\choose k-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7453919999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.253331em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.745392em;\"><span style=\"top:-2.355em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span></span><br />\n 组合公式，符号: {上位公式 \\atop 下位公式}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mfrac linethickness=\"0px\"><mrow><msub><mi>k</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo>&gt;</mo><mn>0</mn></mrow><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>=</mo><mi>n</mi></mrow></mfrac></msub><msub><mi>A</mi><msub><mi>k</mi><mn>0</mn></msub></msub><msub><mi>A</mi><msub><mi>k</mi><mn>1</mn></msub></msub><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{k_0,k_1,\\ldots&gt;0 \\atop k_0+k_1+\\cdots=n}A_{k_0}A_{k_1}\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.50218em;vertical-align:-0.75218em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3447999999999999em;\"><span style=\"top:-2.3448em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.69164em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mopen nulldelimiter sizing reset-size3 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9880571428571429em;\"><span style=\"top:-2.1349714285714283em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">1</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">⋯</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-2.9920285714285715em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3447999999999998em;margin-left:-0.03148em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">1</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29964em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"minner mtight\">…</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5790571428571429em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size3 size6\"></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.75218em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span></span></span></span></p>\n<h3 id=\"四则运算\"><a class=\"anchor\" href=\"#四则运算\">#</a> 四则运算</h3>\n<p>加法运算，符号: +, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 减法运算，符号: -, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>−</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x-y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 加减运算，符号: \\pm, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>±</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\pm y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">±</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 减甲运算，符号: \\mp, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∓</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\mp y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∓</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 乘法运算，符号: \\times, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>×</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\times y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 点乘运算，符号: \\cdot, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\cdot y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 星乘运算，符号: \\ast, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\ast y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 除法运算，符号: \\div, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>÷</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\div y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 斜法运算，符号: /, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi mathvariant=\"normal\">/</mi><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x/y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 分式表示，符号: \\frac {分子}{分母}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{x+y}{y+z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.335547em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854439em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br />\n 分式表示，符号: {分子} \\voer {分母}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow><mrow><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">{x+y} \\over {y+z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.335547em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854439em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br />\n 绝对值表示，符号: ||, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|x+y|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span></span></span></span></p>\n<h3 id=\"高级运算\"><a class=\"anchor\" href=\"#高级运算\">#</a> 高级运算</h3>\n<p>平均数运算，符号: \\overline<ruby> 算式}, 如: $\\overline {xyz}$\n开二次方运算，符号: \\sqrt, 如: $\\sqrt x$\n开方运算，符号: \\sqrt [开方数]{被开方数}, 如: $\\sqrt [3]{x+y}$\n对数运算，符号: \\log, 如: $\\log (x)$\n极限运算，符号: \\lim, 如: $\\lim<rp>(</rp><rt>{x \\to \\infty</rt><rp>)</rp></ruby><em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>极<rp> (</rp><rt>{x</rt><rp>)</rp> 限<rp> (</rp><rt>\\to</rt><rp>)</rp> 运算<rp> (</rp><rt>\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\displaystyle \\lim, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\displaystyle \\lim<rt></rt></ruby></em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>求<rp> (</rp><rt>{x</rt><rp>)</rp> 和<rp> (</rp><rt>\\to</rt><rp>)</rp> 运算<rp> (</rp><rt>\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\sum, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\sum<rt></rt></ruby><em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>求<rp> (</rp><rt>{x</rt><rp>)</rp> 和<rp> (</rp><rt>\\to</rt><rp>)</rp> 运算<rp> (</rp><rt>\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\displaystyle \\sum, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\displaystyle \\sum<rt></rt></ruby></em><ruby>y \\to 0}{\\frac{x}{y}}$\n<rt></rt>积分运算<rp> (</rp><rt>{\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\int, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\int<rt></rt></ruby><em 0=\"\" xdx=\"\"><ruby>0}{xdx}$\n<rt></rt>积分运算<rp> (</rp><rt>{\\in</rt><rp>)</rp>, <rt></rt>符号<rp> (</rp><rt>ft</rt><rp>)</rp>: \\displaystyle \\int, <rt></rt>如<rp> (</rp><rt>y</rt><rp>)</rp>: $\\displaystyle \\int<rt></rt></ruby></em>$<br />\n 微分运算，符号: \\partial, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial x}{\\partial y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3612159999999998em;vertical-align:-0.481108em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br />\n 矩阵表示，符号: \\begin {matrix} \\end {matrix}, 如: \\left[ \\begin{matrix} 1 &2 &\\cdots &4\\5 &6 &\\cdots &8\\\\vdots &\\vdots &\\ddots &\\vdots\\13 &14 &\\cdots &16\\end{matrix} \\right]</p>\n<h3 id=\"逻辑运算\"><a class=\"anchor\" href=\"#逻辑运算\">#</a> 逻辑运算</h3>\n<p>等于运算，符号: =, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y=z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 大于运算，符号: &gt;, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&gt;</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y&gt;z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 小于运算，符号: &lt;, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>&lt;</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y&lt;z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 大于等于运算，符号: \\geq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≥</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\geq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 小于等于运算，符号: \\leq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≤</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\leq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不等于运算，符号: \\neq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo mathvariant=\"normal\">≠</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\neq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不大于等于运算，符号: \\ngeq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≱</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\ngeq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.09657em;vertical-align:-0.30274em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≱</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不大于等于运算，符号: \\not\\geq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≱</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\not\\geq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不小于等于运算，符号: \\nleq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≰</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\nleq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.09657em;vertical-align:-0.30274em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">≰</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 不小于等于运算，符号: \\not\\leq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≰</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\not\\leq z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 约等于运算，符号: \\approx, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≈</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\approx z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6775599999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span><br />\n 恒定等于运算，符号: \\equiv, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>≡</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x+y \\equiv z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65819em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></p>\n<h3 id=\"集合运算\"><a class=\"anchor\" href=\"#集合运算\">#</a> 集合运算</h3>\n<p>属于运算，符号: \\in, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 不属于运算，符号: \\notin, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 不属于运算，符号: \\not\\in, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∉</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\not\\in y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 子集运算，符号: \\subset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊂</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 子集运算，符号: \\supset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊃</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\supset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 真子集运算，符号: \\subseteq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊆</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subseteq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非真子集运算，符号: \\subsetneq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊊</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\subsetneq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⊊</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 真子集运算，符号: \\supseteq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊇</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\supseteq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊇</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非真子集运算，符号: \\supsetneq, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊋</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\supsetneq y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⊋</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非子集运算，符号: \\not\\subset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊄</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\not\\subset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 非子集运算，符号: \\not\\supset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊅</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\not\\supset y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 并集运算，符号: \\cup, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∪</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\cup y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 交集运算，符号: \\cap, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∩</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\cap y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 差集运算，符号: \\setminus, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∖</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\setminus y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 同或运算，符号: \\bigodot, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⨀</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\bigodot y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨀</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 同与运算，符号: \\bigotimes, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⨂</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\bigotimes y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨂</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><br />\n 实数集合，符号: \\mathbb {R}, 如: \\mathbb {R}<br />\n 自然数集合，符号: \\mathbb {Z}, 如: \\mathbb {Z}<br />\n 空集，符号: \\emptyset, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\emptyset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">∅</span></span></span></span></p>\n<h3 id=\"数学符号\"><a class=\"anchor\" href=\"#数学符号\">#</a> 数学符号</h3>\n<p>无穷，符号: \\infty, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span><br />\n 虚数，符号: \\imath, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ı</mi></mrow><annotation encoding=\"application/x-tex\">\\imath</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\"></span></span></span></span><br />\n 虚数，符号: \\jmath, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">ȷ</mi></mrow><annotation encoding=\"application/x-tex\">\\jmath</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\"></span></span></span></span><br />\n 数学符号，符号 \\hat {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\check {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˇ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\check{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.62847em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.62847em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˇ</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\breve {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>˘</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\breve{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">˘</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\tilde {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>~</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\tilde{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6678599999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6678599999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">~</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\bar {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\bar{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.56778em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.56778em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span><br />\n 矢量符号，符号 \\vec {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.714em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.714em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\acute {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˊ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\acute{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˊ</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\grave {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>ˋ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\grave{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˋ</span></span></span></span></span></span></span></span></span></span><br />\n 数学符号，符号 \\mathring {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>˚</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\mathring{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.375em;\"><span class=\"mord\">˚</span></span></span></span></span></span></span></span></span></span><br />\n 一阶导数符号，符号 \\dot {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>˙</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\dot{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.13889em;\"><span class=\"mord\">˙</span></span></span></span></span></span></span></span></span></span><br />\n 二阶导数符号，符号 \\ddot {a}, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>a</mi><mo>¨</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\ddot{a}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">¨</span></span></span></span></span></span></span></span></span></span><br />\n 上箭头，符号: \\uparrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↑</mo></mrow><annotation encoding=\"application/x-tex\">\\uparrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">↑</span></span></span></span><br />\n 上箭头，符号: \\Uparrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇑</mo></mrow><annotation encoding=\"application/x-tex\">\\Uparrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">⇑</span></span></span></span><br />\n 下箭头，符号: \\downarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↓</mo></mrow><annotation encoding=\"application/x-tex\">\\downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">↓</span></span></span></span><br />\n 下箭头，符号: \\Downarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇓</mo></mrow><annotation encoding=\"application/x-tex\">\\Downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">⇓</span></span></span></span><br />\n 左箭头，符号: \\leftarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>←</mo></mrow><annotation encoding=\"application/x-tex\">\\leftarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">←</span></span></span></span><br />\n 左箭头，符号: \\Leftarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇐</mo></mrow><annotation encoding=\"application/x-tex\">\\Leftarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇐</span></span></span></span><br />\n 右箭头，符号: \\rightarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span><br />\n 右箭头，符号: \\Rightarrow, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span><br />\n 底端对齐的省略号，符号: \\ldots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1,2,\\ldots,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span><br />\n 中线对齐的省略号，符号: \\cdots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>x</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">x_1^2 + x_2^2 + \\cdots + x_n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0622159999999998em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0622159999999998em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span><br />\n 竖直对齐的省略号，符号: \\vdots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mrow><annotation encoding=\"application/x-tex\">\\vdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.03em;\"></span><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span></span><br />\n 斜对齐的省略号，符号: \\ddots, 如: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋱</mo></mrow><annotation encoding=\"application/x-tex\">\\ddots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.82em;vertical-align:0em;\"></span><span class=\"minner\">⋱</span></span></span></span></p>\n<h3 id=\"希腊字母\"><a class=\"anchor\" href=\"#希腊字母\">#</a> 希腊字母</h3>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>实现</th>\n<th>字母</th>\n<th>实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>A</td>\n<td>α</td>\n<td>\\alhpa</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B</td>\n<td>β</td>\n<td>\\beta</td>\n</tr>\n<tr>\n<td>Γ</td>\n<td>\\Gamma</td>\n<td>γ</td>\n<td>\\gamma</td>\n</tr>\n<tr>\n<td>Δ</td>\n<td>\\Delta</td>\n<td>δ</td>\n<td>\\delta</td>\n</tr>\n<tr>\n<td>E</td>\n<td>E</td>\n<td>ϵ</td>\n<td>\\epsilon</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>Z</td>\n<td>ζ</td>\n<td>\\zeta</td>\n</tr>\n<tr>\n<td>H</td>\n<td>H</td>\n<td>η</td>\n<td>\\eta</td>\n</tr>\n<tr>\n<td>Θ</td>\n<td>\\Theta</td>\n<td>θ</td>\n<td>\\theta</td>\n</tr>\n<tr>\n<td>I</td>\n<td>I</td>\n<td>ι</td>\n<td>\\iota</td>\n</tr>\n<tr>\n<td>K</td>\n<td>K</td>\n<td>κ</td>\n<td>\\kappa</td>\n</tr>\n<tr>\n<td>Λ</td>\n<td>\\Lambda</td>\n<td>λ</td>\n<td>\\lambda</td>\n</tr>\n<tr>\n<td>M</td>\n<td>M</td>\n<td>μ</td>\n<td>\\mu</td>\n</tr>\n<tr>\n<td>N</td>\n<td>N</td>\n<td>ν</td>\n<td>\\nu</td>\n</tr>\n<tr>\n<td>Ξ</td>\n<td>\\Xi</td>\n<td>ξ</td>\n<td>\\xi</td>\n</tr>\n<tr>\n<td>O</td>\n<td>O</td>\n<td>ο</td>\n<td>\\omicron</td>\n</tr>\n<tr>\n<td>Π</td>\n<td>\\Pi</td>\n<td>π</td>\n<td>\\pi</td>\n</tr>\n<tr>\n<td>P</td>\n<td>P</td>\n<td>ρ</td>\n<td>\\rho</td>\n</tr>\n<tr>\n<td>Σ</td>\n<td>\\Sigma</td>\n<td>σ</td>\n<td>\\sigma</td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>τ</td>\n<td>\\tau</td>\n</tr>\n<tr>\n<td>Υ</td>\n<td>\\Upsilon</td>\n<td>υ</td>\n<td>\\upsilon</td>\n</tr>\n<tr>\n<td>Φ</td>\n<td>\\Phi</td>\n<td>ϕ</td>\n<td>\\phi</td>\n</tr>\n<tr>\n<td>X</td>\n<td>X</td>\n<td>χ</td>\n<td>\\chi</td>\n</tr>\n<tr>\n<td>Ψ</td>\n<td>\\Psi</td>\n<td>ψ</td>\n<td>\\psi</td>\n</tr>\n<tr>\n<td>Ω</td>\n<td>\\v</td>\n<td>ω</td>\n<td>\\omega</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "blog",
                "blog,markdown"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/03/21/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%872/",
            "url": "https://to-ywz.github.io/2021/03/21/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%872/",
            "title": "python提升2",
            "date_published": "2021-03-21T07:45:54.000Z",
            "content_html": "<h2 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<p>定义一个类 Animals:</p>\n<ol>\n<li>数据成员\n<ul>\n<li>名称</li>\n<li>种类</li>\n<li>年龄</li>\n<li>性别</li>\n<li>状态</li>\n</ul>\n</li>\n<li>构造函数</li>\n</ol>\n<p>代码实现:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> singledispatch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animals</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    specie <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    geander <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">toWalk</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要散步\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">toEat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要食物\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">toDrink</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        self<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要喝水\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span>Animals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 成员变量</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    specie <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    age <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> specie<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>specie <span class=\"token operator\">=</span> specie</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">miaomiaomiao</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大橘: 喵喵喵\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">setWeight</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        self<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@singledispatch</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 想吃\"</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@Eat<span class=\"token punctuation\">.</span>register</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\": 要吃 \"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 个\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>cat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token string\">'大橘'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中华田园'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>cat<span class=\"token punctuation\">.</span>toEat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>cat<span class=\"token punctuation\">.</span>toDrink<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>cat<span class=\"token punctuation\">.</span>miaomiaomiao<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>cat<span class=\"token punctuation\">.</span>setWeight<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" kg 重\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>cat<span class=\"token punctuation\">.</span>Eat<span class=\"token punctuation\">(</span><span class=\"token string\">\"小鱼干\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>cat<span class=\"token punctuation\">.</span>Eat<span class=\"token punctuation\">(</span><span class=\"token number\">99999</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>\n<p>通过 <code>@staticmethod</code>  装饰器即可把其装饰的方法变为一个静态方法.<br />\n 什么是静态方法呢？其实不难理解，普通的方法，可以在实例化后直接调用，并且在方法里可以通过 <code>self.</code>  调用实例变量或类变量.<br />\n 但静态方法<strong>是不可以访问实例变量或类变量的</strong>，一个不能访问实例变量和类变量的方法，其实相当于跟类本身已经没什么关系了，它与类唯一的关联就是需要通过类名来调用这个方法.</p>\n</li>\n<li>\n<p>类方法通过 <code>@classmethod</code>  装饰器实现，类方法和普通方法的区别是，类方法只能访问类变量，不能访问<strong>实例变量</strong>.</p>\n</li>\n<li>\n<p>属性方法的作用就是通过 <code>@property</code>  把一个方法变成一个静态属性，调用时与调用属性的方式相同.</p>\n<ul>\n<li>把一个方法变成静态属性的作用:<br />\n 当某个属性的值是一系列动作后才得到的结果.<br />\n 当每次调用时，其实它都要经过一系列的动作才返回结果的，但这些动作过程不需要用户关心，用户只关心得到这个属性的值即可，也就是说用户只需要调用这个属性就可以了.</li>\n</ul>\n<ol>\n<li>\n<p>修改属性值<br />\n将由 <code>@proerty</code>  装饰器（把一个方法变成一个静态属性）使用 <code>@proerty.setter</code>  装饰器再装饰一下，此时 你需要写一个新方法（同名）,  对这个属性值进行更改.</p>\n</li>\n<li>\n<p>删除属性</p>\n</li>\n</ol>\n<ul>\n<li>将由 <code>@proerty</code>  装饰器（把一个方法变成一个静态属性）使用 <code>@proerty.deleter</code>  装饰器再装饰一下，此时 你需要写一个新方法（同名）.</li>\n<li>使用 <code>del</code>  删除该实例所对应的属性方法（属性） 例如:  <code>del 对象.属性</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"python-json\"><a class=\"anchor\" href=\"#python-json\">#</a> python JSON</h2>\n<p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写。<br />\njson.dumps 用于将 python 对象编码成 JSON 字符串。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了提高可读性，dumps 方法提供了一些可选的参数。<br />\n <code>sort_keys=True</code>  表示按照字典排序 (a 到 z) 输出。<br />\n <code>indent</code>  参数，代表缩进的位数<br />\n <code>separators</code>  参数的作用是去掉，和 <code>:</code>  后面的空格，传输过程中数据越精简越好</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> indent<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>separators<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>json.loads</code>  用于解码 JSON 数据。该函数返回 python 字段的数据类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jsonData <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5&#125;'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>text <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#将 string 转换为 dict</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "python摸鱼"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/03/14/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%87/",
            "url": "https://to-ywz.github.io/2021/03/14/CS/Python/Python%E6%8F%90%E5%8D%87/Python%E6%8F%90%E5%8D%87/",
            "title": "python提升",
            "date_published": "2021-03-14T12:08:41.000Z",
            "content_html": "<h1 id=\"python-提升百度飞桨\"><a class=\"anchor\" href=\"#python-提升百度飞桨\">#</a> python 提升 (百度飞桨)</h1>\n<p>熟悉 python 的基础语法，并掌握 NumPy, Pandas 及其他基础工具模块的使用</p>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<ul>\n<li>python 数据结构</li>\n<li>python 面向对象</li>\n<li>python JSON</li>\n<li>python 异常处理</li>\n<li>常见 Linux 命令</li>\n</ul>\n<h2 id=\"python数据结构\"><a class=\"anchor\" href=\"#python数据结构\">#</a> python 数据结构</h2>\n<p>数字、字符串、列表、元祖、字典</p>\n<h3 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h3>\n<p>python Number 数据类型用于存储数值<br />\n python Number 数据类型用于存储数值，包括整型、长整型、浮点型、复数</p>\n<h4 id=\"python-math-模块\"><a class=\"anchor\" href=\"#python-math-模块\">#</a> python math 模块:</h4>\n<pre><code>python 中数学运算常用的函数基本都在 math 模块\n</code></pre>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向上取整</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 向下取整</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 绝对值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 开平方</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回自然常数的 n 次幂</span></pre></td></tr></table></figure><h4 id=\"python随机数\"><a class=\"anchor\" href=\"#python随机数\">#</a> python 随机数:</h4>\n<p><strong>示例:</strong>:<br />\n 导入 random 后，使用 random 随机生成  <code>[0, 1)</code>  的 实数:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ranNumber <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ranNumber<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>与 C 语言相反。调用 random.random () 生成随机数时，每一次生成的数都是随机的.<br />\n 这时候就可以  <code>seed</code> , 当预先使用 random.seed (x) 设定好种子之后，其中的 x 可以是任意数字，此时使用 random () 生成的随机数将会是同一个</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"------- 设置种子 seed -------\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Random number with seed 10 : \"</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 生成同一个随机数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Random number with seed 10 : \"</span><span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"randint\"><a class=\"anchor\" href=\"#randint\">#</a> randint()</h3>\n<p>生成一个随机整数<br />\n<strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ran <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<p>作用：类似其他语言中的数组</p>\n<h3 id=\"获取和检测-列表成员\"><a class=\"anchor\" href=\"#获取和检测-列表成员\">#</a> 获取和检测 列表成员</h3>\n<p>声明一个列表，并通过下标或索引获取元素</p>\n<p><strong>示例 1</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#声明一个列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tonney'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'superman'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'jay'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#通过下标或索引获取元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#获取第一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#遍历列表，获取元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#查询 names 里面有没有 superman</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">'superman'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#更简单的方法，来查询 names 里有没有 superman</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'superman'</span> <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有超人'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表元素添加\"><a class=\"anchor\" href=\"#列表元素添加\">#</a> 列表元素添加</h3>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#声明一个空列表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>girls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#append (), 末尾追加</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>girls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'杨超越'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>girls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#extend (), 一次添加多个。把一个列表添加到另一个列表，列表合并. </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>models <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘雯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'奚梦瑶'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>girls<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#girls = girls + models</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>girls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#insert (): 指定位置添加</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>girls<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'虞书欣'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>girls<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表元素修改\"><a class=\"anchor\" href=\"#列表元素修改\">#</a> 列表元素修改</h3>\n<p>通过下标找到元素，然后用 = 赋值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'香蕉'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'草莓'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fruits<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'strawberry'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>将fruits列表中的‘香蕉’替换为‘banana’</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> fruit <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">'香蕉'</span> <span class=\"token keyword\">in</span> fruit<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fruit <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">'香蕉'</span> <span class=\"token keyword\">in</span> fruits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fruits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'banana'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表删除元素\"><a class=\"anchor\" href=\"#列表删除元素\">#</a> 列表删除元素</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pen'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pencil'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">del</span> words<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pen'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pencil'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>words<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pen'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pencil'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ruler'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>words<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表切片\"><a class=\"anchor\" href=\"#列表切片\">#</a> 列表切片</h3>\n<p>在 python 中处理列表的部分元素，称之为切片.<br />\n 创建切片，可指定要使用的第一个元素和最后一个元素的索引.<br />\n<strong>PS: 左开右闭</strong><br />\n将截取的结果再次存放在一个列表中，所以还是返回列表</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>animals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tiger'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'snake'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'mouse'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bird'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>animals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表排序\"><a class=\"anchor\" href=\"#列表排序\">#</a> 列表排序</h3>\n<ul>\n<li>随机生成 10 个不同的整数，并进行排序</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生成10个不同的随机整数, 并存至列表中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span>  random</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>random_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ran <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> ran <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span>  random_list<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        random_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#默认升序</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>new_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#降序</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>new_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">,</span>reverse <span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>new_list<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h2>\n<p>列表类似，元祖中的内容不可修改</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tuple1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tuple2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tuple2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>PS: 元组中只有一个元素时，需要在后面加逗号！</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>tuple3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>元组不能修改，所以不存在往元组里加入元素.<br />\n 那作为容器的元组，如何存放元素？</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>random_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ran <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    random_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>random_tuple <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>random_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组的修改\"><a class=\"anchor\" href=\"#元组的修改\">#</a> 元组的修改</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组相关函数\"><a class=\"anchor\" href=\"#元组相关函数\">#</a> 元组相关函数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"统计元组成员个数\"><a class=\"anchor\" href=\"#统计元组成员个数\">#</a> 统计元组成员个数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"存在检测\"><a class=\"anchor\" href=\"#存在检测\">#</a> 存在检测</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> random_tuple<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#返回元组中 4 所对应的下标，不会报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token keyword\">in</span> random_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>random_tuple<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组的拆包与装包\"><a class=\"anchor\" href=\"#元组的拆包与装包\">#</a> 元组的拆包与装包</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#定义一个元组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#将元组赋值给变量 a,b,c</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token operator\">=</span> t3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#打印 a,b,c</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#当元组中元素个数与变量个数不一致时</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#定义一个元组，包含 5 个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#将 t4 [0],t4 [1] 分别赋值给 a,b; 其余的元素装包后赋值给 c</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> t4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h2>\n<ul>\n<li><strong>定义</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dict2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'李明'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'weight'</span><span class=\"token punctuation\">:</span><span class=\"token number\">61</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>list 转字典</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict3 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'李明'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict3<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>修改</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dict4<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'虞书欣'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dict4<span class=\"token punctuation\">[</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">43</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dict4<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "python摸鱼"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/03/13/CS/Python/Python%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80/",
            "url": "https://to-ywz.github.io/2021/03/13/CS/Python/Python%E5%9F%BA%E7%A1%80/Python%E5%9F%BA%E7%A1%80/",
            "title": "python 基础",
            "date_published": "2021-03-13T12:22:15.000Z",
            "content_html": "<h1 id=\"python-基础\"><a class=\"anchor\" href=\"#python-基础\">#</a> python 基础</h1>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<pre><code>1. \n2. \n3. \n</code></pre>\n<h2 id=\"基础操作\"><a class=\"anchor\" href=\"#基础操作\">#</a> 基础操作</h2>\n<p>python 的  <code>+ - * / =</code>  运算基本与其他语言类似，除法有个专门的整除运算符  <code>//</code> <br />\npython 的  <code>print</code>  可以使用  <code>%</code>  来控制数据类型 输出</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span>  \t\t<span class=\"token comment\"># 声明一个变量 age 用来存储一个数字 20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\t\t        <span class=\"token comment\"># 基础数学加法，在 IDLE 中，直接打印出结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s'</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 打印 Hello World!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"语句结构\"><a class=\"anchor\" href=\"#语句结构\">#</a> 语句结构</h2>\n<p>与 其他语言不同 python 采用缩进进行格式控制， <code>:</code>  来标识和制表符 来确定代码块的位置</p>\n<h3 id=\"if语句\"><a class=\"anchor\" href=\"#if语句\">#</a> if 语句</h3>\n<ul>\n<li><strong>语法格式</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    语句</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    语句</pre></td></tr></table></figure><ul>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 如果 if 跟随的条件为 假 那么不执行属于 if 的语句，然后寻找 else</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"假的\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 寻找到 else 之后 执行属于 else 中的语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1==2为假\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"for语句\"><a class=\"anchor\" href=\"#for语句\">#</a> for 语句</h3>\n<ul>\n<li><strong>语法:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> 变量 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>范围<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这里可以填入 1-2 个参数 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        <span class=\"token comment\"># 也可以没有 range 直接 in 在一个 列表，元组，等元素集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    语句</pre></td></tr></table></figure><ul>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>strList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6789'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> strList<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"循环操作-while\"><a class=\"anchor\" href=\"#循环操作-while\">#</a> 循环操作 ---while</h3>\n<ul>\n<li><strong>语法</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    语句</pre></td></tr></table></figure><ul>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 计算 0-99 的和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sumI <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">99</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sumI <span class=\"token operator\">=</span> sumI <span class=\"token operator\">+</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    n <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sumI<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"break-continue-pass\"><a class=\"anchor\" href=\"#break-continue-pass\">#</a> break、continue、pass</h3>\n<ul>\n<li><strong>示例 1:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#break 语句可以跳出 for 和 while 的循环体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><ul>\n<li><strong>示例 2:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#continue 语句跳过当前循环，直接进行下一轮循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>示例 3:</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#pass 是空语句，一般用做占位语句，不做任何事情</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> letter <span class=\"token keyword\">in</span> <span class=\"token string\">'Boolean'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> letter <span class=\"token operator\">==</span> <span class=\"token string\">'o'</span> OR letter <span class=\"token operator\">==</span> <span class=\"token string\">'B'</span> OR letter <span class=\"token operator\">==</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"number数字\"><a class=\"anchor\" href=\"#number数字\">#</a> Number (数字)</h3>\n<p>python 支持 <code>int, float, complex</code>  三种不同的数字类型</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4j</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"string字符串\"><a class=\"anchor\" href=\"#string字符串\">#</a> String (字符串)</h3>\n<p>python 支持字符串拼接、截取等多种运算，对于 python 来说  <code>&quot;&quot;</code>  和  <code>''</code>  没有区别  <code>r''</code>  被认为为源字符串</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a + b 输出结果：\"</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#print (\"a [1:4] 输出结果：\", a [1:4])</span></pre></td></tr></table></figure><h3 id=\"list列表\"><a class=\"anchor\" href=\"#list列表\">#</a> List (列表)</h3>\n<p>列表是写在方括号  <code>[]</code>  之间、用逗号分隔开的元素列表.<br />\n 列表索引值以 0 为开始值，-1 为从末尾的开始位置.</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2.23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"tuple元组\"><a class=\"anchor\" href=\"#tuple元组\">#</a> Tuple（元组）</h3>\n<p>tuple 与 list 类似，不同之处在于 tuple 的元素不能修改. tuple 写在小括号里，元素之间用逗号隔开.<br />\n 元组的元素不可变，但可以包含可变对象，如 list.</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">786</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2.23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70.2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t3<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'X'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"dict字典\"><a class=\"anchor\" href=\"#dict字典\">#</a> dict（字典）</h3>\n<p>字典是无序的对象集合，使用键 - 值（key-value）存储，具有极快的查找速度.(Hash 实现)<br />\n 键 (key) 必须使用不可变类型.<br />\n 同一个字典中，键 (key) 必须是唯一的.</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Michael'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tracy'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"set集合\"><a class=\"anchor\" href=\"#set集合\">#</a> set（集合）</h3>\n<p><code>set</code>  和 <code>dict</code>  类似，也是一组 <code>key</code>  的集合，但不存储 <code>value</code> 。由于 <code>key</code>  不能重复，所以，在 <code>set</code>  中，没有重复的 <code>key</code> 。<br />\n <code>set</code>  是无序的，重复元素在 <code>set</code>  中自动被过滤。</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业:</h2>\n<p>用 pyton 实现 9*9 乘法表:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d*%d=%d\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "python摸鱼"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/03/11/CS/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/",
            "url": "https://to-ywz.github.io/2021/03/11/CS/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E7%AC%94%E8%AE%B0/",
            "title": "C语言指针笔记",
            "date_published": "2021-03-11T03:45:20.000Z",
            "content_html": "<h1 id=\"c-语言指针笔记\"><a class=\"anchor\" href=\"#c-语言指针笔记\">#</a> C 语言指针笔记</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>指针 可以说是 C 语言的灵魂，最巧妙的地方。不明白，不理解指针 那就是等于没学 C 语言.<br />\n 指针这玩意说难也不难，主要是细节问题。比如最常见的，指针数组和数组指针、指针常数和常数指针、指针函数和函数指针。刚学完指针还好，时间一久，听到之这些东西很难短时间内反应过来<br />\n指针这块 用的多的 就是字符串了，其他的用的都比较少，所以久而久之总是忘，所以干脆写篇博客加深印象，也便于日后回顾<br />\n<s><em>我才不承认是我自己，搞混了概念，重新学了一遍，想和人分享没人听才写的博客，绝对不是！</em></s></p>\n<h2 id=\"基础部分\"><a class=\"anchor\" href=\"#基础部分\">#</a> 基础部分</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a><br />\n写在前面: <strong>指针是一种变量，地址是一种数据</strong>.<br />\n 大概的介绍一下 什么是指针，指针的作用，以及指针的基本操作<br />\n<strong> PS: 以下假设环境均为 64 位 1904 Win10 vscode gcc8.1.0</strong></p>\n<h3 id=\"指针的作用\"><a class=\"anchor\" href=\"#指针的作用\">#</a> 指针的作用</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>我先说明作用后面慢慢分析.<br />\n<strong> 作用</strong>:</p>\n<ol>\n<li>数据共享更加便捷，打破共享壁垒</li>\n<li>以更精简的方式引用大的数据结构</li>\n<li>利用指针可以直接操纵内存地址 (在 MCU, 嵌入式开发上体会会很深刻)</li>\n<li>利用指针，能在程序执行过程中预留新的内存空间 (当然在没有 MMU 的单片机中，无法实现，能写内存管理的大佬除外)</li>\n</ol>\n<p>先抛开指针，让我们来想想，变量的作用是什么？<strong>使内存空间易于管理</strong>.<br />\n 好，为什么内存空间难管理，因为内存标号 (<strong>内存地址</strong>) 往往都是一串 16 进制数，难于记忆，所以对内存地址取个名字，便于记忆<br />\n<strong>局部变量</strong>都有一定的局限性，所谓的<mark>作用域</mark>，<strong>全局变量</strong>虽然没有局限性，但大量的全局变量会浪费许多内存.<br />\n 然而很多时候我们需要在作用域外来修改内存上的值 (例如，两数交换), 数据唯一不变的只有地址，所以想要实现<mark>数据共享</mark>，只能通过 传递地址 来实现了，指针 —— 一种特殊的变量，就应运而生了.(学过汇编后，会对指针的数据共享理解更加深刻)</p>\n<p>第二个作用，很大程度上体现在函数传参和字符串上，思考一个问题，如果我有 一个结构体，如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">RxBufferTypeDef</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> write<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>里面有 3 个整型变量，一个指针变量，一个 int 变量 4 字节，一个指针变量 8 字节，一个结构体 20 个字节大小，如果 一个函数调用时传递的是整个结构体，那么就相当于在内存中又开辟了 20 字节大小空间，用于实现对传入结构体的复制，而且不能对结构体的成员进行修改，如果传递结构体指针，大小恒为 8 字节，而且可以对结构体进行修改，整个程序中只占用 20 字节，在内存和运行速度上，比之直接传结构体更为方便.</p>\n<p>大多数情况下，可以看到程序使用的内存是通过显式声明分配给变量的内存 (也就是静态内存分配). 这一点对于节省计算机内存是有帮助的，因为计算机可以提前为需要的变量分配内存。但是在很多应用场合中，可能程序运行时不清楚到底需要多少内存，这时候可以使用指针，让程序在运行时获得新的内存空间 (实际上应该就是动态内存分配 <code>malloc</code> ,  <code>calloc</code> ), 并让指针指向这一内存更为方便.</p>\n<h3 id=\"指针的声明\"><a class=\"anchor\" href=\"#指针的声明\">#</a> 指针的声明</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p><strong>语法</strong>:  <code>数据类型 * 指针名称 = 初始地址;</code> <br />\n<strong> 示例</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i_variable <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> d_variable <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 i_variable</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i_variable<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 d_variable</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d_variable<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指针的使用\"><a class=\"anchor\" href=\"#指针的使用\">#</a> 指针的使用</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>两个和指针息息相关的运算符:</p>\n<ul>\n<li><code>&amp;</code>  是 C 语言中的取地址符号，用于获取地址</li>\n<li><code>*</code>  是 C 语言中的解引用的符号，用于获取地址上的值</li>\n</ul>\n<p><strong>操作</strong>:</p>\n<ul>\n<li>修改指向的地址；<br />\n<strong> 语法</strong>:  <code>ptr_b = &amp;a;</code></li>\n<li>修改指向地址上的值；<br />\n<strong> 语法</strong>:  <code>*ptr_b = 100;</code></li>\n<li>所有指针都之和 处理位数以及 编译器相关，一般来说 是 8 字节或者 4 字节，比较特殊的 51 单片机是 12 位</li>\n</ul>\n<p><strong>示例 1</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i_variable1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i_variable2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> d_variable <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 i_variable1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i_variable1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明一个 指向整型的指针，指向 d_variable</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d_variable<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 打印指针大小</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof(ptr_a) = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sizeof(ptr_b) = %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ptr_b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 打印 i_variable 指向的地址上的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_a = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i_variable2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变 ptr_a 的指向</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_a = %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i_variable1 = %d\\n\"</span><span class=\"token punctuation\">,</span> i_variable1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i_variable2 = %d\\n\"</span><span class=\"token punctuation\">,</span> i_variable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr_a = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ptr_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"空指针\"><a class=\"anchor\" href=\"#空指针\">#</a> 空指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<ul>\n<li><strong>定义</strong>：指针变量指向内存中编号为 0 的空间</li>\n<li><strong>用途</strong>：初始化指针变量，不知道指哪里，就先指向这里</li>\n<li><strong>注意</strong>：空指针指向的内存是不可以访问的</li>\n<li><strong>示例:</strong></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 指针变量 p 指向内存地址编号为 0 的空间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 访问空指针报错 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 内存编号 0 ~255 为系统占用内存，不允许用户访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%x\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<ul>\n<li>\n<p><strong>定义</strong>：指针变量指向非法的内存空间<br />\n非法空间是指，指针指向系统和程序协商后可访问空间之外的地址<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1n32pcktj30yk0arq3j.jpg\" alt=\"alt 野指针\" /></p>\n</li>\n<li>\n<p><strong>示例</strong>:</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 指针变量 p 指向内存地址编号为 0x1100 的空间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 访问野指针报错 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"一级指针\"><a class=\"anchor\" href=\"#一级指针\">#</a> 一级指针</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>简单来说就是只有 一个  <code>*</code>  运算符的指针变量，大多数的一维指针会用于指向结构体、数组、字符串...</p>\n<h3 id=\"指向变量的指针\"><a class=\"anchor\" href=\"#指向变量的指针\">#</a> 指向变量的指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>指向变量的语法，如上面指针的基本内容所述，只要存在数据类型，都可以定义指针<br />\n这说一个比较特殊的 指针 —— <code>void</code>  指针，众所周知， <code>void</code>  是一种空类型，那么，正常思路下指向  <code>void</code>  的指针，就是指向空的指针，简称除了 <code>NULL</code>  啥都不能指.<br />\n 其实不然，正所谓 万物皆虚，万事皆允 (<s>we are assassins!</s>), void 指针啥都能指，最简单的例子就是 内置 <code>qsort</code>  的回调函数 <code>cmp(const void *a, const void *b)</code> , 咱们总不可能开两个空数组吧 (滑稽)<br />\n 其实无论什么数据，在存储器上都是高低电平，只是读取的方式不同，才有了不同的数据类型， <code>void</code>  指针正是依靠了这个特性，通过强制类型转换来实现，任意传参.<br />\n 其实无论什么指针，都可以强制转化，用于传递地址，只是因为<mark>指针只存储地址，且数据的意义只与读取方式相关</mark>所以才可以进行相互转换<br />\n<strong> PS: 个人建议，如果要传入不知道什么类型的数据时可以考虑以 void * 作为参数，不到万不得已，不要使用其他指针来实现类型转换</strong></p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_Nodes</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyStruct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyStruct node1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is a test about void pointer\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 转化位 int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================int=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;a = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*v_ptr = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v_ptr = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 转化位 double</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    v_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================double=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d = %.2lf\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;d = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*v_ptr = %.2lf\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v_ptr = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 转化为 结构体</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v_ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================structer=======================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node.id = %d\\n\"</span><span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node.str = %s\\n\"</span><span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;d = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*v_ptr).id = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>MyStruct <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*v_ptr).str = %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>MyStruct <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v_ptr = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> v_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>示例 2</strong>:<br />\n 这一部分是标准库调用示例:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 获取数组长度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 动态开辟数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 读入数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @brief 遍历数组</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param arr   数组首地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @param n     数组大小 </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">travelArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"const指针\"><a class=\"anchor\" href=\"#const指针\">#</a> const 指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>这就是一个经典的问题了，** **, const 修饰不同 的地方，指针的效果就不一样，const 一共有三种修饰方式:</p>\n<ul>\n<li>第一种:  <code>const int* ptr = &amp;a;</code>         常量指针，可以改变指向方向</li>\n<li>第二种:  <code>int* const ptr = &amp;a;</code>         指针常量，可以改变地址上的值</li>\n<li>第三种:  <code>const int* const ptr = &amp;a;</code>   上面两种的结合体，可以称为指针常数</li>\n</ul>\n<p>顾名思义，<strong> 常量指针</strong>，指向常量的指针，指向的是常量，指针不是常量，可以改变指向的地址，但是不能改变指向的值<br />\n<strong>指针常量</strong>，指针自己是一个常量，指向的不一定是常量，所以可以改变所指向地址上的值，不能改变指向的地址<br />\n<strong>指针常数</strong>，这个就不多说了，啥都改不了，指向的是常数</p>\n<p><strong>示例</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 常量指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>cpa <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 指针常量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> pca <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 指针常数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> cpca <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pa = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*cpa = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*pca = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*cpca = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================修改cpa指向==================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cpa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，修改常量指针指向的地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//pca = &amp;b; // 错误，修改指针指常量向的地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;b = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cpa = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> cpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pca = 0x%x\\n\"</span><span class=\"token punctuation\">,</span> pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cpa <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=================修改pca指向的值===============\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// *cpa = 90;   // 错误，修改常量指针的指向的变量的值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">*</span>pca <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确，修改指针常量指向的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*pa = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*cpa = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>cpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*pca = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//cpca = &amp;b;   // 错误，双 const 啥都不能改</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// *cpca = 90;  // 错误，双 const 啥都不能改</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指向函数的指针\"><a class=\"anchor\" href=\"#指向函数的指针\">#</a> 指向函数的指针</h3>\n<p>话外：为什么不能用二级指针直接指向二维数组</p>\n<ol>\n<li>什么是函数指针:<br />\n 和变量类似，如果在程序中定义了一个函数，那么在编译时系统就会为这个函数代码分配一段存储空间，这段存储空间的首地址称为这个函数的地址，在 debug 时，我们会在主栈中看到，被压入的函数的地址。而且函数名表示的就是这个地址。既然是地址我们就可以定义一个指针变量来存放，这个指针变量就叫作函数指针变量，简称函数指针.</li>\n<li>函数指针的声明:<br />\n 函数指针与其他指针声明方式不同，正如前面所说，指针只能指向一种数据类型，所以 函数指针的声明有些复杂，大致格式如下:<br />\n <code>返回数据类型 (* 指针名称)(参数列表);</code> <br />\n 例如:  <code>int (*funPtr)(int *, int *);</code> <br />\n 这个语句就定义了一个指向函数的指针变量  <code>funPtr</code> . 首先它是一个指针变量，所以要有一个  <code>*</code>  , 即 (*p); 其次前面的  <code>int</code>  表示这个指针变量可以指向返回值类型为 int 型的函数；后面括号中的两个  <code>int</code>  表示这个指针变量可以指向有两个参数且都是  <code>int</code>  型的函数。所以合起来这个语句的意思就是：定义了一个指针变量  <code>funPtr</code> , 该指针变量可以指向返回值类型为  <code>int</code>  型，且有两个整型参数的函数.  <code>funPtr</code>  的类型为  <code>int(*)(int, int)</code></li>\n<li>如何用函数指针调用函数<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 声明一个函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 定义一个函数指针 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pFunc <span class=\"token operator\">=</span> Func<span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* 将 Func 函数的首地址赋给指针变量 p*/</span></pre></td></tr></table></figure>PS: 函数指针 没有  <code>++</code>  和  <code>--</code>  的操作</li>\n</ol>\n<ul>\n<li><strong>示例</strong><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个函数指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 把函数 Max 赋给指针变量 p, 使 p 指向 Max 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    p <span class=\"token operator\">=</span> Max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter a and b:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 通过函数指针调用 Max 函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = %d\\nb = %d\\nmax = %d\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * @brief 比较连个数大小</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * @param x 比较数 x</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @param y 比较数 y</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @retval int 最大值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 定义 Max 函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"二级指针\"><a class=\"anchor\" href=\"#二级指针\">#</a> 二级指针</h2>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a><br />\n与 一级指针类似，需要两次  <code>*</code>  操作才能得到最顶层值 的 指针变量，最常见的就是 字符串数组。一级指针往往比较简单，维度一升高 后就开始变得复杂起来<br />\n三者之间的关系如图，手残，将就一下<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1n2xn673j30ws0i2zkd.jpg\" alt=\"alt\" /><br />\n 在内存中的图示<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1n304psmj30zf0g2q2v.jpg\" alt=\"alt\" /></p>\n<h3 id=\"指向指针的指针\"><a class=\"anchor\" href=\"#指向指针的指针\">#</a> 指向指针的指针</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>指针可以指向一份普通类型的数据，例如 int、double、char 等，也可以指向一份指针类型的数据，例如  <code>int *</code> 、 <code>double *</code> 、 <code>char *</code>  等，所以就有了指向指针的指针<br />\n上面图片的关系用 C 语言来描述就是</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pptr_a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ptr_a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>指针变量也是一种变量，也会占用存储空间，也可以使用 <code>&amp;</code>  获取它的地址.C 语言不限制指针的级数，每增加一级指针，在定义指针变量时就得增加一个星号 <code>*</code> .  <code>p1</code>  是一级指针，指向普通类型的数据，定义时有一个 <code>*</code> ;  <code>p2</code>  是二级指针，指向一级指针  <code>p1</code> , 定义时有两个 <code>*</code> .</p>\n<p>那么，为什么要有二级指针呢？<br />\n 先来看一下这段代码:<br />\n 有两个变量 <code>a</code> , <code>b</code> , 指针  <code>q</code> , <code>q</code>  指向 <code>a</code> , 我们想让 <code>q</code>  指向 <code>b</code> , 在函数里面实现.<br />\n 这里贴一下用于测试的主函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;a=0x%x, &amp;b=0x%x, &amp;q=0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    q <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*q=%d, q=0x%x, &amp;q=0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*q=%d, q=0x%x, &amp;q=0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>用 一级指针 实现:<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 让指针 p 指向 b;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>看起来 在逻辑上代码没有什么问题，但是众所周知，程序执行后  <code>*q</code>  不等于 100, 为什么呢？<br />\n 来简单看一下，测试输出的结果</p>\n<pre><code>&amp;a=0x403010, &amp;b=0x403014, &amp;q=0x407970\n*q=10, q=0x403010, &amp;q=0x407970\nfunc: &amp;p=0x61fe00, p=4206608  \nfunc: &amp;p=0x61fe00, p=4206612  \n*q=10, q=0x403010, &amp;q=0x407970\n</code></pre>\n<p>来分析一下输出:</p>\n<ul>\n<li>注释 1:  <code>a, b, q</code>  都有一个地址.</li>\n<li>注释 2:  <code>q</code>  指向  <code>a</code> ,  <code>q</code>  的值发生了变化，地址是固定的</li>\n<li>注释 3: 进入函数后的参数 <code>p</code>  的地址跟 <code>q</code>  不一样了。这是因为在函数调用时，为了保障原数据不变对其进行了拷贝，也就是说  <code>p</code>  和  <code>q</code>  不是同一个指针，但是 他们指向的地址是相同的，都指向 &amp;a (0x403010)</li>\n<li>注释 4:  <code>p</code>  指向  <code>b</code> , 这时候  <code>p</code>  的值发生了变化</li>\n<li>注释 5: 回到主函数后，函数栈释放， <code>p</code>  也就丢失了， <code>q</code>  也不会有任何变化.</li>\n</ul>\n<p>结论:<br />\n 编译器会对函数的每个参数制作临时副本，指针参数 <code>p</code>  的副本是  <code>q</code> , 编译器使  <code>p = q</code>  (但是  <code>&amp;p != &amp;q</code>  , 也就是他们并不在同一块内存地址，只是他们的内容一样，都是 a 的地址). 如果函数体内的程序修改了 p 的内容 (比如在这里它指向 b). 在本例中，p 申请了新的内存，只是把 p 所指的内存地址改变了 (变成了 b 的地址，但是 q 指向的内存地址没有影响), 所以在这里并不影响函数外的指针 q.</p>\n<p>其实，这就是 所谓的 <strong>传值调用</strong> 和 <strong>传地址调用</strong>，这两个概念就是一个抽象概念，value 和 address 是相对的，对于指针变量来说，传值 也是地址，传地址也是地址，只不过前者是传递指向的地址，后者是传递本身的地址.</p>\n<p>例如 swap 函数，如果参数为  <code>(int a, int b)</code> , 那就是传值调用，因为我们想要交换  <code>a</code>  和  <code>b</code>  的值，如果仅仅传入值，那么调用函数产生的副本，也仅仅是 数值与  <code>a b</code>  相同的两个全新变量而已。我们想要交换两个变量，就必须要传入地址，在地址上直接对值进行操作.</p>\n<p>上例中， <code>p</code>  对应的是  <code>a b</code>  变量，我们只传进想要改变的值，而非传入值所在的地址，所以  <code>q</code>  并没产生变化。这时候我们就需要传入，指针  <code>*q</code>  的地址了，对应的函数参数类型，就变量了指向指针的指针，也就是二级指针.</p>\n<ul>\n<li>\n<p>二级指针操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func: &amp;p=0x%x, p=%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>改动的地方很少.</p>\n<p>因为传了指针  <code>q</code>  的地址 (二级指针 <code>**p</code> ) 到函数，所以<strong>二级指针拷贝</strong> (拷贝的是  <code>p</code> , 一级指针中拷贝的是  <code>q</code> , 就是指向的地址),(<mark>拷贝了指针但是指针内容也就是指针所指向的地址是不变的</mark>) 所以它还是指向一级指针 <code>q</code>  ( <code>*p = q</code> ). 在这里无论拷贝多少次，它依然指向 <code>q</code> , 那么 <code>*p = &amp;b;</code>  自然的就是  <code>q = &amp;b;</code>  了.</p>\n</li>\n<li>\n<p><strong>PS</strong>:<br />\n 到这里其实我，想说的是其实 一级指针也可以实现二级指针的效果，但是并不推荐，咱们永远不知道这种方法的通用性，<br />\n 我们可以 一级指针的调用的时候传入  <code>q</code>  的地址，然后把赋值语句改为  <code>*p = &amp;b;</code>  也可以得到相应的效果，因为指针都是 8 字节，里面进行了一次 (隐式) 强制类型转换。由于指针指向的类型比较简单，没有导致数据异常，所以 GUN 仅仅是抛出了 warming.</p>\n</li>\n</ul>\n<h3 id=\"指针与数组\"><a class=\"anchor\" href=\"#指针与数组\">#</a> 指针与数组</h3>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a><br />\n这里 大概会涉及到几个内容:</p>\n<ul>\n<li>指针 与 数组首地址</li>\n<li>指针数组 和 指向数组的指针</li>\n</ul>\n<p>先声明一下:</p>\n<ul>\n<li>指针：是用于存储 地址的变量</li>\n<li>数组：是一串相同类型变量的</li>\n<li>地址：是一种数据，与指针不同的地方在于，没有数据类型 (某种意义上像是指针常量)</li>\n</ul>\n<p>先来说一下第一个：指针 与 数组首地址</p>\n<blockquote>\n<p>在我初学指针的时候一直有一个疑惑就是  <code>int arr[4];</code>  和  <code>int *ptr;</code>  的区别，因为老师经常说，数组的首地址等价于指针，而且 访问数组的时候使用  <code>arr[1]</code>  和  <code>*(arr+1)</code>  的效果是一样的，我一度就把 一级指针 等价为 一维数组.<br />\n 直到有一次，有个小姐姐问我，为什么  <code>sizeof(ptr)</code>  算不出数组大小 而  <code>sizeof(arr)</code>  可以。我当时的回答是，因为  <code>arr</code>  是 一个数组  <code>ptr</code>  是一个指针变量。说完我就察觉到不对了，如果  <code>arr</code>  完全等价于  <code>ptr</code>  那么为什么  <code>sizeof(ptr)</code>  不等于  <code>sizeof(arr)</code> ,  <code>arr = ptr</code>  会报错。果然啊，教学相长 (<s>有点丢脸，错失良机啊</s>)<br />\n 其实 <mark>数组的首地址、变量的取地址 这些得到的都是指针常量</mark> (上面说过，<a href=\"#const%E6%8C%87%E9%92%88\"> 传送门</a>), 只能充当右值，不能作为左值.<br />\n <code>ptr</code>  仅仅是一个指针变量，用于存储地址的变量。对于二维数组，也是如此， <code>int arr[2][3] = &#123;0&#125;;</code>  ,  <code>arr</code>  整个二维数组的首地址， <code>arr[i]</code>  为 每一行一维数组的首地址.<br />\n<strong> 示例</strong>:</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d \\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着咱们 来讨论一下：指针数组和指向数组的指针</p>\n<blockquote>\n<p>这个问题 经常出现在，声明指向二维数组指针上，经常会有 问题是  <code>int *arr[5]</code>  和  <code>int(*arr)[5]</code>  哪个是指向数组的指针之流.<br />\n 在说这个问题之前，先来说明一下两个概念:</p>\n</blockquote>\n<ul>\n<li>行指针：指的是一整行，不指向具体元素<br />\n声明格式:  <code>数据类型 (*指针名)[长度];</code></li>\n<li>列指针：指的是一行中某个具体元素 (一维指针)<br />\n 声明格式:  <code>数据类型 *指针名称</code> ；<br />\n<strong> 示例</strong></li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 声明列指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 声明行指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d, ptr2_val = %d\\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>PS: 可以将列指针理解为行指针的具体元素，行指针理解为列指针的地址</strong></p>\n<p>言归正传，假设 我们需要声明一个指向  <code>int arr[5][9];</code>  和 一个大小为 4 指向整型指针的数组.</p>\n<p>先来解决第一个:</p>\n<blockquote>\n<p>假设 指针名为 ptr</p>\n<ol>\n<li><code>ptr</code>  先是一个指针，所以第一步是 <code>*ptr</code> ,</li>\n<li><code>*ptr</code>  指向的是数组，由于  <code>[]</code>  运算优先级比  <code>*</code>  高，所以 需要加上  <code>()</code> , 即  <code>(*arr)[9]</code></li>\n<li><code>(*arr)[9]</code>  指向的类型为  <code>int</code> , 得出最终结果 <strong> <code>int (*arr)[9] = &amp;arr;</code> </strong></li>\n</ol>\n</blockquote>\n<p>然后是指针数组</p>\n<blockquote>\n<p>设 ptrs 为数组名:</p>\n<ol>\n<li><code>ptrs</code>  先是一个数组，得到  <code>ptrs[4]</code></li>\n<li><code>ptrs[4]</code>  的成员是指针，得到  <code>*ptrs[4]</code></li>\n<li><code>*ptrs[4]</code>  成员指向的数据类型为  <code>int</code> , 得到  <code>int ptrs[4];</code></li>\n</ol>\n</blockquote>\n<p><strong>小结：指向数组的指针格式一般以  <code>(*指针名)</code>  打头，而指针数组一般以  <code>*数组名</code>  打头</strong></p>\n<p>正如上面所说，一般情况下指向数组的指针格式以  <code>(*指针名)</code>  打头，咱们这行只要是一般，就必然有例外.<br />\n 由于 <strong>数组是在一块连续的内存上定义的</strong> 所以 只要找到 第一个元素所在的地址，即数组起始地址，就等级于找到整个数组.<br />\n 所以就有了  <code>p = &amp;arr[0]</code> 、 <code>p = &amp;arr[0][0]</code> 、 <code>*p = &amp;arr[0][0][0];</code>  的奇观.<br />\n 这也就是上面所说的 列指针。突然就感觉 上面的行指针不香了 (滑稽)</p>\n<p><strong>示例</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d, ptr2_val = %d\\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================================================\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ptr1_val = %d, ptr2_val = %d\\n\"</span><span class=\"token punctuation\">,</span> ptr1<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ptr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"话外-为什么不能用二级指针直接指向二维数组\"><a class=\"anchor\" href=\"#话外-为什么不能用二级指针直接指向二维数组\">#</a> 话外：为什么不能用二级指针直接指向二维数组</h4>\n<p><a href=\"#%E7%9B%AE%E5%BD%95\">🔼</a></p>\n<p>举个例子:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译出错，不能用二级指针直接指向二维数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptrRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对，ptrRow 是指向一维数组的指针，可以指向二维数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptrCol <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以，ptrCol 也是一维指针，可以指向二维数组</span></pre></td></tr></table></figure><p>理论上一维数组对应一维指针，例如 <code>int arr[3]; int *ptr = arr</code> ;<br />\n 那么二维数组应该也对应于二级指针才对啊.<br />\n 对于这个问题，咱们先来看一下二级指针的定义:<br />\n<strong> 二级指针指向一级指针，一级指针是取一次地址，二级指针是取两次地址</strong>.<br />\n 就此可以推及到 更高的维度: <strong>n 级指针是指向 n-1 级指针的指针，n 级指针是取 n 次地址</strong></p>\n<p>现在我们来分析一下<br />\n <code>int **pptr = arr;</code>  为什么会出错<br />\n首先  <code>**pptr = arr</code>  是等价于  <code>**pptr = &amp;arr[0][0];</code> <br />\n 那么  <code>*ptr</code>  得到的结果为  <code>1</code> , 如果 再对其进行  <code>*</code>  操作，就会访问到 内存地址 1 上的值，显然这是不允许的<br />\n<strong> PS:</strong> 二级指针是指向一级指针的，那么二级指针  <code>pptr</code>  每次移动的大小就是  <code>sizeof(int *)</code>  也就是 8 个字节，所以  <code>pptr+1</code>  不是像二维数组  <code>arr+1</code>  那样移动到下一行首地址，而是移动 8 个字节.</p>\n<p><code>int **pp=a;</code>  不行。那  <code>int **pp=&amp;a;</code>  呢？<br />\n 很遗憾也不行，原因也是数据类型不一致，导致地址偏移非法.</p>\n<p><strong>凡事总有那么个例外:</strong><br />\n 例如:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strptrs <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本质原因是因为这是一个指针数组，而非 真正的二维数组，每一行的首地址 本身即为指针，符合了两次取地址的要求。而且指针偏移量也为 8 字节， <code>strptrs++</code>  偏移正常，所以  <code>strptrs</code>  才能指向  <code>str</code></p>\n<p>其实这个问题的核心在于 <strong>数据类型的不匹配</strong> 导致的地址自加异常.<br />\n<strong> 示例</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pptr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G++\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strptrs <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> strptrs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//printf (\"% d\\n\", pptr [0][1]);// 异常，不会打印数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上都是，个人浅薄的见解，如有不当，欢迎各位大佬们指出</p>\n",
            "tags": [
                "学习笔记",
                "指针,C,学习笔记"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/P20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/",
            "url": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/P20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/",
            "title": "P20有效的括号",
            "date_published": "2021-02-24T08:17:55.000Z",
            "content_html": "<h1 id=\"有效的括号\"><a class=\"anchor\" href=\"#有效的括号\">#</a> 有效的括号</h1>\n<h3 id=\"11-题目\"><a class=\"anchor\" href=\"#11-题目\">#</a> 1.1 题目</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1m1qly5ij30iu0yaq47.jpg\" alt=\"alt\" /></p>\n<h2 id=\"12-思路\"><a class=\"anchor\" href=\"#12-思路\">#</a> 1.2 思路</h2>\n<blockquote>\n<p>一道很简单的算法题，典型的栈解，不过  <code>c</code>  没有栈，只能用数组模拟一个栈，解题思路核心就是 消消乐 (好吧，我不玩) 每次读入 左括号时存入 对应的右括号，遇到右括号时，进行消除，如果不匹配，返回 false, 或者栈顶为空，返回 false.</p>\n</blockquote>\n<h2 id=\"13-图解思路\"><a class=\"anchor\" href=\"#13-图解思路\">#</a> 1.3 图解思路</h2>\n<h4 id=\"由于个人画图能力有限列下图片来源于-leetcode-官方\"><a class=\"anchor\" href=\"#由于个人画图能力有限列下图片来源于-leetcode-官方\">#</a> 由于个人画图能力有限，列下图片来源于 LeetCode 官方</h4>\n<blockquote>\n<p><img data-src=\"https://pic.leetcode-cn.com/baa8829ac398e665eb645dca29eadd631e2b337e05022aa5a678e091471a4913-20.gif\" alt=\"alt\" /></p>\n</blockquote>\n<h2 id=\"14-代码\"><a class=\"anchor\" href=\"#14-代码\">#</a> 1.4 代码</h2>\n<blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'('</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'['</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">']'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            stack<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> stack<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            index<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Algorithm",
                "LeetCode",
                "C,Algorithm,LeetCode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/P14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/",
            "url": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/P14%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/",
            "title": "P14最长公共前缀",
            "date_published": "2021-02-24T08:17:40.000Z",
            "content_html": "<h1 id=\"最长公共前缀\"><a class=\"anchor\" href=\"#最长公共前缀\">#</a> 最长公共前缀</h1>\n<h5 id=\"这次没有流程图\"><a class=\"anchor\" href=\"#这次没有流程图\">#</a> 这次没有流程图</h5>\n<h3 id=\"11-题目\"><a class=\"anchor\" href=\"#11-题目\">#</a> 1.1 题目</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1lvtpgbgj30ia0jsq3u.jpg\" alt=\"alt\" /></p>\n<h3 id=\"12-思路\"><a class=\"anchor\" href=\"#12-思路\">#</a> 1.2 思路：</h3>\n<blockquote>\n<p>老实说，这道题目一开始我只想到了暴力的解题方法，纵向扫描法，简单来说就是一列一列的扫描字母，只要有不同就直接在当前位置放入 <code>'\\0'</code>  返回  <code>strs[0]</code> . 很显然这是一个 O (m*n) 级复杂度的算法</p>\n</blockquote>\n<blockquote>\n<p>一般来说这种复杂度可以 优化 为 nlogn 很容易就会想到第二种解法 —— 分治，简单来说，就是 将 strsSize 分到最小化，即两两比较后返回最大子序列，将子序列，再进行 比较 得出子序列的最长子序列，最终得出的字符串即为返回值</p>\n</blockquote>\n<h3 id=\"13-图解思路\"><a class=\"anchor\" href=\"#13-图解思路\">#</a> 1.3 图解思路</h3>\n<h4 id=\"由于个人画图能力有限列下图片来源于-leetcode-官方\"><a class=\"anchor\" href=\"#由于个人画图能力有限列下图片来源于-leetcode-官方\">#</a> 由于个人画图能力有限，列下图片来源于 LeetCode 官方</h4>\n<blockquote>\n<h4 id=\"21-纵向扫描\"><a class=\"anchor\" href=\"#21-纵向扫描\">#</a> 2.1 纵向扫描</h4>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1lyq8aubj30kd0coabm.jpg\" alt=\"alt\" /></p>\n<h4 id=\"22-分治\"><a class=\"anchor\" href=\"#22-分治\">#</a> 2.2 分治</h4>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1lyugj8sj30gs0bzmyb.jpg\" alt=\"alt\" /></p>\n</blockquote>\n<h3 id=\"14-代码\"><a class=\"anchor\" href=\"#14-代码\">#</a> 1.4 代码</h3>\n<blockquote>\n<h4 id=\"141-纵向扫描\"><a class=\"anchor\" href=\"#141-纵向扫描\">#</a> 1.4.1 纵向扫描</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> strsSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 纵向扫描</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> strsSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> strsSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">return</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"142-分治\"><a class=\"anchor\" href=\"#142-分治\">#</a> 1.4.2 分治</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>lStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token string\">'\\0'</span> <span class=\"token operator\">!=</span> lStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> rStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            lStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> lStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> lStr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">getLongestCommonPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">==</span> start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> strs<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 二分防溢出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 递归分治</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>lcpL <span class=\"token operator\">=</span> <span class=\"token function\">getLongestCommonPrefix</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>lcpR <span class=\"token operator\">=</span> <span class=\"token function\">getLongestCommonPrefix</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 获取最终子序列</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span>lcpL<span class=\"token punctuation\">,</span> lcpR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>strs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> strsSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> strsSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">getLongestCommonPrefix</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> strsSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Algorithm",
                "LeetCode",
                "C,Algorithm,LeetCode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P13%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/P13%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/",
            "url": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P13%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/P13%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/",
            "title": "P13罗马数字转整数",
            "date_published": "2021-02-24T08:17:24.000Z",
            "content_html": "<h1 id=\"罗马数字转整数\"><a class=\"anchor\" href=\"#罗马数字转整数\">#</a> 罗马数字转整数</h1>\n<h3 id=\"11-题目\"><a class=\"anchor\" href=\"#11-题目\">#</a> 1.1 题目</h3>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1mxwu3iij30hw1bw76r.jpg\" alt=\"alt\" /></p>\n<h3 id=\"12-解题思路\"><a class=\"anchor\" href=\"#12-解题思路\">#</a> 1.2 解题思路</h3>\n<blockquote>\n<p>这道题 拿到手里面 思路很清晰</p>\n<ul>\n<li>首先枚举所有的组合可能性并添加到哈希表中，</li>\n<li>然后对字符串进行遍历，由于组合只有两种，一种是 1 个字符，一种是 2 个字符，其中 2 个字符优先于 1 个字符</li>\n<li>先判断两个字符的组合在哈希表中是否存在，存在则将值取出加到结果 ans 中，并向后移 2 个字符。不存在则将判断当前 1 个字符是否存在，存在则将值取出加到结果 ans 中，并向后移 1 个字符</li>\n<li>遍历结束返回结果 ans</li>\n</ul>\n</blockquote>\n<h3 id=\"很遗憾的是-c-中没有-hashmap-咱还是老老实实的用-switch-case-吧\"><a class=\"anchor\" href=\"#很遗憾的是-c-中没有-hashmap-咱还是老老实实的用-switch-case-吧\">#</a> 很遗憾的是 C 中没有 Hashmap, 咱还是老老实实的用 switch case 吧.</h3>\n<blockquote>\n<p>其实这道题的逻辑很清晰，就是简单的逻辑累加，遇到特殊情况就 减掉相应 值，过一遍题目，很清晰的 可知  <code>I X C</code>  三个字母可以 放在 特定字母的左边，而且放左边的时候都有个特性 都比特定字母 小自己的本身的值，例如  <code>IV</code>  比  <code>V</code>  小  <code>I</code>  ,  <code>XC</code>  比  <code>C</code>  小  <code>X</code> , 很容易就可以得出逻辑 每次检测  <code>I X C</code>  三个字母时，看一看后面是否有 特殊字符，存在则减去 本身，不存在则 加上本身，循环到字符结束，即为答案</p>\n<h4 id=\"简单逻辑如下\"><a class=\"anchor\" href=\"#简单逻辑如下\">#</a> 简单逻辑如下</h4>\n<blockquote>\n<ul>\n<li>判断  <code>s[i]</code>  是否为 特殊字符，\n<ul>\n<li>不是，累加</li>\n<li>是，判断  <code>s[i+1]</code>  是否 存在 受体罗马数字，\n<ul>\n<li>是    减去本身</li>\n<li>不是  正常累加</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>直到循环结束，sum 即为 返回 结果</li>\n</ul>\n</blockquote>\n<p>2020.12.4<br />\n 我还是尝试出了一种 Hash 解法，大致讲一下思路</p>\n<pre><code>  罗马数字都是 字符 在 C 语言里 字符以 ASCII 的形式连续存储, 这意味我们只需要开一个大小为 26 的 数组就等价于 26个 英文字母,以英文字母的顺序 为 键名 罗马数字 所代表的数值 为 键值, 这样就构成了一个 具有常数即访问速率的 HashMap 了\n余下的就是 循环 累加 部分了,这里需要注意 每次累加的时候需要断一下 上一个字母的键值是不是小于当前字母的键值,小于就要在res 上减去 2 倍的 上一个字母的键值. res 即为最返回值\n</code></pre>\n</blockquote>\n<h3 id=\"13-流程图\"><a class=\"anchor\" href=\"#13-流程图\">#</a> 1.3 流程图</h3>\n<blockquote>\n<p>解法 1<br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gs1mxzd0i9j30lk0t5jsi.jpg\" alt=\"alte\" /><br />\n2020.12.4<br />\n 解法 2<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1my1ch2jj30im0jdmxi.jpg\" alt=\"alte\" /></p>\n</blockquote>\n<h3 id=\"14-代码\"><a class=\"anchor\" href=\"#14-代码\">#</a> 1.4 代码</h3>\n<blockquote>\n<p>解法 一</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">romanToInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'M'</span><span class=\"token operator\">:</span> sum <span class=\"token operator\">+=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'D'</span><span class=\"token operator\">:</span> sum <span class=\"token operator\">+=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>   <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'L'</span><span class=\"token operator\">:</span> sum <span class=\"token operator\">+=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'V'</span><span class=\"token operator\">:</span> sum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>     <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'C'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'M'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'X'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'C'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">case</span> <span class=\"token string\">'I'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token string\">'V'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'X'</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解法二</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">romanToInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> romanHash<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'V'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'X'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'L'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'D'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    romanHash<span class=\"token punctuation\">[</span><span class=\"token string\">'M'</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> preNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preNum <span class=\"token operator\">&lt;</span> romanHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            res <span class=\"token operator\">-=</span> preNum <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        preNum <span class=\"token operator\">=</span> romanHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        res <span class=\"token operator\">+=</span> preNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Algorithm",
                "LeetCode",
                "C,Algorithm,LeetCode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P9%E5%9B%9E%E6%96%87%E6%95%B0/P9%E5%9B%9E%E6%96%87%E6%95%B0/",
            "url": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P9%E5%9B%9E%E6%96%87%E6%95%B0/P9%E5%9B%9E%E6%96%87%E6%95%B0/",
            "title": "P9回文数",
            "date_published": "2021-02-24T08:17:04.000Z",
            "content_html": "<h1 id=\"回文数\"><a class=\"anchor\" href=\"#回文数\">#</a> 回文数</h1>\n<h3 id=\"11-题目\"><a class=\"anchor\" href=\"#11-题目\">#</a> 1.1 题目</h3>\n<p><img data-src=\"Question.png\" alt=\"alt\" /></p>\n<h3 id=\"12-解题思路\"><a class=\"anchor\" href=\"#12-解题思路\">#</a> 1.2 解题思路</h3>\n<blockquote>\n<p>这道题有两种解法：字符串 和 反向构造，先来说说简单的字符串处理方法</p>\n<blockquote>\n<p>字符串:<br />\n 这种方法很简单，利用  <code>sprintf</code>  来将 x 写入到 buf 中 对折检测 就可即可，由于  <code>sprintf</code>  的时间复杂度未知，不清楚总体时间复杂度</p>\n</blockquote>\n<blockquote>\n<p>反向构造:<br />\n 回文数的最大特点是，反转后等于其本身，很显然 在 int 范围内 只要符合回文数性质的数 肯定会有两个约束: 1. 不是负数 2. 逆序后不不会溢出。这里得出了两个 if 语句。接下来通过回文数的通性来得出判断方法<br />\n现有两个数  <code>num1 = 123456</code> ,  <code>num2 = 123321</code> <br />\n <code>num1</code>  不是回文数， <code>num2</code>  是回文数。人是如何判断是不是回文数的呢？大部分人都是 将这个数字一分为二来判断的，这种方法就是第一种方法字符串法。计算机肯定肯定没有这么智能，对他来说 最简单的方法就是 把整个数反转过来，不依赖字符串，需要取出各个位上的数，那种只能循环对 10 取余，那就又是 P7 的那两句核心算法，这里也需要判断溢出，然后在循环结束时判定一下，反转值是否等价于初始值即可</p>\n</blockquote>\n</blockquote>\n<h3 id=\"13-流程图\"><a class=\"anchor\" href=\"#13-流程图\">#</a> 1.3 流程图</h3>\n<blockquote>\n<h4 id=\"解法1\"><a class=\"anchor\" href=\"#解法1\">#</a> 解法 1</h4>\n</blockquote>\n<blockquote>\n<blockquote>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1m3t90x4j30fb0megm6.jpg\" alt=\"alt\" /></p>\n</blockquote>\n</blockquote>\n<blockquote>\n<h4 id=\"解法2\"><a class=\"anchor\" href=\"#解法2\">#</a> 解法 2</h4>\n</blockquote>\n<blockquote>\n<blockquote>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gs1m41gvv1j30hn0jh74t.jpg\" alt=\"alt\" /></p>\n</blockquote>\n</blockquote>\n<h3 id=\"14代码\"><a class=\"anchor\" href=\"#14代码\">#</a> 1.4 代码</h3>\n<blockquote>\n<h4 id=\"解法1-2\"><a class=\"anchor\" href=\"#解法1-2\">#</a> 解法 1</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 时间复杂度未知</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 将 数字转换为字符 双向查找</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 时间复杂度 对折 O (n/2)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> buf<span class=\"token punctuation\">[</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<h4 id=\"解法2-2\"><a class=\"anchor\" href=\"#解法2-2\">#</a> 解法 2</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bool <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> org_num <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> res_num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>org_num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res_num <span class=\"token operator\">></span> INT_MAX <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        res_num <span class=\"token operator\">=</span> res_num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>org_num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        org_num <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res_num <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Algorithm",
                "LeetCode",
                "C,Algorithm,LeetCode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/P7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/",
            "url": "https://to-ywz.github.io/2021/02/24/CS/Algorithm/Leetcode/P7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/P7%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/",
            "title": "P7整数反转",
            "date_published": "2021-02-24T08:16:39.000Z",
            "content_html": "<h1 id=\"整数反转\"><a class=\"anchor\" href=\"#整数反转\">#</a> 整数反转</h1>\n<h5 id=\"note-对于负数运算\"><a class=\"anchor\" href=\"#note-对于负数运算\">#</a> Note: 对于负数运算</h5>\n<blockquote>\n<p>除了 - m 导致溢出的特殊情况外，其他时候:</p>\n<ul>\n<li><code>(-m)/n</code>  和  <code>m/(-n)</code>  ==  <code>-(m/n)</code> ，</li>\n<li><code>m%(-n)</code>  ==   <code>m%n</code> ，</li>\n<li><code>(-m)%n</code>  ==  <code>-(m%n)</code></li>\n</ul>\n</blockquote>\n<h3 id=\"11-题目\"><a class=\"anchor\" href=\"#11-题目\">#</a> 1.1 题目</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1mwtbflij30im0myq3z.jpg\" alt=\"alt\" /></p>\n<h3 id=\"12-解题思路\"><a class=\"anchor\" href=\"#12-解题思路\">#</a> 1.2 解题思路</h3>\n<blockquote>\n<ul>\n<li>读完题目，第一反应是用 sprintf 整型转成字符串，一看见给定的函数原型的返回值  就弃了，既然不能转成字符串，那就干脆学习回文数的方法，逆向构造。每次循环取余得到数的最后一位，累加器在累加之前 先乘 10, 直到 0 == x, 这道题第一步就完成了</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>接着是边界判定，可以直接用 long 或者 long long, 这样子就会很没意思，而且在 32 位机上，int、long、long long 在 都为 32 位，仍然会溢出。我们需要思考出一个通用的解法.</li>\n<li>C 语言的最值，存放在 limits 这个头文件中，INT_MAX (2,147,483,647) 和 INT_MIN (-2,147,483,648) 分别表示 INT 的两个边界.</li>\n</ul>\n<blockquote>\n<ul>\n<li>在数学表达式中，写成 (res&gt; INT_MAX || res &lt; INT_MIN), 肯定是时没问题的，但是</li>\n<li>对于计算机来时，大于就是溢出 int 型变量的取值属于 [INT_MIN, INT_MAX], 无论如何溢出 (上溢 overflow，下溢 underflow}, 其取值永远落在区间 [INT_MIN, INT_MAX], 表达式 (y &gt; INT_MAX || y &lt; INT_MIN) 永远为 false. 需要提前一步判断，否则等到溢出发生时，是没有<br />\n办法通过 (y&gt; INT_MAX || y &lt; INT_MIN) 来判断是否溢出的.</li>\n</ul>\n</blockquote>\n<ul>\n<li>边界其实我们只需要判断 INT_MAX/10 的值是否大于 res 和 INT_MIN/10 的值是否小于 res, 因为当 res 的值大于这个条件，再进入循环则必然溢出</li>\n</ul>\n<blockquote>\n<p>例如:<br />\n1163847418, 逆序之后是 8147483611, 当 res = 814748361 如果再进循环必然上溢，所以通过在 执行 累加前进行溢出判断来检测溢出</p>\n</blockquote>\n</blockquote>\n<h4 id=\"关于反向构造\"><a class=\"anchor\" href=\"#关于反向构造\">#</a> 关于反向构造 :</h4>\n<blockquote>\n<p><code>res = res * 10 + x % 10</code>  这个等式是怎么来的呢？<br />\n 思考一下啊 我们如何取出 每一位上的数 最简单的的方法就是对 10 取余<br />\n取余每次取出的数都是低位 例如 451 取余 10 得到的先是 1, 然后才是 5, 最后才是 4, 那么 451 怎么变成 154 呢？<br />\n 显然 1* 100 + 5 * 10 + 4 将这个式子变形一下:</p>\n<pre><code>               (1 * 10 + 5) * 10 + 4  \n</code></pre>\n<p>rm1 = 1, rm2 = 5, rm3 = 4 分别是 三次 取余的出来的数<br />\n式子变为</p>\n<pre><code>              (rm1 * 10 + rm2) * 10 + rm3 \n</code></pre>\n<p>抽象一下，分成 3 步</p>\n<pre><code> 设 res 为 最终结果, rm1, rm2, rm3为三次的余数\n则有:\n  第一次:\n      res = res + rm1;\n  第二次:\n      res = res * 10 + rm2;\n  第三次\n      res = res * 10 + rm3;\n</code></pre>\n<p>很容易的发现除了第一次之外 递推通式为  <code>res = res * 10 + rmx</code>  所以我们，一开始令 res 为 0 ,0 * 10 = 0, 不影整个式子计算<br />\n所以 得到了代码中的  <code> res = res * 10 + (x%10);</code></p>\n<blockquote>\n<p>举个例子: a = 123</p>\n<pre><code>第一次:\n  初值 res = 0, x = 123\n      res = 0 * 10 + (123%10) = 3\n      x = 123 / 10 = 12\n第二次\n  初值 res = 3, x = 12\n      res = 3 * 10 + (12%10) = 32\n      x = 12 / 10 = 1\n第三次\n  初值 res = 32, x = 1\n      res = 32 * 10 + (1%10) = 321\n      x = 1 / 10 = 0\n最终结果:\n     res = 321       x = 0\n</code></pre>\n</blockquote>\n</blockquote>\n<h3 id=\"13-流程图\"><a class=\"anchor\" href=\"#13-流程图\">#</a> 1.3 流程图</h3>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1mwvp4xej30fi0f3dg8.jpg\" alt=\"alt 属性文本\" /><br />\n &lt;!-- ```flow<br />\nst=&gt;start: 开始<br />\n cond1=&gt;condition: res &gt; MAX<br />\ncond2=&gt;condition: x == 0<br />\nop1=&gt;operation: res = 0<br />\nop3=&gt;operation: res = res / 10<br />\nop2=&gt;operation: res = res * 10 + res % 10<br />\ne=&gt;end: 返回 res</p>\n<p>st-&gt;cond2<br />\ncond2(yes)-&gt;e<br />\ncond2(no)-&gt;cond1<br />\ncond1(no)-&gt;op2(right)-&gt;op3(right)-&gt;cond2<br />\ncond1(yes)-&gt;op1(left)-&gt;e</p>\n<pre><code class=\"language---&gt;\">### 1.4 代码\n&gt; ```c\n&gt; int reverse(int x)\n&gt; &#123;\n&gt;     if (x &lt; 10 &amp;&amp; x &gt; -10)\n&gt;     &#123;\n&gt;         return x;\n&gt;     &#125;\n&gt;     /**\n&gt;      * 反向构造 每次取余 出来的数 加上 res*10 ,计算前先判断\n&gt;      */\n&gt;     int res = 0;\n&gt;     while (x)\n&gt;     &#123;\n&gt;         if (res &gt; INT_MAX / 10 || res &lt; INT_MIN / 10)\n&gt;         &#123; // 边界判断 当 res\n&gt;             return 0;\n&gt;         &#125;\n&gt;         res = res * 10 + x % 10;\n&gt;         x /= 10;\n&gt;     &#125;\n&gt;     return res;\n&gt; &#125;\n&gt; ```\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "LeetCode",
                "C,Algorithm,LeetCode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/23/CS/Algorithm/Leetcode/P1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/P1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "url": "https://to-ywz.github.io/2021/02/23/CS/Algorithm/Leetcode/P1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/P1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "title": "P1两数之和",
            "date_published": "2021-02-23T10:38:45.000Z",
            "content_html": "<h1 id=\"两数之和\"><a class=\"anchor\" href=\"#两数之和\">#</a> 两数之和</h1>\n<blockquote>\n<p>说明: 2.c 文件的解法会超时，之前是不会的，暴力 AC 就是不靠谱</p>\n</blockquote>\n<h2 id=\"11-题目\"><a class=\"anchor\" href=\"#11-题目\">#</a> 1.1 题目</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1mw5ga6wj30if0hamxz.jpg\" alt=\"alt\" /></p>\n<h2 id=\"12解题思路\"><a class=\"anchor\" href=\"#12解题思路\">#</a> 1.2 解题思路</h2>\n<blockquote>\n<p>我拿到这道题的第一个想法就是 快速排序，但是转念一想，这玩意要返回的是索引。唉，真就，绝了……<br />\n 当时脑子一抽就和快排干上了，既然不能改变索引值，那么干脆存下来。所以就有了结构体</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyStruct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存放 大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存放 索引</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NumArray<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就简单了写个  <code>cmp</code>  函数， <code>qsort</code>  一下，然后 用  <code>bsearch</code>  搜索  <code>target-num[i]</code>  的值 就可以得出答案，时间复杂度为 O (2nlogn+n)<br />\n 当然这道题肯定存在 O (n) 的解法，无非就是模拟 哈希表 来实现快速查找，牺牲空间换时间，由于手写 Hash 过于麻烦，也不喜欢用非标准库的用户 Hash 库  <code>UT_hash_handle</code>  所以就直接在 c++ 题解中使用了</p>\n</blockquote>\n<h2 id=\"13流程图\"><a class=\"anchor\" href=\"#13流程图\">#</a> 1.3 流程图</h2>\n<blockquote>\n<p><img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gs1mw1k53kj30fa0lcq3m.jpg\" alt=\"alte flow1\" /></p>\n</blockquote>\n<h2 id=\"14代码\"><a class=\"anchor\" href=\"#14代码\">#</a> 1.4 代码</h2>\n<blockquote></blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyStruct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NumArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>NumArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>value <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>NumArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>returnSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>resArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span>returnSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 复制数组，存储下数组的值和其序号</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    NumArray <span class=\"token operator\">*</span>numArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>NumArray <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>NumArray<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> numsSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        numArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        numArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 根据值大小 快速排序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>numArray<span class=\"token punctuation\">,</span> numsSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>numArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        NumArray key <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span> numArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 也是 循环 但采用二分查找 时间复杂度 (logn);</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        NumArray <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numArray<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> numsSize <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>numArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            resArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            resArray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token operator\">-></span>index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token operator\">*</span>returnSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> resArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Algorithm",
                "LeetCode",
                "C,Algorithm,LeetCode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/2021/02/23/CS/Book/DeepLeaningOS/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_3/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_3/",
            "url": "https://to-ywz.github.io/2021/02/23/CS/Book/DeepLeaningOS/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_3/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F_3/",
            "title": "深入理解计算机系统_3",
            "date_published": "2021-02-23T10:38:45.000Z",
            "content_html": "<h1 id=\"3-程序的机器表示\"><a class=\"anchor\" href=\"#3-程序的机器表示\">#</a> 3 程序的机器表示</h1>\n<h2 id=\"intel系列芯片发展历史\"><a class=\"anchor\" href=\"#intel系列芯片发展历史\">#</a> Intel 系列芯片发展历史</h2>\n<p>-- 该部分可略过</p>\n<ul>\n<li><strong>8086</strong> (1978)<br />\n 它是第一代 16 位 微处理器之一.<br />\n8088 是 8086 的变种增加了一个 <strong>8 位的外部总线</strong> 可寻址地址空间仅有 20 位<br />\n 8087 是 Intel 设计出的浮点协处理器，与 8086 或 8088 一同工作用于执行浮点指令，通常被称为  <code>x87</code></li>\n<li><strong>80286</strong> (1982)<br />\n 增加了更多的寻址模式 (已废弃), 构成了 IBM PC-AT 个人计算机的基础，是 MS Windows 最初使用的平台</li>\n<li><strong>i386</strong> (1985)<br />\n 将结构体系拓展到了 32 位。增加了平坦寻址模式， <code>Linux</code>  和 最近的  <code>Windows</code>  操作系统都采用了这种模式。这是 <code>Intel</code>  系列中第一台支持  <code>Unix</code>  操作系统的机器</li>\n<li><strong>i486</strong> (1989)<br />\n 改善了性能，同时将浮点单元集成到了处理器芯片，指令集上没有任何改变</li>\n<li><strong>Pentium</strong> (1993)<br />\n 改善了性能，不过只对指令集进行了小的扩展</li>\n<li><strong>Pentium Pro</strong> (1995)<br />\n 引入全新的全新的处理器设计，在内部被称为 P6 微体系结构.<br />\n 指令集中增加了一类 &quot;条件传送 (conditional move)&quot; 指令</li>\n<li><strong>Pentium/MMX</strong> (1997)<br />\n 在  <code>Pentium</code>  处理器中增加了一类新的处理整数向量的指令。每个数据大小可以是 1,2 或 4 个字节。每个向量总长 64 字节</li>\n<li><strong>Pentium II</strong> (1997)<br />\n P6 微体系结构的延伸</li>\n<li><strong>Pentium III</strong> (1999)<br />\n 引入 SSE, 是一类处理整数或浮点数向量的指令.<br />\n 每个数据可以是 1, 2 或 4 字节，打包成 128 位的向量.<br />\n 芯片上集成了二级高级缓存</li>\n<li><strong>Pentium 4</strong> (2000)<br />\n SSE 扩展到了 SSE2, 增加了新的数据类型 (包括双精度浮点), 以及针对这种格式的数据的 114 条指令，编译器可以使用这些指令来编译浮点代码 (可替代 x87)</li>\n<li><strong>Pentium 4E</strong> (2004)<br />\n 增加了超线程 (hyperthreading), 使得一个处理器上可以同时运行两个程序<br />\n增加了 EM64T, 它是 <code>Intel</code>  对 <code>AMD</code>  提出的  <code>IA32</code>  的 64 位扩展的实现，被称为  <code>x86-64</code></li>\n<li><strong>Core 2</strong> (2006)<br />\n 回归到了 P6 的微体系结构.  <code>Intel</code>  的第一个多核微处理器，不支持超线程</li>\n<li><strong>Core i7 Nehalem</strong> (2008)<br />\n 支持超线程，也有多核，最初的版本支持每个核上可以执行两个程序</li>\n<li><strong>Core i7 Sandy Bridge</strong><br />\n 引入了  <code>AVX</code> , 这是对 <code>SSE</code>  的拓展，支持把数据封装 256 位的向量</li>\n<li><strong>Core i7 Haswell</strong><br />\n 将 AVX 扩展至  <code>AVX2</code> , 增加了更多的指令和格式</li>\n</ul>\n<h2 id=\"程序编码\"><a class=\"anchor\" href=\"#程序编码\">#</a> 程序编码</h2>\n<p>C 语言到可执行文件需要经历四步:</p>\n<pre><code>1.  预处理\n    代码拓展,将所有 宏和头文件 加入源代码\n2.  编译\n    生成 .c 文件的 .s 文件\n3.  汇编\n    将 .s 文件生成 .o(二进制目标代码文件) 文件\n4.  链接\n    将 .o 文件按一定格式连接在一起 生成一个 CPU 可执行的文件\n</code></pre>\n<h3 id=\"机器代码\"><a class=\"anchor\" href=\"#机器代码\">#</a> 机器代码</h3>\n<blockquote>\n<ul>\n<li>ISA: 指令集架构<br />\n它定义了 处理器状态，指令集格式 及每条指令执行完毕之后对状<br />\n态的影响</li>\n<li>虚拟地址：机器程序使用的地址</li>\n</ul>\n</blockquote>\n<h3 id=\"代码示例\"><a class=\"anchor\" href=\"#代码示例\">#</a> 代码示例</h3>\n<blockquote>\n<p>相关代码文件都在 3_2 文件夹中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>dest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span> t <span class=\"token operator\">=</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>dest <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行命令  <code>gcc -Og -S mstore.c</code>  可以 得到 mstore.s<br />\n 执行命令  <code>gcc -Og -c mstore.s</code>  可以 得到 mstore.o<br />\n 执行命令  <code>objdump -d mstore.o</code>  可以 得到 mstore.o 的反汇编<br />\n (在 3_2 内 makefile 文件内有相关指令)</p>\n</blockquote>\n<h2 id=\"数据格式\"><a class=\"anchor\" href=\"#数据格式\">#</a> 数据格式</h2>\n<table>\n<thead>\n<tr>\n<th>C 声明</th>\n<th>Intel 数据类型</th>\n<th>汇编代码后缀</th>\n<th>大小 (字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>字节</td>\n<td>b</td>\n<td>1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>节</td>\n<td>w</td>\n<td>2</td>\n</tr>\n<tr>\n<td>int</td>\n<td>双字</td>\n<td>l</td>\n<td>4</td>\n</tr>\n<tr>\n<td>long</td>\n<td>四字</td>\n<td>q</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char*</td>\n<td>四字</td>\n<td>q</td>\n<td>8</td>\n</tr>\n<tr>\n<td>float</td>\n<td>单精度</td>\n<td>s</td>\n<td>4</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双精度</td>\n<td>l</td>\n<td>8</td>\n</tr>\n</tbody>\n</table>\n<p>汇编使用后缀  <code>l</code>  来表示  <code>int</code>  和  <code>k'l</code>  并不冲突二者采用不同的指令和寄存器</p>\n<h2 id=\"访问信息\"><a class=\"anchor\" href=\"#访问信息\">#</a> 访问信息</h2>\n<p>一个 x86-64 的包含 16 个存储 64 位值的 通用数据寄存器，如下表<br />\n所有寄存器以  <code>%r</code>  开头.<br />\n 从  <code>%ax</code>  -  <code>%sp</code>  是 8086 时期的 寄存器<br />\n从  <code>%eax</code>  -  <code>%esp</code>  是 IA32 时引入的<br />\n从  <code>%r8</code>  -  <code>%r15</code>   是 x86-64 引入的<br />\n<strong>对于寄存器操作：对于寄存器操作生成小于 8 字节的操作有以下规定 1-2 字节保持不变，生成 4 字节会将高位置 0</strong></p>\n<table>\n<thead>\n<tr>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%rax</td>\n<td>%eax</td>\n<td>%ax</td>\n<td>%al</td>\n<td>返回值</td>\n</tr>\n<tr>\n<td>%rbx</td>\n<td>%ebx</td>\n<td>%bx</td>\n<td>%bl</td>\n<td>被调用者保存</td>\n</tr>\n<tr>\n<td>%rcx</td>\n<td>%ecx</td>\n<td>%cx</td>\n<td>%cl</td>\n<td>第四个参数</td>\n</tr>\n<tr>\n<td>%rdx</td>\n<td>%edx</td>\n<td>%dx</td>\n<td>%dl</td>\n<td>第三个参数</td>\n</tr>\n<tr>\n<td>%rsi</td>\n<td>%esi</td>\n<td>%si</td>\n<td>%sil</td>\n<td>第二个参数</td>\n</tr>\n<tr>\n<td>%rdi</td>\n<td>%edi</td>\n<td>%di</td>\n<td>dil%</td>\n<td>第一个参数</td>\n</tr>\n<tr>\n<td>%rbp</td>\n<td>%ebp</td>\n<td>%bp</td>\n<td>%bpl</td>\n<td>被调用者保存</td>\n</tr>\n<tr>\n<td>%rsp</td>\n<td>%esp</td>\n<td>%sp</td>\n<td>%spl</td>\n<td>栈指针</td>\n</tr>\n<tr>\n<td>%r8</td>\n<td>%r8d</td>\n<td>%r8w</td>\n<td>%r8b</td>\n<td>第五个参数</td>\n</tr>\n<tr>\n<td>%r9</td>\n<td>%r9d</td>\n<td>%r9w</td>\n<td>%r9b</td>\n<td>第六个参数</td>\n</tr>\n<tr>\n<td>%r10</td>\n<td>%r10d</td>\n<td>%r10w</td>\n<td>%r10b</td>\n<td>调用者保存</td>\n</tr>\n<tr>\n<td>%r11</td>\n<td>%r11d</td>\n<td>%r11w</td>\n<td>%r11b</td>\n<td>调用者保存</td>\n</tr>\n<tr>\n<td>%r12</td>\n<td>%r12d</td>\n<td>%r12w</td>\n<td>%r12b</td>\n<td>被调用者保存</td>\n</tr>\n<tr>\n<td>%r13</td>\n<td>%r13d</td>\n<td>%r13w</td>\n<td>%r13b</td>\n<td>被调用者保存</td>\n</tr>\n<tr>\n<td>%r14</td>\n<td>%r14d</td>\n<td>%r14w</td>\n<td>%r14b</td>\n<td>被调用者保存</td>\n</tr>\n<tr>\n<td>%r15</td>\n<td>%r15d</td>\n<td>%r15w</td>\n<td>%r15b</td>\n<td>被调用者保存</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"操作数指示符\"><a class=\"anchor\" href=\"#操作数指示符\">#</a> 操作数指示符</h3>\n<p>汇编指令大多数都有一个或多个操作符，一般来说操作符可以分为三种</p>\n<blockquote>\n<ol>\n<li>立即数</li>\n<li>寄存器</li>\n<li>内存引用</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1kzns6tlj31q90u0hdu.jpg\" alt=\"alt 操作数格式\" /><br />\n<strong> PS: 基址 和 变址 都必须是 64 位的寄存器</strong></p>\n<h3 id=\"数据传输指令\"><a class=\"anchor\" href=\"#数据传输指令\">#</a> 数据传输指令</h3>\n<h3 id=\"基本数据传送指令\"><a class=\"anchor\" href=\"#基本数据传送指令\">#</a> 基本数据传送指令</h3>\n<hr />\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MOV    S, D</td>\n<td>D &lt;- S</td>\n<td>传送</td>\n</tr>\n<tr>\n<td colspan=\"2\">movb</td>\n<td>传送字节</td>\n</tr>\n<tr>\n<td colspan=\"2\">movw</td>\n<td>传送节</td>\n</tr>\n<tr>\n<td colspan=\"2\">movl</td>\n<td>传送双节</td>\n</tr>\n<tr>\n<td colspan=\"2\">movq</td>\n<td>传送四节</td>\n</tr>\n<tr>\n<td colspan=\"2\">movb   I, R</td>\n<td>传送绝对的四节</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"扩展传送指令\"><a class=\"anchor\" href=\"#扩展传送指令\">#</a> 扩展传送指令</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MOVZ</td>\n<td>R &lt;-  零扩展 (s)</td>\n<td>以 0 进行扩展传送</td>\n</tr>\n<tr>\n<td colspan=\"2\">movzbw</td>\n<td>将做了 0 扩展的字节传送到字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movzbl</td>\n<td>将做了 0 扩展的字节传送到双字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movzwl</td>\n<td>将做了 0 扩展的字传送的双字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movzbq</td>\n<td>将做了 0 扩展的字节传送到四字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movzwq</td>\n<td>将做了 0 扩展的字传送到四字</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"符号扩展传送指令\"><a class=\"anchor\" href=\"#符号扩展传送指令\">#</a> 符号扩展传送指令</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MOVS</td>\n<td>R &lt;-  符号扩展 (s)</td>\n<td>传送符号扩展字节</td>\n</tr>\n<tr>\n<td colspan=\"2\">movsbw</td>\n<td>将做了 符号 扩展的字节传送到字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movsbl</td>\n<td>将做了 符号 扩展的字节传送到双字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movswl</td>\n<td>将做了 符号 扩展的字传送的双字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movsbq</td>\n<td>将做了 符号 扩展的字节传送到四字</td>\n</tr>\n<tr>\n<td colspan=\"2\">movswq</td>\n<td>将做了 符号 扩展的字传送到四字</td>\n</tr>\n<tr>\n<td colspan=\"2\">cltq</td>\n<td>把  <code>%eax</code>  符号 扩展到  <code>%rax</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据传送示例\"><a class=\"anchor\" href=\"#数据传送示例\">#</a> 数据传送示例</h3>\n<hr />\n<p>交换两个数，不错的思路，减少一个 动态指针<br />\n C 代码位于 3_4_# 中，ASM 代码位于 3_4_3/ASM 中</p>\n<blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>xp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>xp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span>xp <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>反汇编</p>\n<blockquote>\n<pre><code class=\"language-asm\">0000000000000000 &lt;exchange&gt;:\n  0:   8b 01                   mov    (%rcx),%eax\n  2:   89 11                   mov    %edx,(%rcx)\n  4:   c3                      retq\n</code></pre>\n</blockquote>\n<h3 id=\"数据入栈和出栈\"><a class=\"anchor\" href=\"#数据入栈和出栈\">#</a> 数据入栈和出栈</h3>\n<hr />\n<p>栈，数据类型的一种，FILO 只从顶部进出数据，只有两种操作  <code>pop</code>  和  <code>push</code></p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pushq  S</td>\n<td>R[%rsp] &lt;- R[%rsp]-8;</td>\n<td>将四字压入栈</td>\n</tr>\n<tr>\n<td>M[ R[%rsp]] &lt;- S</td>\n</tr>\n<tr>\n<td>popq  S</td>\n<td>D &lt;- M[ R[%rsp]];</td>\n<td>将四字压入栈</td>\n</tr>\n<tr>\n<td>R[%rsp] &lt;- R[%rsp]+8</td>\n</tr>\n</tbody>\n</table>\n<p><strong>PS: 由于与数据代码共用一片内存，栈空间也可以直接，寻址访问</strong></p>\n</blockquote>\n<h2 id=\"算数逻辑操作\"><a class=\"anchor\" href=\"#算数逻辑操作\">#</a> 算数逻辑操作</h2>\n<hr />\n<p>操作符被分为四种</p>\n<blockquote>\n<ol>\n<li>加载有效地址</li>\n<li>一元操作符</li>\n<li>二元操作符</li>\n<li>移位<br />\n相关指令如下:</li>\n</ol>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>leaq   S, D</td>\n<td>D &lt;- &amp;S</td>\n<td>加载有效地址</td>\n</tr>\n<tr></tr>\n<tr>\n<td>INC    D</td>\n<td>D &lt;- D+1</td>\n<td>自加</td>\n</tr>\n<tr>\n<td>DEC    D</td>\n<td>D &lt;- D-1</td>\n<td>自减</td>\n</tr>\n<tr>\n<td>NEG    D</td>\n<td>D &lt;- -D</td>\n<td>取负</td>\n</tr>\n<tr>\n<td>NOT    D</td>\n<td>D &lt;- ~D</td>\n<td>取补</td>\n</tr>\n<tr></tr>\n<tr>\n<td>ADD    S, D</td>\n<td>D &lt;- D+S</td>\n<td>加</td>\n</tr>\n<tr>\n<td>SUB    S, D</td>\n<td>D &lt;- D-S</td>\n<td>减</td>\n</tr>\n<tr>\n<td>IMUL   S, D</td>\n<td>D &lt;- D*S</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>XOR    S, D</td>\n<td>D &lt;- D^S</td>\n<td>异或</td>\n</tr>\n<tr>\n<td>AND    S, D</td>\n<td>D &lt;- D&amp;S</td>\n<td>与</td>\n</tr>\n<tr>\n<td>OR     S, D</td>\n<td>D &lt;- D</td>\n<td>S</td>\n<td>或</td>\n</tr>\n<tr></tr>\n<tr>\n<td>SAL    k, D</td>\n<td>D &lt;- D &lt;&lt; k</td>\n<td>左移</td>\n</tr>\n<tr>\n<td>SHL    k, D</td>\n<td>D &lt;- D &lt;&lt; k</td>\n<td>左移 (等同于 SAL)</td>\n</tr>\n<tr>\n<td>SAR    k, D</td>\n<td>D &lt;- D &gt;&gt; k</td>\n<td>算数右移</td>\n</tr>\n<tr>\n<td>SHR    k, D</td>\n<td>D &lt;- D &gt;&gt; k</td>\n<td>逻辑右移</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"加载有效地址\"><a class=\"anchor\" href=\"#加载有效地址\">#</a> 加载有效地址</h3>\n<p><code>leaq</code>  命令用于传送有效地址，是  <code>mov</code>  指令的一个变种，类似于 C 语言中的  <code>&amp;</code>  的运算符。该指令和加载引用内存无关，一般用于简化 运算符.</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>leaq   S, D</td>\n<td>D &lt;- &amp;S</td>\n<td>加载有效地址</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>例如:<br />\n 设  <code>%rdx</code>  为 x , 那么 指令  <code>leaq 7(%rdx, %rdx, 4), %rax</code>  加载的 %  <code>%rax</code>  寄存器最终的值为  <code>5x+7</code></p>\n</blockquote>\n<h3 id=\"一元和二元操作\"><a class=\"anchor\" href=\"#一元和二元操作\">#</a> 一元和二元操作</h3>\n<h3 id=\"一元操作\"><a class=\"anchor\" href=\"#一元操作\">#</a> 一元操作</h3>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INC    D</td>\n<td>D &lt;- D+1</td>\n<td>自加</td>\n</tr>\n<tr>\n<td>DEC    D</td>\n<td>D &lt;- D-1</td>\n<td>自减</td>\n</tr>\n<tr>\n<td>NEG    D</td>\n<td>D &lt;- -D</td>\n<td>取负</td>\n</tr>\n<tr>\n<td>NOT    D</td>\n<td>D &lt;- ~D</td>\n<td>取补</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"二元操作\"><a class=\"anchor\" href=\"#二元操作\">#</a> 二元操作</h3>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ADD    S, D</td>\n<td>D &lt;- D+S</td>\n<td>加</td>\n</tr>\n<tr>\n<td>SUB    S, D</td>\n<td>D &lt;- D-S</td>\n<td>减</td>\n</tr>\n<tr>\n<td>IMUL   S, D</td>\n<td>D &lt;- D*S</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>XOR    S, D</td>\n<td>D &lt;- D^S</td>\n<td>异或</td>\n</tr>\n<tr>\n<td>AND    S, D</td>\n<td>D &lt;- D&amp;S</td>\n<td>与</td>\n</tr>\n<tr>\n<td>OR     S, D</td>\n<td>D &lt;- D</td>\n<td>S</td>\n<td>或</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"移位操作\"><a class=\"anchor\" href=\"#移位操作\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">移位操作</a></h3>\n<p>移位量可以是一个 立即数，或者单字节寄存器  <code>%cl</code>  中。对于 x86-64 位移量取决于  <code>%cl</code>  的低 m 位决定的，2^m = w (w 为被操作数据的位数). 例如:  <code>%rcl = 0xff</code>  时， <code>salb</code>  左移 7 位， <code>salw</code>  左移 15 位， <code>sall</code>  左移 31 位， <code>salq</code>  左移 63 位.</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>效果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SAL    k, D</td>\n<td>D &lt;- D &lt;&lt; k</td>\n<td>左移</td>\n</tr>\n<tr>\n<td>SHL    k, D</td>\n<td>D &lt;- D &lt;&lt; k</td>\n<td>左移 (等同于 SAL)</td>\n</tr>\n<tr>\n<td>SAR    k, D</td>\n<td>D &lt;- D &gt;&gt; k</td>\n<td>算数右移</td>\n</tr>\n<tr>\n<td>SHR    k, D</td>\n<td>D &lt;- D &gt;&gt; k</td>\n<td>逻辑右移</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p><strong>PS: 移位操作的目的操作数可以是寄存器 也可以是内存地址</strong></p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>相关文件位于 3_5_4 中，不知道什么原因，数据 参数 1 和参数 2 寄存器不可用<br />\n<strong>大多数运算都是不区分符号，除了右移这个分为两种</strong></p>\n<h3 id=\"特殊算数操作\"><a class=\"anchor\" href=\"#特殊算数操作\">#</a> 特殊算数操作</h3>\n<p>对于两个 64 位的数据运算 x86-64 提供了一定的支持，8 字数据，指令如下<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1l0qd6frj323k0u0x6p.jpg\" alt=\"alt 64位乘法\" /></p>\n<ul>\n<li>对于 64 位乘法，只有一个操作数，但是和 8086 类似 有一个 数据需要存放到  <code>%rax</code> , 得到的结果 分为高低位分别存放在  <code>%rdx</code>  和 <code>%rax</code>  中</li>\n<li>对于除法 提供了单独的  <code>idivl</code>  被除数分为高低 64 位分别存放在  <code>%rdx</code>  和 <code>%rax</code>  寄存器中，得到的结果 商存放在  <code>%rax</code> , 余数存放在  <code>%rdx</code> . 除数由操作数给出，使用这个指令时，如果被除数是 64 位，需要将  <code>%rdx</code>  置 0 或者填充 符号位，可直接使用  <code>cqto</code></li>\n<li>ps:  <code>cqto</code>  不需要操作数，可以隐含的读出 <code>%rax</code>  的符号位，并填充到 <code>%rdx</code>  中</li>\n</ul>\n<h2 id=\"控制\"><a class=\"anchor\" href=\"#控制\">#</a> 控制</h2>\n<p>机器代码提供两种基本的基地机制来实现有条件的行为：测试数据值，然后根据测试结果来改变 <strong>控制流</strong> 或 <strong>数据流</strong>，一般来说流控制最为常用</p>\n<h3 id=\"条件码\"><a class=\"anchor\" href=\"#条件码\">#</a> 条件码</h3>\n<table>\n<thead>\n<tr>\n<th>条件码</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CF</td>\n<td>进位标志。最近的操作使最高位产生了进位。可以用于检查无符号的溢出</td>\n</tr>\n<tr>\n<td>ZF</td>\n<td>零标志。最近操作得出结果为 0</td>\n</tr>\n<tr>\n<td>SF</td>\n<td>符号标志。最近操作得到的结果为负数</td>\n</tr>\n<tr>\n<td>OF</td>\n<td>溢出标志。最近的操作导致一个补码溢出 -- 正溢出 / 负溢出</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>leaq</code>  指令 不会修改任何 条件码，</li>\n<li><code>INC</code>  和  <code>DEC</code>  不会导致溢出码改变</li>\n<li>CMP 和 TEST 指令不改变寄存器值只改变条件码，对应指令如图<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1j1mqj47j30xv0u0jt4.jpg\" alt=\"alt test 和 cmp 指令\" /></li>\n</ul>\n<h3 id=\"访问条件码\"><a class=\"anchor\" href=\"#访问条件码\">#</a> 访问条件码</h3>\n<p>条件码一般不会被直接读取，通常采用三种方式来使用:</p>\n<ul>\n<li>根据条件码的某种组合，将一个字节置 0/1</li>\n<li>可以转跳到程序的某个其他部分</li>\n<li>可以有条件的传送数据<br />\n与第一个使用 方法相关的指令为  <code>SET</code> , 用于对各种寄存器的高位清零。相关指令如图:<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1i6k0ok7j31ax0u00x0.jpg\" alt=\"alt set指令\" /><br />\n<strong> PS: SET 只能操作字节</strong></li>\n</ul>\n<h3 id=\"跳转指令\"><a class=\"anchor\" href=\"#跳转指令\">#</a> 跳转指令</h3>\n<p><code>jmp</code>  指令可以进行无条件转跳，转跳分为两种</p>\n<ul>\n<li>直接转跳   <code>jmp 标号</code> ，例如  <code>jmp .L1</code></li>\n<li>间接转跳   <code>jmp *%rax</code> ,    例如  <code>jmp *%rax</code> <br />\n 如果需要将 寄存器的值 作为转跳地址这么写  <code>jmp *(%rax)</code> <br />\n <code>jump</code>  包括 了 <code>jmp</code>  和有条件转跳的 <code>jxx</code> ,  <code>jxx</code>  是有条件转跳 当条件码到一定时组合时，进行转跳。相关指令如下:<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1i5rraf9j317a0u077x.jpg\" alt=\"alt jump 指令\" /><br />\n<strong> PS: 条件转跳只能进行直接转跳</strong></li>\n</ul>\n<h3 id=\"跳转指令的编码\"><a class=\"anchor\" href=\"#跳转指令的编码\">#</a> 跳转指令的编码</h3>\n<ul>\n<li>编码分为两种，PC 指针 相对寻址 和 绝对地址</li>\n<li>绝对地址 一般 为 1, 2, 4 字节中的 其中一个大小</li>\n<li>大部分转跳都是使用 PC 指针相对转跳，即计算地址与 PC 指针 的差值</li>\n<li>这部分的编码与链接息息相关<br />\n相关习题如下<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1j0v6z7lj31dn0u07c0.jpg\" alt=\"alt 必会习题\" /><br />\n指令 <code>rep</code>  和 <code>repz</code> <br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gs1j1225lij32420u07i4.jpg\" alt=\"alt rep和repz关系\" /></li>\n</ul>\n<h3 id=\"条件控制实现条件分支\"><a class=\"anchor\" href=\"#条件控制实现条件分支\">#</a> 条件控制实现条件分支</h3>\n<p>相关代码位于 3_6_5<br />\n 调节表达式从 C 语言翻译为机器码最常用的方式为有条件转跳和无条件转跳相结合<br />\n C 语言  <code>if-else</code>  语句格式如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test_expr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        then<span class=\"token operator\">-</span>statement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token operator\">-</span>statement</pre></td></tr></table></figure><p>对应的  <code>goto</code>  模拟板</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">goto</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    then<span class=\"token operator\">-</span>statement</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">goto</span> done<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>false<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token operator\">-</span>statement</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>done<span class=\"token operator\">:</span></pre></td></tr></table></figure><h3 id=\"条件传送实现条件分支\"><a class=\"anchor\" href=\"#条件传送实现条件分支\">#</a> 条件传送实现条件分支</h3>\n<p>相关代码位于 3_6_6.<br />\nOPItem 为三目运算符编译结果<br />\n对于现代处理器 条件转移 (控制流) 十分低效。对于现代的 处理器 来说都采用 流水线 的方式 来提高性能，处理指令需要一系列的指令。当 处理器 遇到 条件指令时就会采用 极其精密的 分支预测逻辑 来猜测执行率，，只要比较可靠，流水线就会开始填充目前指令。但是预测出错就会导致 工作性能严重下降.<br />\n 相比之下 条件传送 (控制数据) 只有在赋值 的情况下需要 进行判断，生成的汇编代码更加紧凑，执行的效率会更加高效.<br />\n 其 C 语言格式如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v <span class=\"token operator\">=</span> then_expr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ve <span class=\"token operator\">=</span> else_expr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t <span class=\"token operator\">=</span> test_exper</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span> v <span class=\"token operator\">=</span> ve<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在汇编中通过  <code>comv</code>  指令来实现值传送<br />\n于其相关的指令如下<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1i5tn4rqj31950u0ae4.jpg\" alt=\"alt comv指令\" /><br />\n<strong> PS: 条件传送不一定必然高效，而且存在 bug</strong><br />\n 当 传入的值为指针时，不进行检测直接进行运算是十分危险的，而且在需要复杂计算时，采用条件传送会过于浪费时间，条件传送有很多局限性，但其的确最适合 现代处理器的执行方式</p>\n<h3 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">循环</a></h3>\n<h3 id=\"do-while-循环\"><a class=\"anchor\" href=\"#do-while-循环\">#</a> do while 循环</h3>\n<p>相关文件位于 3_6_7.1 中<br />\n其 等价  <code>goto</code>  代码 如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loop<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    body_statement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">goto</span> loop<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>逆向工程的核心就是确哪个寄存器对应的程序哪个值</p>\n<hr />\n<h3 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a> while 循环</h3>\n<p>相关文件位于 3_6_7.2 中</p>\n<ul>\n<li>while 可能一次循环都不执行</li>\n<li>GCC 采用两种方式来翻译 while, 两种翻译方式只有 初始检测方式不同，循环结构与  <code>do while</code>  无异\n<ol>\n<li>转跳到中间 (jump to middle), 一开始会执行一个无条件转跳，跳到循环末尾处的测试，来实现初始检测</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">goto</span> test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loop<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    body_statement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>test<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">goto</span> loop<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>guraded_do, 最开始使用条件分支，初始条件不成立即跳过循环，将代码转换为  <code>do while</code>  格式，使用  <code>-O1</code>  选项的时候，代码会使用这种方式进行编译</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>翻译成 <span class=\"token keyword\">do</span> <span class=\"token keyword\">while</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">goto</span> done<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    body_statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    t <span class=\"token operator\">=</span> test_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">goto</span> loop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>done<span class=\"token operator\">:</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对应的 `<span class=\"token keyword\">goto</span>` 版本</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">goto</span> done<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>loop<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    body_statement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    t <span class=\"token operator\">=</span> test_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">goto</span> loop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>done<span class=\"token operator\">:</span></pre></td></tr></table></figure><strong>PS : 采用第二种方式进行翻译时，有些时候 初始判断 会被优化</strong><br />\n个人感觉 后面这种翻译方式更加高效</li>\n</ul>\n<hr />\n<h3 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> for 循环</h3>\n<p>相关文件位于 3_6_7.3 中<br />\n一般来说 for 循环结构如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>init_exper<span class=\"token punctuation\">;</span> text_exper<span class=\"token punctuation\">;</span> update_exper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    body_statement</pre></td></tr></table></figure><p>在 GCC 中  <code>for</code>  语句 会被转化为 两种  <code>while</code>  语句中的一种 格式大致如下，部分情况会进行微调<br />\n jump to middle 版本:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>init_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">goto</span> test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>loop<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    body_statement</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    update_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>test<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">goto</span> loop<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>guraded_do 版本:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>init_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">goto</span> done<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>loop<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    body_statement</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    update_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    t <span class=\"token operator\">=</span> text_exper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">goto</span> loop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>done<span class=\"token operator\">:</span></pre></td></tr></table></figure><h3 id=\"switch-语句\"><a class=\"anchor\" href=\"#switch-语句\">#</a> switch 语句</h3>\n<p>相关文件位于 3_6_8 中，TEST 中为测试 case 生成转跳表所用的文件</p>\n<ul>\n<li><code>switch</code>  语句在条件较多的情况下 (一般多余 4 个), 并且 case 值跨度较小的时候会更加高效，在翻译的时候会被翻译成 <strong>转跳表</strong></li>\n<li><code>switch</code>  执行开关语句的时间与开关数量无关</li>\n<li><code>&amp;&amp;</code>  运算符可以用来指向 代码地址，可以与  <code>goto</code>  搭配使用实现  <code>switch case</code></li>\n<li><code>.rodata</code>  表示只读数据， <code>align 4</code>  表示 每个数据大小为 4 字 (8 字节)<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1i6l3caoj30a501ea9v.jpg\" alt=\"alt 书本样例\" />，<br />\n 不过现在编译出来有些不同<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1irtbxruj308b01b3yb.jpg\" alt=\"alt 书本样例编译\" /></li>\n</ul>\n<h2 id=\"过程\"><a class=\"anchor\" href=\"#过程\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">过程</a></h2>\n<hr />\n<p>过程是一种封装代码的方式，用一组指定的参数 和 可选返回值实现某种功能<br />\n实现这种功能的需要以下机器级支持一项或几项:</p>\n<ul>\n<li>传递控制</li>\n<li>传递数据</li>\n<li>分配和释放内存<br />\n为了简化讨论，我们把调用函数的过程称为  <code>P</code> , 被调用的函数称为  <code>fun</code></li>\n</ul>\n<h3 id=\"运行时栈\"><a class=\"anchor\" href=\"#运行时栈\">#</a> 运行时栈</h3>\n<p>这里的栈并非抽象概念，是一个实例. C 语言的过程调用就依赖于栈的 FILO 的机制.<br />\n 如果  <code>P</code>  调用  <code>fun</code> , 那么流程大致如下:</p>\n<ol>\n<li><code>P</code>  被挂起， <code>P</code>  的数据存入栈中，进行现场保存.</li>\n<li>为  <code>fun</code>  的数据 分配空间.</li>\n<li><code>fun</code>  返回后，释放  <code>fun</code>  的数据空间</li>\n<li>重新读入  <code>P</code>  数据，恢复现场<br />\n通用的栈结构:<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1im431w9j30u01g8ttz.jpg\" alt=\"alt 栈\" /></li>\n</ol>\n<p>有关  <code>P</code>  的数据只存放在  <code>P</code>  帧内部，返回地址一般会存放在整个帧的最末尾。一次调用最多传送 6 个整数值 (即 6 个 指针或整型), 其他类型或多出的参数会被存放栈帧里。参数构造一般会在调用前执行</p>\n<h3 id=\"转移控制\"><a class=\"anchor\" href=\"#转移控制\">#</a> 转移控制</h3>\n<p>相关的指令如下:</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>call Label</td>\n<td>调用过程</td>\n</tr>\n<tr>\n<td>call *Operand</td>\n<td>过程调用</td>\n</tr>\n<tr>\n<td>ret</td>\n<td>从过程中返回</td>\n</tr>\n</tbody>\n</table>\n<p><code>P</code>  调用  <code>fun</code>  时，PC 计数器 被置为  <code>fun</code>  的首地址，返回后 PC 计数器 还原到原来的地址.<br />\n 图示:<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1i66tjl1j31xm0oeh3j.jpg\" alt=\"alt call\" /></p>\n<h3 id=\"数据传送\"><a class=\"anchor\" href=\"#数据传送\">#</a> 数据传送</h3>\n<p>上面说过，寄存器只有 6 个 是用来保存参数的，那么如果需要传参 &gt; 6 的参数，就需要预先存入栈中.<br />\n 来看一个例子，分析以下多余的参数是如何在栈中分布的<br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1iriu5ttj30zv0u04fi.jpg\" alt=\"alt param\" /><br />\n 图片中  <code>a4p</code>  和  <code>a4</code>  转移到  <code>%rax</code>  和  <code>%edx</code>  数据来源于  <code>16(%rsp)</code>  和  <code>8(%rsp)</code>  , 所以 多出的参数以 <code>push</code>  操作的正常大小压入栈内，以此类推<br />\n所以考虑将使用频率高的参数 提前.<br />\n 结构体尽可能不要传值，在这也能体现出来，如果不想改变结构体的值，考虑传入一个  <code>const *</code>  指针</p>\n<h3 id=\"栈上局部缓存\"><a class=\"anchor\" href=\"#栈上局部缓存\">#</a> 栈上局部缓存</h3>\n<p>这里就开始讨论， <code>fun</code>  数据存储的问题了.<br />\n 目前出现的例子中没有超出寄存器大小的本地存储区域，但是以下这几种情况就需要将局部数据存入内存中:</p>\n<ol>\n<li>寄存器不足以存放所有本地数据</li>\n<li>对一个局部变量使用  <code>&amp;</code> , 必须有相应的内存地址给其引用</li>\n<li>局部变量是结构体或数组.</li>\n</ol>\n<p>来看一个例子:<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1i6owwmrj30u00x3aj4.jpg\" alt=\"alt swap_c\" /><br />\n<img data-src=\"https://tva4.sinaimg.cn/large/005Q2GK3ly8gs1ir346dej31jb0u0h2e.jpg\" alt=\"alt swap_s\" /><br />\n<img data-src=\"https://tva3.sinaimg.cn/large/005Q2GK3ly8gs1i5xea9ij31qd0qmjy5.jpg\" alt=\"alt caller_c\" /><br />\n<img data-src=\"https://tva2.sinaimg.cn/large/005Q2GK3ly8gs1i6hixy6j30u010s7ny.jpg\" alt=\"alt caller_s\" /></p>\n<h3 id=\"寄存器中的局部存储空间\"><a class=\"anchor\" href=\"#寄存器中的局部存储空间\">#</a> 寄存器中的局部存储空间</h3>\n<p>在整个程序执行过程中 只有寄存器是被所有过程共享资源的，所以我们需要时刻注意，在调用其他过程的时候，寄存器的值不被覆盖，或者说如何保存调用前寄存器内部的值<br />\n依据惯例:</p>\n<ul>\n<li><code>%rbx</code> 、 <code>%bpx</code>  和  <code>%r12~%r15</code>  被划分为 <strong>被调用者保存寄存器</strong></li>\n<li>除  <code>%rsp</code>  以及上面的寄存器 以外的寄存器，都被 称为<strong>调用者保存寄存器</strong></li>\n</ul>\n<p>来看一个例子:<br />\n<img data-src=\"https://tva1.sinaimg.cn/large/005Q2GK3ly8gs1izlmj0jj30vn0u0dv6.jpg\" alt=\"alt register\" /></p>\n<h3 id=\"递归过程\"><a class=\"anchor\" href=\"#递归过程\">#</a> 递归过程</h3>\n<h2 id=\"数组分配\"><a class=\"anchor\" href=\"#数组分配\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">数组分配</a></h2>\n<hr />\n<h3 id=\"基本原则\"><a class=\"anchor\" href=\"#基本原则\">#</a> 基本原则</h3>\n<h3 id=\"指针运算\"><a class=\"anchor\" href=\"#指针运算\">#</a> 指针运算</h3>\n<h3 id=\"嵌套数组\"><a class=\"anchor\" href=\"#嵌套数组\">#</a> 嵌套数组</h3>\n<h3 id=\"定长数组\"><a class=\"anchor\" href=\"#定长数组\">#</a> 定长数组</h3>\n<h3 id=\"变长数组\"><a class=\"anchor\" href=\"#变长数组\">#</a> 变长数组</h3>\n<h2 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">数据结构</a></h2>\n<hr />\n<h3 id=\"结构\"><a class=\"anchor\" href=\"#结构\">#</a> 结构</h3>\n<h3 id=\"联合\"><a class=\"anchor\" href=\"#联合\">#</a> 联合</h3>\n<h3 id=\"数据对齐\"><a class=\"anchor\" href=\"#数据对齐\">#</a> 数据对齐</h3>\n<h2 id=\"机器级程序中将控制与数据结合\"><a class=\"anchor\" href=\"#机器级程序中将控制与数据结合\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">机器级程序中将控制与数据结合</a></h2>\n<hr />\n<h3 id=\"理解指针\"><a class=\"anchor\" href=\"#理解指针\">#</a> 理解指针</h3>\n<h3 id=\"应用-使用-gdb-调试器\"><a class=\"anchor\" href=\"#应用-使用-gdb-调试器\">#</a> 应用：使用 GDB 调试器</h3>\n<h3 id=\"对抗缓冲化攻击\"><a class=\"anchor\" href=\"#对抗缓冲化攻击\">#</a> 对抗缓冲化攻击</h3>\n<h2 id=\"浮点代码\"><a class=\"anchor\" href=\"#浮点代码\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">浮点代码</a></h2>\n<hr />\n<h3 id=\"浮点传送和转换\"><a class=\"anchor\" href=\"#浮点传送和转换\">#</a> 浮点传送和转换</h3>\n<h3 id=\"过程中的浮点代码\"><a class=\"anchor\" href=\"#过程中的浮点代码\">#</a> 过程中的浮点代码</h3>\n<h3 id=\"浮点运算操作\"><a class=\"anchor\" href=\"#浮点运算操作\">#</a> 浮点运算操作</h3>\n<h3 id=\"定义和使用浮点\"><a class=\"anchor\" href=\"#定义和使用浮点\">#</a> 定义和使用浮点</h3>\n<h3 id=\"浮点代码中使用位级操作\"><a class=\"anchor\" href=\"#浮点代码中使用位级操作\">#</a> 浮点代码中使用位级操作</h3>\n<h3 id=\"浮点比较操作\"><a class=\"anchor\" href=\"#浮点比较操作\">#</a> 浮点比较操作</h3>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> <a href=\"#%E7%9B%AE%E5%BD%95\">小结</a></h2>\n<hr />\n",
            "tags": [
                "CS书籍笔记",
                "操作系统,汇编,学习笔记,C"
            ]
        }
    ]
}
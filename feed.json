{
    "version": "https://jsonfeed.org/version/1",
    "title": "三千羊毛",
    "subtitle": "以己为剑 斩尽诸险",
    "icon": "https://to-ywz.github.io/images/favicon.ico",
    "description": "笔记&分享",
    "home_page_url": "https://to-ywz.github.io",
    "items": [
        {
            "id": "https://to-ywz.github.io/tool/VSCode%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://to-ywz.github.io/tool/VSCode%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "VSCode使用问题记录",
            "date_published": "2023-07-11T09:59:07.000Z",
            "content_html": "<h4 id=\"写在前面\"><a class=\"anchor\" href=\"#写在前面\">#</a> 写在前面</h4>\n<p>这篇博客用于记录我使用 vscode 过程中出现的问题，以及解决方法<br />\n吹爆 vscode</p>\n<h2 id=\"bracket-pair-colorizer-2-不维护\"><a class=\"anchor\" href=\"#bracket-pair-colorizer-2-不维护\">#</a> Bracket Pair Colorizer 2 不维护</h2>\n<p>今天打开我的生产力的时候发现，一大堆插件要更新 (忙于其它事情，一直没用这台电脑), 突然就发现  <code>Bracket Pair Colorizer 2</code>  它不维护了<br />\n被划了删除线，插件图标都变灰了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.7hrpunjly9c0.webp\" alt=\"image\" /><br />\n 这个插件可以把不同嵌套层级的各种类型的括号，用不同的颜色标注出来<br />\n (⊙o⊙)？我和时代脱轨了，这可是 VSCode 必装的神级插件啊，居然不维护了！没天理了啊</p>\n<p>我去了官网之后发现，不维护的原因是 VSCode 内置了这个功能，这里是作者原话</p>\n<blockquote>\n<p>This project started on 3 Dec 2016. Now 5 years later, <strong>it has become a native feature in VSCode.</strong></p>\n<p>This extension has seen wilder success then I could over ever dreamed of, with over 10M+ downloads.</p>\n<p>I'm glad so many people found it useful, however it no longer has a purpose entering 2022 so development will no longer continue.</p>\n<p>If you enjoyed it, a coffee donation is appreciated:</p>\n<p>🎁 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rby1maS5jb20vYnJhY2tldHBhaXJjb2xvcml6ZXI=\">Donate</span> 🎁</p>\n</blockquote>\n<p>大致意思就是致谢然后说不再维护，然后重点是我加粗的那句 &quot;已经成为内部功能&quot;, 并且作者也给出了如何开启内部括号匹配的方法</p>\n<h3 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h3>\n<p>在 setting.json 文件中添加以下代码</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"editor.bracketPairColorization.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"editor.guides.bracketPairs\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"active\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，添加到全局的 setting 文件中肯定比较好一些<br />\n ---------2022 年 11 月 -----------------</p>\n<h2 id=\"设置默认终端\"><a class=\"anchor\" href=\"#设置默认终端\">#</a> 设置默认终端</h2>\n<p>一般来说，新建的终端都会是 powershell, 但是在使用 makfile 的时候我还是更喜欢使用 git bash</p>\n<p>但每次都需要通过点  <code>+</code>  旁边的更多符号手动选择 git bash 就很不爽</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.12pa5ujcgzkw.jpg\" alt=\"image\" /></p>\n<p>为了在快捷键唤出的终端就是 git bash, 这就需要涉及到修改默认终端</p>\n<p>很简单，在  <code>.vsocde</code>  新建一个  <code>settings.json</code>  文件 (如果有则不用)</p>\n<p>然后添加下面这段代码即可</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"terminal.integrated.defaultProfile.windows\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Git Bash\"</span></pre></td></tr></table></figure><p>要注意的是，下面这个配置选项已经被 VSCode 废弃了，如果找博客发现了这个推荐十有八九就是过时啦</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"terminal.integrated.shell.windows\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"D:/Git/bin/bash.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>---------2023 年 7 月 -----------------</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "开发工具",
                "VSCode",
                "VScode"
            ]
        },
        {
            "id": "https://to-ywz.github.io/English/2006%E5%B9%B4%E8%8B%B1%E8%AF%AD%E7%9C%9F%E9%A2%98/",
            "url": "https://to-ywz.github.io/English/2006%E5%B9%B4%E8%8B%B1%E8%AF%AD%E7%9C%9F%E9%A2%98/",
            "title": "2006年英语真题",
            "date_published": "2023-07-10T23:51:33.000Z",
            "content_html": "<h1 id=\"text1\"><a class=\"anchor\" href=\"#text1\">#</a> TEXT1</h1>\n<p>主语: <ins>主语</ins><br />\n谓语: <ins class=\"dot warning\">谓语</ins><br />\n宾语: <ins class=\"wavy\">宾语</ins><br />\n定语: <mark>定语</mark><br />\n状语: <ins class=\"primary\">状语</ins></p>\n<h2 id=\"段落1\"><a class=\"anchor\" href=\"#段落1\">#</a> 段落 1</h2>\n<h3 id=\"语句1\"><a class=\"anchor\" href=\"#语句1\">#</a> 语句 1</h3>\n<p>In spite of &quot;endless talk of difference&quot;, American society is an amazing machine for homogenizing people.</p>\n<h4 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h4>\n<p><ins class=\"primary\">In spite of &quot;endless talk of difference&quot;</ins>, <ins>American society</ins> <ins class=\"dot warning\">is</ins> <ins class=\"wavy\">an amazing machine</ins> <mark>for homogenizing</mark> people.</p>\n<p>状语: In spite of &quot;endless talk of difference&quot;<br />\n 主语: society<br />\n 谓语:  is<br />\n 宾语: machine</p>\n<h4 id=\"词汇\"><a class=\"anchor\" href=\"#词汇\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">in spite of</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">虽然…… 但是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">homogenizing</td>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\">使.. 均匀；使.. 统一</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译\"><a class=\"anchor\" href=\"#翻译\">#</a> 翻译</h4>\n<p>虽然 &quot;差异的争论永无止境&quot;, 但是美国社会是一个同化人的奇迹机器.</p>\n<h4 id=\"标准翻译\"><a class=\"anchor\" href=\"#标准翻译\">#</a> 标准翻译</h4>\n<p>尽管，“人们无休止地谈论美国社会的差异”，但是，美国社会是一台将人们都同化的神奇机器</p>\n<h3 id=\"语句2\"><a class=\"anchor\" href=\"#语句2\">#</a> 语句 2</h3>\n<p>There is “the democratizing uniformity of dress and discourse, and the casualness and absence of deference” characteristic of popular culture.</p>\n<h4 id=\"语法-2\"><a class=\"anchor\" href=\"#语法-2\">#</a> 语法</h4>\n<p><ins>There</ins> <ins class=\"dot warning\">is</ins> “<mark>the democratizing uniformity of</mark> dress and discourse, and <mark>the casualness and absence of</mark> deference” <mark>characteristic of</mark> <ins class=\"wavy\">popular culture</ins>.</p>\n<p>主语: There<br />\n 谓语: is<br />\n 宾语: culture</p>\n<h4 id=\"词汇-2\"><a class=\"anchor\" href=\"#词汇-2\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">dress</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">服装</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">democratizing</td>\n<td style=\"text-align:left\">v</td>\n<td style=\"text-align:left\">使... 民主化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uniform</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">校服；制服；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">统一的；一样的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">uniformity</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">统一性；一致；一样</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">discourse</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">谈话；话语</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">casualness</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">随意；漫不经心；偶然</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">absence</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">缺席；不存在</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">in the absence of</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">（人）不在时</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-2\"><a class=\"anchor\" href=\"#翻译-2\">#</a> 翻译</h4>\n<p>这里的流行文化流行文化里有，服装和谈话的一样的民主化和统一性，松散且缺少不同</p>\n<h4 id=\"标准翻译-2\"><a class=\"anchor\" href=\"#标准翻译-2\">#</a> 标准翻译</h4>\n<p>美国社会的流行文化中，有着服装和话语（用语）平民化、统一化、自由随意和不拘小节等特点。</p>\n<h3 id=\"语句3\"><a class=\"anchor\" href=\"#语句3\">#</a> 语句 3</h3>\n<p>People are absorbed into &quot;a culture of consumption&quot; launched by the 19th-century department stores that offered &quot;vast arrays of goods in an elegant atmosphere.</p>\n<h4 id=\"语法-3\"><a class=\"anchor\" href=\"#语法-3\">#</a> 语法</h4>\n<p><ins>People</ins> <ins>are absorbed into</ins>.{.dot .warning} &quot;a culture of consumption&quot; <ins class=\"wavy\">launched by the 19th-century department stores</ins> [that <ins class=\"dot warning\">offered</ins> <mark>vast arrays of</mark> goods in <ins class=\"wavy\">an elegant atmosphere</ins>].{aqua}.</p>\n<p>主语: People<br />\n 谓语: are absorbed into<br />\n 宾语: culture</p>\n<p>定从: that offered &quot;vast arrays of goods in an elegant atmosphere</p>\n<h4 id=\"词汇-3\"><a class=\"anchor\" href=\"#词汇-3\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">be absorbed into sth</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">使并入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vast array of</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">大量的；多种多样的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">consumption</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">消费</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">department stores</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">百货商店；百货公司</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-3\"><a class=\"anchor\" href=\"#翻译-3\">#</a> 翻译</h4>\n<p>人们 [吸收来自].{.red} 百货公司推行的一种 &quot;消费文化&quot;, 在一个优雅的氛围下提供大量的商品.</p>\n<p><strong>分析:</strong> be done ... by 被动语句</p>\n<h4 id=\"标准翻译-3\"><a class=\"anchor\" href=\"#标准翻译-3\">#</a> 标准翻译</h4>\n<p>人们被 19 世纪百货公司所开创的 “消费文化” 所吸引，这些百货公司 “在装饰优雅的货架上，提供了琳琅满目的商品”。</p>\n<h3 id=\"语句4\"><a class=\"anchor\" href=\"#语句4\">#</a> 语句 4</h3>\n<p>Instead of intimate shops catering to a knowledgeable elite,” these were stores “anyone could enter, regardless of class or background.</p>\n<h4 id=\"语法-4\"><a class=\"anchor\" href=\"#语法-4\">#</a> 语法</h4>\n<p><ins class=\"primary\">Instead of intimate shops catering to a knowledgeable elite</ins>, <ins>these</ins> <ins>were</ins>++.{.dot .warning} +stores++{.wavy} [<ins>anyone</ins> <ins>could enter</ins>.{.dot .warming}, <mark>regardless of class or background</mark>].{aqua}.</p>\n<p>状语: Instead of intimate shops catering to a knowledgeable elit</p>\n<p>主句: these were stores</p>\n<ul>\n<li>主语: these</li>\n<li>谓语: were</li>\n<li>宾语: stores</li>\n</ul>\n<p>定从: anyone could enter, regardless of class or background</p>\n<ul>\n<li>主语: anyone</li>\n<li>谓语: could enter</li>\n<li>状语: regardless of class or background</li>\n</ul>\n<h4 id=\"词汇-4\"><a class=\"anchor\" href=\"#词汇-4\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">intimate</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">亲密的（指身体的接触）；隐私的；温馨的；精通的；暧昧的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cater to</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">迎合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Instead of</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">而不是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">department stores</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">百货商店；百货公司</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-4\"><a class=\"anchor\" href=\"#翻译-4\">#</a> 翻译</h4>\n<p>与那些迎合知识渊博的精英阶级的 [私人].{red} 商店不同，这些百货公司无论什么背景和阶级都可以进入</p>\n<p>** 分析:** 不要少翻译单词</p>\n<h4 id=\"标准翻译-4\"><a class=\"anchor\" href=\"#标准翻译-4\">#</a> 标准翻译</h4>\n<p>与那些面向知识精英的私人商店不同，这些商店是任何人都可以进入的，无论他是任何阶级或背景的人</p>\n<h3 id=\"语句-5\"><a class=\"anchor\" href=\"#语句-5\">#</a> 语句 5</h3>\n<p>This turned shopping into a public and democratic act.</p>\n<h4 id=\"语法-5\"><a class=\"anchor\" href=\"#语法-5\">#</a> 语法</h4>\n<p><ins>This</ins> <ins>turned shopping into</ins>.{.dot .warming} <ins>a public and democratic act</ins>.{wavy}.</p>\n<ul>\n<li>主语: This</li>\n<li>谓语: turned A into B</li>\n<li>宾语: a public and democratic act</li>\n</ul>\n<h4 id=\"词汇-5\"><a class=\"anchor\" href=\"#词汇-5\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">turn A into B</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">把 A 变成 B</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">democratic</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">大众的，就是 public 的意思</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-5\"><a class=\"anchor\" href=\"#翻译-5\">#</a> 翻译</h4>\n<p>这将购物转换为公开的，大众的行为</p>\n<h4 id=\"标准翻译-5\"><a class=\"anchor\" href=\"#标准翻译-5\">#</a> 标准翻译</h4>\n<p>这使得购物成为一种公开的、大众的行为</p>\n<h3 id=\"语句-6\"><a class=\"anchor\" href=\"#语句-6\">#</a> 语句 6</h3>\n<p>The mass media, advertising and sports are other forces for homogenization.</p>\n<h4 id=\"语法-6\"><a class=\"anchor\" href=\"#语法-6\">#</a> 语法</h4>\n<p><ins>The mass media, advertising and sports</ins> <ins>are</ins>.{.dot .warming} <ins>other forces</ins>.{wavy} <ins class=\"primary\">for homogenization</ins>.</p>\n<p>主语: The mass media, advertising and sports<br />\n 谓语: are<br />\n 宾语: other forces</p>\n<h4 id=\"词汇-6\"><a class=\"anchor\" href=\"#词汇-6\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">intimate</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">亲密的（指身体的接触）；隐私的；温馨的；精通的；暧昧的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cater to</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">迎合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Instead of</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">而不是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">department stores</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">百货商店；百货公司</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-6\"><a class=\"anchor\" href=\"#翻译-6\">#</a> 翻译</h4>\n<p>大众媒体，广告，运动 都是为了同化的其它力量</p>\n<h4 id=\"标准翻译-6\"><a class=\"anchor\" href=\"#标准翻译-6\">#</a> 标准翻译</h4>\n<p>大众媒体、广告和体育也是推动同化的其他力量</p>\n<h2 id=\"第二段\"><a class=\"anchor\" href=\"#第二段\">#</a> 第二段</h2>\n<h3 id=\"语句-1\"><a class=\"anchor\" href=\"#语句-1\">#</a> 语句 1</h3>\n<p>Immigrants are quickly fitting into this common culture, which may not be altogether elevating but is hardly poisonous.</p>\n<h4 id=\"语法-7\"><a class=\"anchor\" href=\"#语法-7\">#</a> 语法</h4>\n<p><ins>Immigrants</ins> <ins>are quickly fitting into</ins>.{.dot .warming} <ins>this common culture</ins>.{.wavy}, [which may not be altogether elevating but is hardly poisonous].{.aqua}.</p>\n<p>状语: Immigrants are quickly fitting into this common culture,</p>\n<p>主句: Immigrants</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: are quickly fitting into</li>\n<li>宾语: this common culture</li>\n</ul>\n<p>同位语: which may not be altogether elevating but is hardly poisonous</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: may not be; is</li>\n<li>状语: altogether elevating; poisonous</li>\n</ul>\n<h4 id=\"词汇-7\"><a class=\"anchor\" href=\"#词汇-7\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">elevating</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">有趣的；发人深省的；启发的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-7\"><a class=\"anchor\" href=\"#翻译-7\">#</a> 翻译</h4>\n<p>移民者快速的融入大众文化，可能没有有趣但也没有那么有害</p>\n<h4 id=\"标准翻译-7\"><a class=\"anchor\" href=\"#标准翻译-7\">#</a> 标准翻译</h4>\n<p>移民们很快就融入了这种共同的文化，这种文化也许没有那么高尚，但也没有那么有害。</p>\n<h3 id=\"语句-2\"><a class=\"anchor\" href=\"#语句-2\">#</a> 语句 2</h3>\n<p>Writing for the National Immigration Forum, Gregory Rodriguez reports that today's immigration is neither at unprecedented levels nor resistant to assimilation</p>\n<h4 id=\"语法-8\"><a class=\"anchor\" href=\"#语法-8\">#</a> 语法</h4>\n<p class=\"red\"><ins class=\"primary\">Writing for the National Immigration Forum,</ins><br />\n<ins>Gregory Rodriguez</ins> <ins>reports</ins>.{.dot .warming}<br />\n[that <ins>today's immigration</ins> <ins>is</ins>.{.dot .warming} neither at unprecedented levels nor resistant to assimilation].</p>\n<p>状语: Writing for the National Immigration Forum</p>\n<p>主句: Gregory Rodriguez reports</p>\n<ul>\n<li>主语: Gregory Rodriguez</li>\n<li>谓语: reports</li>\n</ul>\n<p>宾从:  that today's immigration is neither at unprecedented levels nor resistant to assimilation</p>\n<ul>\n<li>主语: today's immigration</li>\n<li>谓语: is</li>\n<li>状语: neither at unprecedented levels nor resistant to assimilation</li>\n</ul>\n<h4 id=\"词汇-8\"><a class=\"anchor\" href=\"#词汇-8\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">unprecedented</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">史无前例的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">resistant</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">迎合</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">neither...nor...</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">：既不... 也不...</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-8\"><a class=\"anchor\" href=\"#翻译-8\">#</a> 翻译</h4>\n<p>如国家移民局所写的，乔格里・罗德瑞斯 报道的，如今的移民既不是空前的水平也不没有抵抗同化</p>\n<p><strong>分析:</strong> ving + for 表目的，状语</p>\n<h4 id=\"标准翻译-8\"><a class=\"anchor\" href=\"#标准翻译-8\">#</a> 标准翻译</h4>\n<p>为国家移民论坛撰文的格雷戈里・罗德里格斯指出，今天的移民既没有达到前所未有的水平，也没有抵制同化。</p>\n<h3 id=\"语句-3\"><a class=\"anchor\" href=\"#语句-3\">#</a> 语句 3</h3>\n<p>In 1998 immigrants were 9.8 percent of the population; in 1900, 13.6 percent</p>\n<h4 id=\"语法-9\"><a class=\"anchor\" href=\"#语法-9\">#</a> 语法</h4>\n<p class=\"wavy\"><ins class=\"primary\">In 1998</ins> <ins>immigrants</ins> <ins>were</ins>.{.dot .warming} <ins>9.8 percent of population</ins>.{. wavy}; <ins class=\"primary\">in 1900</ins>, <ins>13.6 percent</ins>.</p>\n<p>状语: In 1998; in 1900</p>\n<p>主句: In 1998 immigrants were 9.8 percent of the population</p>\n<ul>\n<li>主语: immigrants</li>\n<li>谓语: were</li>\n<li>宾语: 9.8 percent of the population</li>\n</ul>\n<p>省略句：13.6 percent</p>\n<ul>\n<li>主语: immigrants</li>\n<li>谓语: were</li>\n<li>宾语: 13.6 percent</li>\n</ul>\n<h4 id=\"词汇-9\"><a class=\"anchor\" href=\"#词汇-9\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-9\"><a class=\"anchor\" href=\"#翻译-9\">#</a> 翻译</h4>\n<p>1998 年 [移民].{.red} 是人口的 9.8%, 而 1900 年是 13.6%</p>\n<p><strong>分析:</strong> 翻译不要少主语</p>\n<h4 id=\"标准翻译-9\"><a class=\"anchor\" href=\"#标准翻译-9\">#</a> 标准翻译</h4>\n<p>998 年，移民占人口的 9.8%；1900 年是 13.6%</p>\n<h3 id=\"语句-4\"><a class=\"anchor\" href=\"#语句-4\">#</a> 语句 4</h3>\n<p>In the 10 years prior to 1990, 3.1 immigrants arrived for every 1,000 residents;</p>\n<h4 id=\"语法-10\"><a class=\"anchor\" href=\"#语法-10\">#</a> 语法</h4>\n<p>In the 10 years prior to 1990, 3.1 immigrants arrived for every 1,000 residents;in the 10 years prior to 1890, 9.2 for every 1,000.</p>\n<p>状语: In the 10 years prior to 1990</p>\n<ul>\n<li>主语: immigrants</li>\n<li>谓语: arrived for</li>\n<li>宾语: every 1,000 residents</li>\n</ul>\n<h4 id=\"词汇-10\"><a class=\"anchor\" href=\"#词汇-10\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">prior to</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">在前面的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-10\"><a class=\"anchor\" href=\"#翻译-10\">#</a> 翻译</h4>\n<p>在 1990 年的前 10 年，每 1000 个居民中有 3.1 个移民；在 1890 的前 10 年，每 1000 个居民中有 9.2 个移民者</p>\n<h4 id=\"标准翻译-10\"><a class=\"anchor\" href=\"#标准翻译-10\">#</a> 标准翻译</h4>\n<p>在 1990 年之前的 10 年里，每 1000 个居民中就有 3.1 个移民；在 1890 年之前的 10 年里，每 1000 人中就有 9.2 人</p>\n<h3 id=\"语句-5-2\"><a class=\"anchor\" href=\"#语句-5-2\">#</a> 语句 5</h3>\n<p>Now, consider three indices of assimilation language, home ownership and intermarriage</p>\n<h4 id=\"语法-11\"><a class=\"anchor\" href=\"#语法-11\">#</a> 语法</h4>\n<p>Now, consider three indices of assimilation language, home ownership and intermarriage.</p>\n<ul>\n<li>谓语: consider</li>\n<li>宾语: three indices of assimilation—language, home ownership and intermarriage</li>\n</ul>\n<h4 id=\"词汇-11\"><a class=\"anchor\" href=\"#词汇-11\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">indices</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">指数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ownership</td>\n<td style=\"text-align:left\">phere</td>\n<td style=\"text-align:left\">所有权；产权；物主身份</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">intermarriage.</td>\n<td style=\"text-align:left\">n</td>\n<td style=\"text-align:left\">通婚</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-11\"><a class=\"anchor\" href=\"#翻译-11\">#</a> 翻译</h4>\n<p>现在，考虑同化的三个指数：语言，所有权和通婚</p>\n<p>** 分析:** 所有权，也对，但是这里更偏向产权</p>\n<h4 id=\"标准翻译-11\"><a class=\"anchor\" href=\"#标准翻译-11\">#</a> 标准翻译</h4>\n<p>现在，我们来看看同化的三个指标 —— 语言、房屋所有权和通婚</p>\n<h2 id=\"第三段\"><a class=\"anchor\" href=\"#第三段\">#</a> 第三段</h2>\n<h3 id=\"语句-1-2\"><a class=\"anchor\" href=\"#语句-1-2\">#</a> 语句 1</h3>\n<p>The 1990 Census revealed that “a majority of immigrants from each of the fifteen most common countries of origin spoke English ‘well’ or ‘very well’ after ten years of residence.”</p>\n<h4 id=\"语法-12\"><a class=\"anchor\" href=\"#语法-12\">#</a> 语法</h4>\n<p>The 1990 <ins>Census</ins> <ins>revealed</ins>.{.dot .warming}<br />\n[that “a majority of <ins>immigrants</ins> from each of the fifteen most common countries of origin {spoke}.{.dot .warming}  English ‘well’ or ‘very well’ <ins class=\"primary\">after ten years of residence</ins>.].{.qoua}”</p>\n<p>状语:</p>\n<p>主句: The 1990 Census revealed</p>\n<ul>\n<li>主语: Census</li>\n<li>谓语: revealed</li>\n</ul>\n<p>宾从: a majority of immigrants <mark>from each of the fifteen most common countries of origin</mark> spoke English ‘well’ or ‘very well’ after ten years of residence</p>\n<ul>\n<li>主语: immigrants</li>\n<li>谓语: spoke</li>\n<li>状语: English ‘well’ or ‘very well’</li>\n</ul>\n<h4 id=\"词汇-12\"><a class=\"anchor\" href=\"#词汇-12\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">revealed</td>\n<td style=\"text-align:left\">vt.</td>\n<td style=\"text-align:left\">揭示；揭露</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-12\"><a class=\"anchor\" href=\"#翻译-12\">#</a> 翻译</h4>\n<p>1990 年的人口普查显示，&quot;在居住 10 年后，来自 15 个一般国家的大部分的移民者说英语&quot; 很好 &quot;或者&quot; 非常好 &quot;</p>\n<p><strong>分析:</strong></p>\n<ul>\n<li>普遍要比一般更好</li>\n<li>from each of the fifteen most common countries of origin 做后置定语</li>\n<li>after ten years of residence 状语</li>\n</ul>\n<h4 id=\"标准翻译-12\"><a class=\"anchor\" href=\"#标准翻译-12\">#</a> 标准翻译</h4>\n<p>1990 年的人口普查显示，“来自 15 个最普遍的原籍国家的大多数移民在居住 10 年后，英语都会说得不错，或者是相当好。”</p>\n<h3 id=\"语句-2-2\"><a class=\"anchor\" href=\"#语句-2-2\">#</a> 语句 2</h3>\n<p>The children of immigrants tend to be bilingual and proficient in English</p>\n<h4 id=\"语法-13\"><a class=\"anchor\" href=\"#语法-13\">#</a> 语法</h4>\n<p><ins>The children of immigrants</ins> <ins>tend to be</ins>.{.dot, .warming} <ins>bilingual and proficient</ins> <ins wavy=\"\">in English.</ins></p>\n<ul>\n<li>主语: The children of immigrants</li>\n<li>谓语: are quickly fitting into</li>\n<li>宾语: this common culture</li>\n</ul>\n<h4 id=\"词汇-13\"><a class=\"anchor\" href=\"#词汇-13\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">bilingual</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">双语的；使用两种语言的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">proficient (in)</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">熟练的；精通的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-13\"><a class=\"anchor\" href=\"#翻译-13\">#</a> 翻译</h4>\n<p>移民者的孩子往往是双语的而且熟练英语</p>\n<p>** 分析:**proficient 修饰 English</p>\n<h4 id=\"标准翻译-13\"><a class=\"anchor\" href=\"#标准翻译-13\">#</a> 标准翻译</h4>\n<p>移民的孩子往往会说两种语言，精通英语。</p>\n<h3 id=\"语句-3-2\"><a class=\"anchor\" href=\"#语句-3-2\">#</a> 语句 3</h3>\n<p>“By the third generation, the original language is lost in the majority of immigrant families.”</p>\n<h4 id=\"语法-14\"><a class=\"anchor\" href=\"#语法-14\">#</a> 语法</h4>\n<p>“<ins>By the third generation</ins>.{.primary}, <ins>the original language</ins> <ins>is</ins>.{.dot .warming} lost <mark>in the majority of immigrant families.”</mark></p>\n<p>状语: By the third generation</p>\n<ul>\n<li>主语: the original language</li>\n<li>谓语: is</li>\n<li>宾语: lost in the majority of immigrant families</li>\n</ul>\n<h4 id=\"词汇-14\"><a class=\"anchor\" href=\"#词汇-14\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n</table>\n<h4 id=\"翻译-14\"><a class=\"anchor\" href=\"#翻译-14\">#</a> 翻译</h4>\n<p>到了第三代，大部分移民家庭中母语已经消失</p>\n<h4 id=\"标准翻译-14\"><a class=\"anchor\" href=\"#标准翻译-14\">#</a> 标准翻译</h4>\n<p>“到了第三代，大多数移民家庭的母语就消失了。”</p>\n<h3 id=\"语句-4-2\"><a class=\"anchor\" href=\"#语句-4-2\">#</a> 语句 4</h3>\n<p>Hence the description of America as a “graveyard” for languages.</p>\n<h4 id=\"语法-15\"><a class=\"anchor\" href=\"#语法-15\">#</a> 语法</h4>\n<p>Hence the description of America as a “graveyard” for languages.</p>\n<ul>\n<li>主语: the description of America</li>\n<li>谓语: as</li>\n<li>宾语: a “graveyard” for languages</li>\n</ul>\n<h4 id=\"词汇-15\"><a class=\"anchor\" href=\"#词汇-15\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">elevating</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">有趣的；发人深省的；启发的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-15\"><a class=\"anchor\" href=\"#翻译-15\">#</a> 翻译</h4>\n<p>因此，美国被描述为语言的 &quot;墓地&quot;</p>\n<h4 id=\"标准翻译-15\"><a class=\"anchor\" href=\"#标准翻译-15\">#</a> 标准翻译</h4>\n<p>因此，美国被描述为语言的 “墓地”。</p>\n<h2 id=\"第四段\"><a class=\"anchor\" href=\"#第四段\">#</a> 第四段</h2>\n<h3 id=\"语句-1-3\"><a class=\"anchor\" href=\"#语句-1-3\">#</a> 语句 1</h3>\n<p>By 1996 foreign-born immigrants [who had arrived before 1970].{.aquo} <ins>had</ins>.{.wavy} <ins>a home ownership rate of 75.6 percent</ins>.{.wavy},<br />\nhigher than the 69.8 percent rate among native-born Americans</p>\n<h4 id=\"语法-16\"><a class=\"anchor\" href=\"#语法-16\">#</a> 语法</h4>\n<p>By 1996 foreign-born immigrants who had arrived before 1970 had a home ownership rate of 75.6 percent, higher than the 69.8 percent rate among native-born Americans</p>\n<p>状语: Immigrants are quickly fitting into this common culture,</p>\n<p>主句: By 1996 foreign-born immigrants had a home ownership rate of 75.6 percent</p>\n<ul>\n<li>主语: By 1996 foreign-born immigrants</li>\n<li>谓语: had</li>\n<li>宾语: home ownership rate of 75.6 percent</li>\n</ul>\n<p>同位语: which may not be altogether elevating but is hardly poisonous</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: may not be; is</li>\n<li>状语: altogether elevating; poisonous</li>\n</ul>\n<h4 id=\"词汇-16\"><a class=\"anchor\" href=\"#词汇-16\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">elevating</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">有趣的；发人深省的；启发的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-16\"><a class=\"anchor\" href=\"#翻译-16\">#</a> 翻译</h4>\n<p>移民者快速的融入大众文化，可能没有有趣但也没有那么有害</p>\n<p>** 分析:** 不要少翻译单词</p>\n<h4 id=\"标准翻译-16\"><a class=\"anchor\" href=\"#标准翻译-16\">#</a> 标准翻译</h4>\n<p>移民们很快就融入了这种共同的文化，这种文化也许没有那么高尚，但也没有那么有害。</p>\n<h3 id=\"语句-1-4\"><a class=\"anchor\" href=\"#语句-1-4\">#</a> 语句 1</h3>\n<p>Immigrants are quickly fitting into this common culture, which may not be altogether elevating but is hardly poisonous.</p>\n<h4 id=\"语法-17\"><a class=\"anchor\" href=\"#语法-17\">#</a> 语法</h4>\n<p><ins>Immigrants</ins> <ins>are quickly fitting into</ins>.{.dot .warming} <ins>this common culture</ins>.{.wavy}, [which may not be altogether elevating but is hardly poisonous].{.aqua}.</p>\n<p>状语: Immigrants are quickly fitting into this common culture,</p>\n<p>主句: Immigrants</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: are quickly fitting into</li>\n<li>宾语: this common culture</li>\n</ul>\n<p>同位语: which may not be altogether elevating but is hardly poisonous</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: may not be; is</li>\n<li>状语: altogether elevating; poisonous</li>\n</ul>\n<h4 id=\"词汇-17\"><a class=\"anchor\" href=\"#词汇-17\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">elevating</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">有趣的；发人深省的；启发的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-17\"><a class=\"anchor\" href=\"#翻译-17\">#</a> 翻译</h4>\n<p>移民者快速的融入大众文化，可能没有有趣但也没有那么有害</p>\n<p>** 分析:** 不要少翻译单词</p>\n<h4 id=\"标准翻译-17\"><a class=\"anchor\" href=\"#标准翻译-17\">#</a> 标准翻译</h4>\n<p>移民们很快就融入了这种共同的文化，这种文化也许没有那么高尚，但也没有那么有害。</p>\n<h3 id=\"语句-1-5\"><a class=\"anchor\" href=\"#语句-1-5\">#</a> 语句 1</h3>\n<p>Immigrants are quickly fitting into this common culture, which may not be altogether elevating but is hardly poisonous.</p>\n<h4 id=\"语法-18\"><a class=\"anchor\" href=\"#语法-18\">#</a> 语法</h4>\n<p><ins>Immigrants</ins> <ins>are quickly fitting into</ins>.{.dot .warming} <ins>this common culture</ins>.{.wavy}, [which may not be altogether elevating but is hardly poisonous].{.aqua}.</p>\n<p>状语: Immigrants are quickly fitting into this common culture,</p>\n<p>主句: Immigrants</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: are quickly fitting into</li>\n<li>宾语: this common culture</li>\n</ul>\n<p>同位语: which may not be altogether elevating but is hardly poisonous</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: may not be; is</li>\n<li>状语: altogether elevating; poisonous</li>\n</ul>\n<h4 id=\"词汇-18\"><a class=\"anchor\" href=\"#词汇-18\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">elevating</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">有趣的；发人深省的；启发的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-18\"><a class=\"anchor\" href=\"#翻译-18\">#</a> 翻译</h4>\n<p>移民者快速的融入大众文化，可能没有有趣但也没有那么有害</p>\n<p>** 分析:** 不要少翻译单词</p>\n<h4 id=\"标准翻译-18\"><a class=\"anchor\" href=\"#标准翻译-18\">#</a> 标准翻译</h4>\n<p>移民们很快就融入了这种共同的文化，这种文化也许没有那么高尚，但也没有那么有害。</p>\n<h3 id=\"语句-1-6\"><a class=\"anchor\" href=\"#语句-1-6\">#</a> 语句 1</h3>\n<p>Immigrants are quickly fitting into this common culture, which may not be altogether elevating but is hardly poisonous.</p>\n<h4 id=\"语法-19\"><a class=\"anchor\" href=\"#语法-19\">#</a> 语法</h4>\n<p><ins>Immigrants</ins> <ins>are quickly fitting into</ins>.{.dot .warming} <ins>this common culture</ins>.{.wavy}, [which may not be altogether elevating but is hardly poisonous].{.aqua}.</p>\n<p>状语: Immigrants are quickly fitting into this common culture,</p>\n<p>主句: Immigrants</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: are quickly fitting into</li>\n<li>宾语: this common culture</li>\n</ul>\n<p>同位语: which may not be altogether elevating but is hardly poisonous</p>\n<ul>\n<li>主语: Immigrants</li>\n<li>谓语: may not be; is</li>\n<li>状语: altogether elevating; poisonous</li>\n</ul>\n<h4 id=\"词汇-19\"><a class=\"anchor\" href=\"#词汇-19\">#</a> 词汇</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">词汇</th>\n<th style=\"text-align:left\">词性</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">elevating</td>\n<td style=\"text-align:left\">adj</td>\n<td style=\"text-align:left\">有趣的；发人深省的；启发的</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"翻译-19\"><a class=\"anchor\" href=\"#翻译-19\">#</a> 翻译</h4>\n<p>移民者快速的融入大众文化，可能没有有趣但也没有那么有害</p>\n<p>** 分析:** 不要少翻译单词</p>\n<h4 id=\"标准翻译-19\"><a class=\"anchor\" href=\"#标准翻译-19\">#</a> 标准翻译</h4>\n<p>移民们很快就融入了这种共同的文化，这种文化也许没有那么高尚，但也没有那么有害。</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "考研英语",
                "2006"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/Linux/Makefile%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "url": "https://to-ywz.github.io/Embedded/Linux/Makefile%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/",
            "title": "Makefile基本使用",
            "date_published": "2023-07-02T22:31:44.000Z",
            "content_html": "<h1 id=\"引入makefile的原因\"><a class=\"anchor\" href=\"#引入makefile的原因\">#</a> 引入 Makefile 的原因</h1>\n<p>在使用 各种各样的 IDE 的时候往往只需要点击一个编译按键就可以实现编译</p>\n<p>但如果使用自组的编译链，编译一个文件就需要执行一条下面这个语句</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> c c.c</pre></td></tr></table></figure><p>但是，嵌入式开发往往有大量的文件，总不能一个个文件罗列<br />\n而且大量的文件不仅容易少写，而且会占用大量的编译时间，每次每个文件都要重新编译</p>\n<p>因此 一套用于 规定 如何编译的规则 ——Makefile 就应运而生啦</p>\n<h2 id=\"一个c语言例子\"><a class=\"anchor\" href=\"#一个c语言例子\">#</a> 一个 C 语言例子</h2>\n<p>b.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">call_b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CC\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>c.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">call_b</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BBB\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于这个程序，编译文件需要执行下面的语句，就可以实现编译<br />\n正常来说 .c 程序 ==&gt; 得到可执行程序 它们之间要经过四个步骤:</p>\n<ul>\n<li>1. 预处理</li>\n<li>2. 编译</li>\n<li>3. 汇编</li>\n<li>4. 链接</li>\n</ul>\n<p>事实上我们常把前三个步骤称为编译，各种.o 文件的拼接称为链接<br />\n在 gcc 中相关命令为<br />\n编译</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> c.o c.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> b.o b.c</pre></td></tr></table></figure><p>链接</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> mian c.o b.o</pre></td></tr></table></figure><h1 id=\"makfile-的基本规则\"><a class=\"anchor\" href=\"#makfile-的基本规则\">#</a> Makfile 的基本规则</h1>\n<h2 id=\"如何减少编译时间\"><a class=\"anchor\" href=\"#如何减少编译时间\">#</a> 如何减少编译时间</h2>\n<p>上面说到 编译多个文件的时候，可能只修改了一个文件，这样可以大大的减少编译时间</p>\n<p>那么问题来了，Makefile 是如何知道哪些文件被更新了呢？</p>\n<p>其实很简单，因为每次编译都会生成 .o 文件，将.o 文件和 相对应的.c 文件进行时间比较，如果.c 更新则编译.<br />\n 所有的.o 都和最终的二进制文件比较，要是有更新的.o 就产生链接</p>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<h3 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h3>\n<p>Makfile 最基本的语法是规则，规则:</p>\n<pre><code class=\"language-Makefile\">目标 : 依赖1 依赖2 ...\n[TAB]命令\n</code></pre>\n<p>当依赖比目标新的时候，执行目标下面对应的依赖命令，并且 所有目标都可以单独执行</p>\n<p>例如，上面的 C 语言例子，编译 过程写成 Makefile</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 当 main.o 或 func.o 有一个或多个比 test 新的时候会执 当前目标下面的语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>test: main.o func.o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> main.o func.o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 当 main.c 比 main.o 新</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>main.o: main.c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> main.o main.c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># func.c 比 func.o 则更新 func.o</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>func.o: func.c</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> func.o func.c</pre></td></tr></table></figure><p>执行后会在终端显示下面的内容，当然文件名却决于自己写的文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> main.o main.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> func.o func.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> main.o func.o</pre></td></tr></table></figure><p>当我们修改  <code>main.c</code>  文件时，再次执行 make, 就会发现只有 第一和第二个规则被执行了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> main.o main.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> main.o func.o</pre></td></tr></table></figure><p>如果同时修改  <code>main.c</code>  和  <code>func.c</code>  就会编译两个文件，终端和一开始的界面类似</p>\n<p>当执行 make 命令时，make 会优先查找当前目录下名为 Makefile 的文件，然后根据规则来执行判断和命令</p>\n<h3 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h3>\n<p>在上面我们只有两个文件，所以我们的目标所需的依赖可以手动列出.<br />\n 但这十分不合理，假如一个目标文件所依赖的依赖文件很多，那样岂不是要写很多规则</p>\n<p>Makefile 提供了通配符的语法，来解决这个问题，下面时常见的的</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">符号</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">%.o</td>\n<td style=\"text-align:left\">表示所用的.o 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%.c</td>\n<td style=\"text-align:left\">表示所有的.c 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$@</td>\n<td style=\"text-align:left\">表示目标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$&lt;</td>\n<td style=\"text-align:left\">表示第 1 个依赖文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$^</td>\n<td style=\"text-align:left\">表示所有依赖文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$?</td>\n<td style=\"text-align:left\">表示比目标还要新的依赖文件列表</td>\n</tr>\n</tbody>\n</table>\n<p>运用上面的语法来改写一下上面的 Makefile</p>\n<p>在此之前先添加一个 fun_b.c 的文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun_b</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is fun_b\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来对 Makefile 进行改造</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 当 main.o 或 func.o 有一个或多个比 test 新的时候会执 当前目标下面的语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>test: main.o func.o fun_b.o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> $^</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 当任一 .c 比 对应的 .o 新 就更新 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>%.o: %.c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$@</span> $<span class=\"token operator\">&lt;</span></pre></td></tr></table></figure><p>执行后终端结果为</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> main.o main.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> func.o func.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> fun_b.o fun_b.c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> main.o func.o fun_b.o</pre></td></tr></table></figure><h3 id=\"假想目标-phony\"><a class=\"anchor\" href=\"#假想目标-phony\">#</a> 假想目标 .PHONY</h3>\n<p>当我们编译之后会产生大量的  <code>.o</code>  文件，可以使用下面这条命令进行删除</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> *.o</pre></td></tr></table></figure><p>但是每次都输入还要输入一次，而且可能还会有其它后缀的文件，有可能误删或者少删</p>\n<p>我们试想一下，Makefile 是通过查询目标文件是否存在来判断是否要执行生成依赖的命令<br />\n并且，Makfile 本质也是将命令发到 bash 中执行，那么可以也可以发送 <code>rm -rf *.o</code>  指令<br />\n那么如果 定义一个目标，但是对应的生成依赖的命令行不生成依赖文件，就可以反复调用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 当 main.o 或 func.o 有一个或多个比 test 新的时候会执 当前目标下面的语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>test: main.o func.o fun_b.o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-o</span> <span class=\"token builtin class-name\">test</span> $^</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 当任一 .c 比 对应的 .o 新 就更新 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>%.o: %.c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tgcc <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$@</span> $<span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>clean:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> *.o *.exe</pre></td></tr></table></figure><p>执行某个目标需要使用 <strong> <code>make [目标]</code> </strong> 来实现，如果添加目标，默认为第一个目标<br />\n当我们执行  <code>make clean</code>  时，makefile 检测不到 clean 文件，然后就会执行对应的删除语句</p>\n<p>但是这个逻辑还存在一个问题。如果，文件夹下存在名为 clean 的文件，那么 <code>make clean</code>  将无法顺利执行<br />\n我们在该目录下创建一个名为 “clean” 的文件，然后重新执行:  <code>make</code>  然后  <code>make clean</code> <br />\n 结果 (会有下面的提示):</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>make: <span class=\"token string\">'clean'</span> is up to date.</pre></td></tr></table></figure><p>其实可以理解，为什么存在 clean 文件的时候会执行失败，当文件存在并且没有依赖文件，Makfile 就没有办法判断文件的新旧<br />\n要解决这个问题就需要使用到 <code>.PHONY</code>  关键字，表示这是一个假象目标，不会去对比和检测文件而是直接执行</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin-target builtin\">.PHONY</span><span class=\"token punctuation\">:</span> clean <span class=\"token comment\"># 把 clean 定义为假象目标.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 就不会判断名为 “clean” 的文件是否存在</span></pre></td></tr></table></figure><h3 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h3>\n<h4 id=\"vpath\"><a class=\"anchor\" href=\"#vpath\">#</a> vpath</h4>\n<p>作用：用于定义 make 的查找路径.</p>\n<p>make 的查找路径默认为当前路径，而在我们的工程中通常会把原文件放置于不同的目录下.<br />\n 这使得如果要引用某个文件，我们就需要连同文件的目录一块给出，这就很科学.<br />\n 例如，我们把某个文件移动到了其他的目录下，我们就需要去修改 makefile<br />\n 关键字 <code>vpath</code>  就可以实现这个功能</p>\n<h5 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h5>\n<p>1. <code>vpath &lt;pattern&gt; &lt;directories&gt;</code>  为符合 pattern 的文件指定 directories 的搜索路径；<br />\n2. <code>vpath &lt;pattern&gt;</code>  清除符合 pattern 文件的搜索路径；<br />\n3. <code>vpath</code>  清除所有已设置好的搜索路径。</p>\n<h3 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h3>\n<p>Makefile 是一种脚本语言，所以必然就会有变量</p>\n<p>Makefile 变量分为两种 即时变量和延时变量</p>\n<h4 id=\"即时变量\"><a class=\"anchor\" href=\"#即时变量\">#</a> 即时变量</h4>\n<p>语法:  <code>A := xxx</code></p>\n<p>对于即使变量使用  <code>:=</code>  表示，它的值在定义的时候已经被确定了</p>\n<h4 id=\"延时变量\"><a class=\"anchor\" href=\"#延时变量\">#</a> 延时变量</h4>\n<p>语法:  <code>B = xxx</code></p>\n<p>对于延时变量使用 <code>=</code>  表示。它只有在使用到的时候才确定，在定义 <code>/</code>  等于时并没有确定下来</p>\n<p>想使用变量的时候使用 <code>$</code>  来引用，如果不想看到命令是，可以在命令的前面加上 <code>@</code> 符号，就不会显示命令本身.</p>\n<p>当我们执行 make 命令的时候，make 这个指令本身，会把整个 Makefile 读进去，进行全部分析，然后解析里面的变量.</p>\n<h4 id=\"常用变量\"><a class=\"anchor\" href=\"#常用变量\">#</a> 常用变量</h4>\n<p>常用的变量的定义如下</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:=</td>\n<td style=\"text-align:left\">即时变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td style=\"text-align:left\">延时变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+=</td>\n<td style=\"text-align:left\">附加，它是即时变量还是延时变量取决于前面的定义</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?=:</td>\n<td style=\"text-align:left\">如果这个变量在前面已经被定义了，这句话就会不会起效果，</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"例如\"><a class=\"anchor\" href=\"#例如\">#</a> 例如</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A :<span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>C<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>B <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>C<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>C <span class=\"token operator\">=</span> abc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>D <span class=\"token operator\">=</span> D</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>D ?<span class=\"token operator\">=</span> DD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>all:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t@echo A <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>A<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t@echo B <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>B<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t@echo D <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>D<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>C <span class=\"token operator\">+=</span> <span class=\"token number\">123</span></pre></td></tr></table></figure><p>让我们分析一下相关的逻辑:</p>\n<p>首先 <code>A</code>  为即时变量，在定义期间确定，开始时  <code>C</code>  值为 空，所以  <code>A</code>  值必为空</p>\n<p><code>B</code>  为延时变量，只有当使用到时它才会被确定.<br />\n 在这个文件中，当执行 make 时，会解析 Makefile 里面的所用变量，首先会解析到  <code>C=abc</code> , 然后再解析到 <code>C+=123</code> <br />\n 此时 <code>C=abc 123</code> , 当执行到 <code>@echo B = $(B)</code>  时， <code>B</code>  的值为 abc 123</p>\n<p><code>D ?= DD</code> ,  <code>D</code>  变量在前面定义了 <code>D=D</code> , 所以 <code>D</code>  的值为 <code>D</code> <br />\n 如果再前面去掉 <code>D=D</code>  这句话，那么 <code>D</code>  的值最后为 <code>DD</code></p>\n<p>使用  <code>make</code>  指令，执行后命令行终端显示如下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>B <span class=\"token operator\">=</span> abc <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>D <span class=\"token operator\">=</span> D</pre></td></tr></table></figure><h3 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h3>\n<p>Makefile 内置很多函数，使用 <code>$</code>  来引用函数，接下去介绍几个常用的函数</p>\n<h4 id=\"foreach\"><a class=\"anchor\" href=\"#foreach\">#</a> foreach</h4>\n<p>语法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>foreach var,list,text<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>前两个参数， <code>var</code>  和 <code>list</code> , 将首先扩展，注意最后一个参数  <code>text</code>  此时不扩展<br />\n接着，对每一个  <code>list</code>  扩展产生的字，将用来为  <code>var</code>  扩展后命名的变量赋值<br />\n然后  <code>text</code>  引用该变量扩展；因此它每次扩展都不相同。结果是由空格隔开的  <code>text</code></p>\n<h5 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>filenames <span class=\"token operator\">=</span> main func fun_b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>objs <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>foreach f, <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>filenames<span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">$(</span>f<span class=\"token punctuation\">)</span>.o<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>all:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t@echo objs <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>objs<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>执行结果</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>objs <span class=\"token operator\">=</span> main.o func.o fun_b.o</pre></td></tr></table></figure><h4 id=\"filterfilter-out\"><a class=\"anchor\" href=\"#filterfilter-out\">#</a> filter/filter-out</h4>\n<p>语法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>filter pattern<span class=\"token punctuation\">..</span>.,text<span class=\"token variable\">)</span></span>     <span class=\"token comment\"># 在 text 中取出符合 patten 格式的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>filter-out pattern<span class=\"token punctuation\">..</span>.,text<span class=\"token variable\">)</span></span> <span class=\"token comment\"># 在 text 中取出不符合 patten 格式的值</span></pre></td></tr></table></figure><h5 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">file</span> <span class=\"token operator\">=</span> a b c d/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>D <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>filter %/, <span class=\"token punctuation\">$(</span>C<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span> <span class=\"token comment\"># 选出 有 / 符号的部分输出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>E <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>filter-out %/, <span class=\"token punctuation\">$(</span>C<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span> <span class=\"token comment\"># 选出 没有  / 符号的部分输出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>all:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        @echo D <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>D<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        @echo E <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>E<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>执行结果</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>D <span class=\"token operator\">=</span> d/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>E <span class=\"token operator\">=</span> a b c</pre></td></tr></table></figure><h4 id=\"wildcard\"><a class=\"anchor\" href=\"#wildcard\">#</a> wildcard</h4>\n<p>语法如下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>wildcard pattern<span class=\"token variable\">)</span></span> <span class=\"token comment\"># pattern 定义了文件名的格式，wildcard 取出其中存在的文件</span></pre></td></tr></table></figure><h5 id=\"示例-3\"><a class=\"anchor\" href=\"#示例-3\">#</a> 示例</h5>\n<p>在执行示例之前，需将在该目录下创建三个文件: a.c b.c c.c</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>files <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>wildcard *.c<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>all:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    @echo files <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>files<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>执行结果:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>files <span class=\"token operator\">=</span> a.c b.c c.c</pre></td></tr></table></figure><p>也可以用 wildcard 函数来判断，真实存在的文件<br />\n这样可以避免出现编译到不存在的文件然后报错</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>files2 <span class=\"token operator\">=</span> a.c b.c c.c d.c e.c  abc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>files3 <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>wildcard <span class=\"token punctuation\">$(</span>files2<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>all:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    @echo files3 <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>files3<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"patsubst\"><a class=\"anchor\" href=\"#patsubst\">#</a> patsubst</h4>\n<h5 id=\"示例-4\"><a class=\"anchor\" href=\"#示例-4\">#</a> 示例</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>files2  <span class=\"token operator\">=</span> a.c b.c c.c d.c e.c abc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dep_files <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>patsubst %.c,%.d,<span class=\"token punctuation\">$(</span>files2<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>all:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    @echo dep_files <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>dep_files<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>执行结果:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dep_files <span class=\"token operator\">=</span> a.d b.d c.d d.d e.d abc</pre></td></tr></table></figure><h4 id=\"addprefix\"><a class=\"anchor\" href=\"#addprefix\">#</a> addprefix</h4>\n<p>语法:  <code>$(addprefix &lt;prefix&gt;, &lt;name-1&gt;, &lt;name-2&gt;...&lt;name-n&gt;)</code></p>\n<p>作用：把前缀 prefix 加到 name 前面</p>\n<p>例如，下面这段代码，最终  <code>OBJECTS = build/main.o</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BUILD_DIR <span class=\"token operator\">=</span> build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OBJECTS <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>addprefix <span class=\"token punctuation\">$(</span>BUILD_DIR<span class=\"token punctuation\">)</span>/, main.o<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"notdir\"><a class=\"anchor\" href=\"#notdir\">#</a> notdir</h4>\n<p>语法:  <code>$(notdir , &lt;name-1&gt;, &lt;name-2&gt;...&lt;name-n&gt; )</code></p>\n<p>作用：字符串中的路径去掉</p>\n<p>例如，下面这段代码，最终  <code>OBJECTS = main.c</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C_SOURCES <span class=\"token operator\">=</span> src/main.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OBJECTS <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>notdir<span class=\"token punctuation\">$(</span>C_SOURCES<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"dir\"><a class=\"anchor\" href=\"#dir\">#</a> dir</h4>\n<p>语法:  <code>$(dir Name)</code></p>\n<p>作用：从文件名序列 <code>NAMES…</code>  中取出各个文件名的目录部，包含 <code>/</code></p>\n<p>例如，下面这段代码，最终 <code>OBJECTS=06_example/src/</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>OBJECTS <span class=\"token operator\">=</span>   <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">dir</span>  06_example/src/main.c<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a> sort</h4>\n<p>语法:  <code>$(sort &lt;List&gt;)</code></p>\n<p>作用：给字串 “LIST” 中的单词以首字母为准进行排序 (升序), 并且去除重复</p>\n<p>例如，下面这段代码，最终 <code>OBJECTS=06_example/src/</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C_SOURCE <span class=\"token operator\">=</span> 06_example/src/main.c \t<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>06_example/src/func_a.c \t<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>06_example/src/func_b.c \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>OBJECTS <span class=\"token operator\">=</span>   <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">sort</span> <span class=\"token punctuation\">$(</span>dir <span class=\"token punctuation\">$(</span>C_SOURCE<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"一个makefile例子\"><a class=\"anchor\" href=\"#一个makefile例子\">#</a> 一个 Makefile 例子</h2>\n<p>看了这么多，来试着写一份 makefile</p>\n<p>咱们规定 所有的  <code>.c</code>  都存放在  <code>src</code>  文件夹中；所有的  <code>.h</code>  文件都存放在  <code>inc</code>  文件夹中；所有 编译生成的 文件都要存放在  <code>obj</code>  中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># target</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 你的项目</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TARGET <span class=\"token operator\">=</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># paths</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 过程文件的存放路径，以及.exe</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BUILD_DIR <span class=\"token operator\">=</span> build</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># source</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">######################################</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#.c 源码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># C sources</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>C_SOURCES <span class=\"token operator\">=</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>src/main.c\t<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>src/func_a.c <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>src/func_b.c <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>src/func_c.c </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 编译器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>CC <span class=\"token operator\">=</span> gcc</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># CFLAGS</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># 头文件 -I 不能省略</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># C includes</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>C_INCLUDES <span class=\"token operator\">=</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token parameter variable\">-IInc</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 优化等级</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>OPT <span class=\"token operator\">=</span> <span class=\"token parameter variable\">-O0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 统一生成配置变量</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>CFLAGS <span class=\"token operator\">=</span>  <span class=\"token variable\"><span class=\"token variable\">$(</span>C_INCLUDES<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>OPT<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># 最终目标文件</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>all: <span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_DIR<span class=\"token variable\">)</span></span>/<span class=\"token variable\"><span class=\"token variable\">$(</span>TARGET<span class=\"token variable\">)</span></span>.exe</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\"># 编译应用</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># .o 文件列表</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># addprefix 负责给 每个对应的.c 生成的.o 依赖文件添加上存储路径</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># C_SOURCES 里所有以.c 结尾的文件替换为.o 结尾的文件</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># main.c -> build/main.o</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>OBJECTS <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>addprefix <span class=\"token punctuation\">$(</span>BUILD_DIR<span class=\"token punctuation\">)</span>/,<span class=\"token punctuation\">$(</span>notdir <span class=\"token punctuation\">$(</span>C_SOURCES:.c<span class=\"token operator\">=</span>.o<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># 将 .c 文件 所在的目录进行汇总和去重，添加到查找路径中</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>vpath %.c <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">sort</span> <span class=\"token punctuation\">$(</span>dir <span class=\"token punctuation\">$(</span>C_SOURCES<span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_DIR<span class=\"token variable\">)</span></span>/%.o: %.c Makefile <span class=\"token operator\">|</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_DIR<span class=\"token variable\">)</span></span> </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token variable\"><span class=\"token variable\">$(</span>CC<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>CFLAGS<span class=\"token variable\">)</span></span> <span class=\"token parameter variable\">-c</span>  $<span class=\"token operator\">&lt;</span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$@</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_DIR<span class=\"token variable\">)</span></span>/<span class=\"token variable\"><span class=\"token variable\">$(</span>TARGET<span class=\"token variable\">)</span></span>.exe: <span class=\"token variable\"><span class=\"token variable\">$(</span>OBJECTS<span class=\"token variable\">)</span></span> Makefile</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token variable\"><span class=\"token variable\">$(</span>CC<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>CFLAGS<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>OBJECTS<span class=\"token variable\">)</span></span> <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$@</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_DIR<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">mkdir</span> <span class=\"token variable\">$@</span>\t\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># clean up</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">#######################################</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.PHONY:</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>clean:</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token parameter variable\">-rm</span> <span class=\"token parameter variable\">-fR</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>BUILD_DIR<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># *** EOF ***</span></pre></td></tr></table></figure><hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "Makefile",
                "Makefile"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/",
            "url": "https://to-ywz.github.io/Embedded/STM32/GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/",
            "title": "GCC编译过程",
            "date_published": "2023-07-02T15:33:07.000Z",
            "content_html": "<h1 id=\"gcc-编译过程\"><a class=\"anchor\" href=\"#gcc-编译过程\">#</a> GCC 编译过程</h1>\n<h2 id=\"编译步骤\"><a class=\"anchor\" href=\"#编译步骤\">#</a> 编译步骤</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/001_4_steps.3jiznekrxq2.jpg\" alt=\"001_4_steps\" /></p>\n<p>一般来说，编译步骤分为</p>\n<ol>\n<li>预处理：将头文件和宏进行替换</li>\n<li>编译：将预编译后的 C 语言文件，编译为汇编文件</li>\n<li>汇编：将汇编文件编译为 n 个二进制文件</li>\n<li>链接：将二进制文件链接为一个</li>\n</ol>\n<h2 id=\"gcc-的使用方法\"><a class=\"anchor\" href=\"#gcc-的使用方法\">#</a> GCC 的使用方法</h2>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc [option] filename</pre></td></tr></table></figure><h3 id=\"21-gcc使用示例\"><a class=\"anchor\" href=\"#21-gcc使用示例\">#</a> 2.1 gcc 使用示例</h3>\n<p>例如，我们要 编译一个</p>\n<pre><code>gcc main.c                   // 输出一个名为a.out的可执行程序, 然后可以执行./a.out\ngcc -o hello main.c          // 输出名为hello的可执行程序, 然后可以执行./hello\ngcc -o hello main.c -static  // 静态链接\n\ngcc -c -o hello.o main.c  // 先编译(不链接)\ngcc -o hello hello.o       // 再链接\n</code></pre>\n<p>静态链接会将涉及到的库  <code>.os</code>  文件都装载到二进制文件中，所以文件会相对的大得多<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.47ptc5o31xq0.jpg\" alt=\"image\" /><br />\n 但是在 windows, 动态编译和静态编译文件大小一致，可能和库文件的构成相关<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.28wduvqtc49w.jpg\" alt=\"image\" /></p>\n<h3 id=\"gcc-常用选项\"><a class=\"anchor\" href=\"#gcc-常用选项\">#</a> gcc 常用选项</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:center\">查看 gcc 编译器的版本，显示 gcc 执行时的详细过程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-o <code>&lt;file&gt;</code></td>\n<td style=\"text-align:center\">指定输出文件名为 file, 这个名称不能跟源文件名同名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-E</td>\n<td style=\"text-align:center\">只预处理，不会编译、汇编、链接 t</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-S</td>\n<td style=\"text-align:center\">只编译，不会汇编、链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td style=\"text-align:center\">编译和汇编，不会链接</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"手动编译流程\"><a class=\"anchor\" href=\"#手动编译流程\">#</a> 手动编译流程</h4>\n<p>如一开始所说的一个 c/c++ 文件要经过 预处理 、 编译 、 汇编 和 链接 才能变成可执行文件</p>\n<h5 id=\"预处理\"><a class=\"anchor\" href=\"#预处理\">#</a> 预处理</h5>\n<p>在 C/C++ 源文件中，以 “#” 开头的语句被称为预处理命令<br />\n例如，包含命令 “#include”、宏定义命令 “#define”、条件编译命令 “#if”、“#ifdef” 等</p>\n<p>预处理就是将要包含 (include) 的文件插入原文件中、将宏定义展开、根据条件编译命令选择要使用的代码，最后将这些东西输出到一个 “.i” 文件中等待进一步处理<br />\n在这一步不检测语法错误，在预处理之后文件还是  <code>C</code>  文件</p>\n<p>对应的指令为</p>\n<pre><code>gcc -E -o filename.i filename.c\n```makefile\n\n编译前的源文件\n```C\n#include &lt;stdio.h&gt;\n\n#define MAX_VALUE 10\n\nint main(int argc, char const *argv[])\n&#123;\n    printf(&quot;%d\\r\\n&quot;, MAX_VALUE);\n\n    return 0;\n&#125;\n\n</code></pre>\n<p>编译后，可以看到  <code>printf</code>  中的  <code>MAX_VALUE</code>  被替换为 10<br />\n 而且代码量明显多了很多东西，这些大部分都是  <code>stdio</code>  内部的文件<br />\n这也告诉我们，一句输出并没有想象的那么简单，机器背后做了很多的任务<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1o2aauvs9nkw.jpg\" alt=\"image\" /></p>\n<h5 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h5>\n<p>编译是将预处理过的 C/C++ 代码 (例如上述的 “.i” 文件)“翻译” 成汇编代码<br />\n翻译的代码长短和内存大小，取决于优化等级和编译器的算法<br />\n在这一步就会进行语法检测，毕竟是一种语言翻译为另一种语言，先得检测词法、语法以及语意，确保原语言没有错误之后才能进行翻译</p>\n<p>对应的指令:</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc -S -o filename.s filename.i</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// 或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gcc -S -o filename.s filename.c</pre></td></tr></table></figure><p>编译后上面的.i 文件变成，将会生成对应的汇编文件<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1215pjqeayjk.jpg\" alt=\"image\" /></p>\n<p>如果添加  <code>-O1</code>  的优化选项就会出现不一样的代码，效果如下图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.57dvtombnc40.jpg\" alt=\"image\" /></p>\n<p>按照 gcc 的介绍，越高优先级的代码执行效率越高，占的 RAM 也会减少</p>\n<p>但是，毕竟编译器不是人，它解决问题的思路很有可能是局部最优，全局贪心，这就可能导致一些累加逻辑被优化<br />\n例如:</p>\n<pre><code class=\"language-C\">void iic_delay(uitn8_t ntime)\n&#123;\n  while(ntime--)\n    ;\n&#125;\n</code></pre>\n<p>对于上面这种代码 使用  <code>-O3</code>  的优化等级，可能就会被优化<br />\n不仅如此，越高优先级的优化，在代码调试的时候就会存在越大的困难，因为生成汇编文件已经和原本的 C 语言相差甚远，尽管能正常执行，但一旦出错就很难定位错误</p>\n<h6 id=\"优化参数表\"><a class=\"anchor\" href=\"#优化参数表\">#</a> 优化参数表</h6>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>功能</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>O0</td>\n<td>不进行优化</td>\n<td>默认不加就是 O0</td>\n</tr>\n<tr>\n<td>O1</td>\n<td>优化等级 1</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>O2</td>\n<td>优化等级 2</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>O3</td>\n<td>优化等级 3</td>\n<td>\\</td>\n</tr>\n<tr>\n<td>Og</td>\n<td>优化等级 1, 并生成调试信息</td>\n<td>在 O1 优化的基础上保留调试信息，当然要配合 <code>-g</code>  一起使用</td>\n</tr>\n<tr>\n<td>Os</td>\n<td>优化等级 2, 去掉反向优化</td>\n<td>不是所有的优化都会减小空间，当出现优化反而变大可以使用 - Os</td>\n</tr>\n<tr>\n<td>Ofast</td>\n<td>优化等级 3, 通过非常规的方式进行优化</td>\n<td>通过打破一些国际标准 (比如一些数学函数的实现标准) 来实现的，一般不推荐</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h5>\n<p>汇编是将第二步输出的汇编代码翻译成符合一定格式的机器代码.<br />\n 在 Linux 系统上一般表现为 ELF 目标文件 (OBJ 文件).</p>\n<p>最明显的就是使用 keil 时会生成大量的 <code>xx.o</code>  文件，这些都是编译出来</p>\n<p>对应的执行命令如下:</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc -o filename.o filename.s</pre></td></tr></table></figure><p>“反汇编” 是指将机器代码转换为汇编代码，这个功能往往在程序调试中使用<br />\n反汇编的代码和汇编的代码大概率不相同</p>\n<h5 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h5>\n<p>链接就是将上步生成的 OBJ 文件和系统库的 OBJ 文件、库文件链接起来，最终生成了可以在特定平台运行的可执行文件</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gcc -o filename filename0.o filename1.o filename2.o</pre></td></tr></table></figure><h4 id=\"更快捷的方法\"><a class=\"anchor\" href=\"#更快捷的方法\">#</a> 更快捷的方法</h4>\n<p>一般来说我们不会需要查看 <code>x.i</code>  和 <code>x.s</code>  文件，所以可以跳过这两个步骤，直接生成 `x.o, 然后再进行链接<br />\n无需每一步指定生成规定的文件类型<br />\n例如:</p>\n<pre><code class=\"language-makefilefile\">gcc -c -o filename1.o filename1.c\ngcc -c -o filename2.o filename2.c\ngcc -o filename filename1.o filename2.o\n</code></pre>\n<h3 id=\"指定头文件目录\"><a class=\"anchor\" href=\"#指定头文件目录\">#</a> 指定头文件目录</h3>\n<p>在写代码的时候我们，必然会用到库函数，那么这些库函数在哪里呢</p>\n<p>一般来说，编译器会默认使用系统目录，也可以由用户指定<br />\n系统目录，一般是指，工具链里的某个 include 目录，如何确定呢？</p>\n<p>可以通过下面这条命令，让其在终端中输出</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'main()&#123;&#125;'</span><span class=\"token operator\">|</span> gcc <span class=\"token parameter variable\">-E</span> <span class=\"token parameter variable\">-v</span> -  // 它会列出头文件目录、库目录<span class=\"token punctuation\">(</span>LIBRARY_PATH<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果不想用标准库，那么可以使用  <code>-nostdinc</code>  来实现，不使用标准库来编译</p>\n<p>如果要添加自己的头文件库进入编译，可以使用下面这个语句</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-I &lt;IncDir></pre></td></tr></table></figure><h3 id=\"指定库文件\"><a class=\"anchor\" href=\"#指定库文件\">#</a> 指定库文件</h3>\n<p>同样的库文件，也是我们会用到，一般来说，这些库可能不是开源的 <code>.lib</code>  文件</p>\n<p>与头文件相同，编译器会默认使用系统目录，也可以由用户指定<br />\n可以通过下面这条语句定位使用的库在哪个文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'main()&#123;&#125;'</span><span class=\"token operator\">|</span> gcc <span class=\"token parameter variable\">-E</span> <span class=\"token parameter variable\">-v</span> -  // 它会列出头文件目录、库目录<span class=\"token punctuation\">(</span>LIBRARY_PATH<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果不想用标准库，那么可以使用 <code>-nostdlib</code>  来实现终端输出</p>\n<p>如果用户想要添加自己指定库文件目录<br />\n可以使用下面这条指令来指定自己的库文件所在目录</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-L &lt;LibDir></pre></td></tr></table></figure><p>与头文件不同，头文件本身只会被预处理到 <code>.c</code>  文件中，用于生成 <code>.i</code>  文件<br />\n但 <code>.lib</code>  文件不同它可以指定单个文件</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>-l  &lt;abc>   // 链接 libxx.so 或 lib.x</pre></td></tr></table></figure><hr />\n<p>目前对，GCC 的编译过程，了解的只有这些，可能以后会继续添加<br />\n如果文章中有什么不当或者错误，望大佬们斧正</p>\n<h1 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h1>\n<p>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTAwYXNrLm5ldC9wL3RfcGMvY291cnNlX3BjX2RldGFpbC92aWRlby92XzVmOTI4YjkzZTRiMDI4YmU1OTBiYTQ0MT9wcm9kdWN0X2lkPXBfNWY5MjZhNDllNGIwMGYxMzI4NmEwY2VjJmFtcDtjb250ZW50X2FwcF9pZD0mYW1wO3R5cGU9Ng==\">https://www.100ask.net/p/t_pc/course_pc_detail/video/v_5f928b93e4b028be590ba441?product_id=p_5f926a49e4b00f13286a0cec&amp;content_app_id=&amp;type=6</span><br />\n[2]  <code>《嵌入式Linux应用开发完全手册》</code> <br />\n[3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Fpaml0YW8vYXJ0aWNsZS9kZXRhaWxzLzEzMDExMTAwMyM6fjp0ZXh0PTEuJTIwZ2NjJUU0JUI4JUFEJUU2JThDJTg3JUU1JUFFJTlBJUU0JUJDJTk4JUU1JThDJTk2JUU3JUJBJUE3JUU1JTg4JUFCJUU3JTlBJTg0JUU1JThGJTgyJUU2JTk1JUIwJUU2JTlDJTg5JUVGJUJDJTlBLU8wJUUzJTgwJTgxLU8xJUUzJTgwJTgxLU8yJUUzJTgwJTgxLU8zJUUzJTgwJTgxLU9nJUUzJTgwJTgxLU9zJUUzJTgwJTgxLU9mYXN0JUUzJTgwJTgyLDIuJTIwJUU1JTlDJUE4JUU3JUJDJTk2JUU4JUFGJTkxJUU2JTk3JUI2JUVGJUJDJThDJUU1JUE2JTgyJUU2JTlFJTlDJUU2JUIyJUExJUU2JTlDJTg5JUU2JThDJTg3JUU1JUFFJTlBJUU0JUI4JThBJUU5JTlEJUEyJUU3JTlBJTg0JUU0JUJCJUJCJUU0JUJEJTk1JUU0JUJDJTk4JUU1JThDJTk2JUU1JThGJTgyJUU2JTk1JUIwJUVGJUJDJThDJUU1JTg4JTk5JUU5JUJCJTk4JUU4JUFFJUE0JUU0JUI4JUJBJTIwLU8wJUVGJUJDJThDJUU1JThEJUIzJUU2JUIyJUExJUU2JTlDJTg5JUU0JUJDJTk4JUU1JThDJTk2JUUzJTgwJTgy\">https://blog.csdn.net/qijitao/article/details/130111003#:~:text=1. gcc 中指定优化级别的参数有：-O0、-O1、-O2、-O3、-Og、-Os、-Ofast。,2. 在编译时，如果没有指定上面的任何优化参数，则默认为 -O0，即没有优化。</span></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "ARM",
                "ARM"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/ARM%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://to-ywz.github.io/Embedded/STM32/ARM%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "ARM汇编基础知识",
            "date_published": "2023-06-27T14:20:07.000Z",
            "content_html": "<h1 id=\"arm汇编基础知识\"><a class=\"anchor\" href=\"#arm汇编基础知识\">#</a> ARM 汇编基础知识</h1>\n<h2 id=\"汇编\"><a class=\"anchor\" href=\"#汇编\">#</a> 汇编</h2>\n<p>大部分做嵌入式开发时候，使用的都是 C 语言，通过编译器生成二进制文件，然后烧录到 MCU 中.<br />\n 其实，更底层还有汇编语言机器码，例如.start_up.s 文件就是汇编文件，用于设置堆栈，中断向量表以及中断向量函等<br />\n不同的芯片指令集可能不同，所对应的机器码也会不同，汇编的出现就是为了帮助记忆<br />\n同一条汇编代码，由汇编器来实现转译</p>\n<h2 id=\"反汇编\"><a class=\"anchor\" href=\"#反汇编\">#</a> 反汇编</h2>\n<p>反汇编是将难以辨认的机器转化为汇编语言，反汇编出来的汇编大概率和原本的汇编代码不一样<br />\n例如，原汇编内容如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6045ea6o1fg0.jpg\" alt=\"image\" /><br />\n 反汇编后，引导文件对应的代码如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.39ldlwmyo6a0.jpg\" alt=\"image\" /><br />\n 可以看到有着很大的差别，但是，毫无疑问二者都可以实现最终效果</p>\n<h2 id=\"二进制文件生成流程\"><a class=\"anchor\" href=\"#二进制文件生成流程\">#</a> 二进制文件生成流程</h2>\n<p>正常来说，一个 C 语言程序，会先经过预处理生成  <code>x.i</code>  文件，这时候还是 C 语言文件，仅仅是完成了将头文件内容放入  <code>x.c</code>  的文件夹中<br />\n接下去就是编译，将  <code>x.i</code>  文件编译为汇编文件  <code>x.s</code> , 这时候得出来的文件就是汇编文件了<br />\n再接下去就是将各个  <code>x.s</code>  文件汇编为  <code>x.o</code>  文件，这时候文件就是二进制格式了，无法打开查看了<br />\n最后通过链接器将  <code>x.o</code>  文件，合并成  <code>x.elf</code>   文件用于下载<br />\n这时候如果想看汇编的话就需要通过反汇编器来实现反汇编  <code>x.dis</code> , 一般来说各种编译器自带了反汇编器<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.12l1qmm1yd2o.jpg\" alt=\"image\" /></p>\n<h2 id=\"keil下怎么反汇编\"><a class=\"anchor\" href=\"#keil下怎么反汇编\">#</a> KEIL 下怎么反汇编</h2>\n<p>在 KEIL 的 User 选项中，如下图添加这两项 (filename 自行替换)</p>\n<pre><code>fromelf  --bin  --output=led.bin  Objects\\filename.axf\nfromelf  --text  -a -c  --output=filename.dis  Objects\\filename.axf\n</code></pre>\n<p>然后重新编译，即可得到二进制文件 filename.bin、反汇编文件 filename.dis。<br />\n如下图操作：<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.n0andsjwbcg.jpg\" alt=\"image\" /></p>\n<h2 id=\"gcc下反汇编\"><a class=\"anchor\" href=\"#gcc下反汇编\">#</a> GCC 下反汇编</h2>\n<p>使用 GCC 工具链编译程序时，可以在 Makefile 中添加一句：</p>\n<pre><code>$(OBJDUMP) -D -m arm  filename.elf &gt; filename.dis\t# OBJDUMP = arm-linux-gnueabihf-objdump\n``\n就可以把可执行程序 filename.elf，反汇编，得到 filename.dis\n</code></pre>\n<h2 id=\"pc寄存器\"><a class=\"anchor\" href=\"#pc寄存器\">#</a> PC 寄存器</h2>\n<p>PC 寄存器默认指向当前指令的下一条指令位置<br />\n但是，不同架构的处理步长会不同，Thumb 指令集中 PC 步长为 4, ARM 指令集中 PC 步长为 8, 而 Thumb2 指令集为了兼容 Thumb 指令集就使用了 4 作为步长<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.275rfbthmavw.jpg\" alt=\"image\" /></p>\n<h2 id=\"汇编如何调用c语言函数\"><a class=\"anchor\" href=\"#汇编如何调用c语言函数\">#</a> 汇编如何调用 C 语言函数</h2>\n<h3 id=\"直接调用\"><a class=\"anchor\" href=\"#直接调用\">#</a> 直接调用</h3>\n<p>如果函数调用不涉及参数传递，那么可以直接调用</p>\n<p>例如，调用  <code>void SystemReset(void)</code> , 那么就可以直接调用</p>\n<pre><code class=\"language-arm\">bl SystemReset\n</code></pre>\n<p>如果函数具有返回值，例如  <code>uint8_t is_empty(void);</code> , 当调用的时候可以直接调用<br />\n返回值会存入  <code>r0~r3</code></p>\n<pre><code>bl is_empty\nand r0, #0xff\n</code></pre>\n<h3 id=\"含有参数的函数\"><a class=\"anchor\" href=\"#含有参数的函数\">#</a> 含有参数的函数</h3>\n<p>如果函数带有参数，那就涉及到了传参的问题，怎么传，用什么传？</p>\n<p>其实 ARM 中有一个 ATPCS 规则 ARM-THUMB procedure call standard (ARM-Thumb 过程调用标准)<br />\n 这个标准的第 10 页约定 r0~r15 寄存器的用途</p>\n<ul>\n<li>R0~r3: 用于参数传递和数值返回</li>\n<li>r4~r11: 用于保存当前函数的局部变量</li>\n</ul>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/008_atpcs.76uqxz77nf40.jpg\" alt=\"008_atpcs\" /></p>\n<p>例如，调下面这个函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在汇编中的调用代码为</p>\n<pre><code class=\"language-ASM\">ldr r0, =0x7fffff ; 传递参数, 存放到r0\nbl  delay\ncmp r0, #0 ; 校验返回值\n</code></pre>\n<p>思考一个问题当参数超级多的时候会怎么样？<br />\n 当函数参数过多的时候，会使用栈来保存</p>\n<p>r4~r11 作为局部变量的保存点，可能在调用时会发生改变<br />\n这是因为这些寄存器时共享的，CPU 的任何运算操作都需要借助寄存器来实现<br />\n所以在调用函数时，需要将 r4~r15 以及 psr 寄存器都保存下来 (当然因地制宜，没用到就不存了，要不然浪费空间)</p>\n<h2 id=\"c函数的汇编代码\"><a class=\"anchor\" href=\"#c函数的汇编代码\">#</a> C 函数的汇编代码</h2>\n<p>这里是一段 STM32MP157 的 led 点亮代码，由于 <code>main</code>  函数太长这里只分析一下 delay 的调用和执行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USE_A7</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> ntime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ntime<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 使能 PLL4 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x894</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 等待时钟稳定</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/* 使能 GPIOA */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">USE_A7</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xA28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">USE_M4</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xAA8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/* 设置 GPIO10 为输出模式 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50002000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 指向 (GPIOA_ODR)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50002000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 执行任务 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/* 设置 LED 电平变化 */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">^=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>经过反汇编后，这里就只给出调用和 <code>delay</code>  的代码，简单进行一下分析</p>\n<pre><code class=\"language-asm\">\nc01000bc:\tf244 2040 \tmovw\tr0, #16960\t; 0x4240 ; 将0x4240存入r0的低16位\nc01000c0:\tf2c0 000f \tmovt\tr0, #15              ; 将0x0f存入r0 的搞16位\n; 上面的出来的就是100000\nc01000c4:\tf7ff ffa2 \tbl\tc010000c &lt;delay&gt;       ; 调用 delay 函数\n\nc010000c &lt;delay&gt;:\nc010000c:\tb480      \tpush\t&#123;r7&#125;                 ; 保存共享过程寄存器的原有的值\nc010000e:\tb083      \tsub\tsp, #12                ; sp向后偏移12Byte\nc0100010:\taf00      \tadd\tr7, sp, #0             ; 将sp的值读取如r7\nc0100012:\t6078      \tstr\tr0, [r7, #4]           ;  r0 存入到 sp+4 的地址\nc0100014:\tbf00      \tnop\nc0100016:\t687b      \tldr\tr3, [r7, #4]           ; 将sp+4 地址上的数据读入到r3\nc0100018:\t1e5a      \tsubs\tr2, r3, #1           ; 将 r3 的值-1 ntime-1\nc010001a:\t607a      \tstr\tr2, [r7, #4]           ; 更新SP+3的数值\nc010001c:\t2b00      \tcmp\tr3, #0                 ; 比较是否减到0\nc010001e:\td1fa      \tbne.n\tc0100016 &lt;delay+0xa&gt; ; 是则返回\nc0100020:\tbf00      \tnop\nc0100022:\t370c      \tadds\tr7, #12              ; 出栈\nc0100024:\t46bd      \tmov\tsp, r7                 ; 回复 sp 数值\nc0100026:\tf85d 7b04 \tldr.w\tr7, [sp], #4         ; 回复 r7\nc010002a:\t4770      \tbx\tlr\n</code></pre>\n<p>图片简单讲解一下，更详细的可以参考韦东山的视频<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.nsum3h8ig40.jpg\" alt=\"image\" /></p>\n<h2 id=\"使用汇编实现点灯\"><a class=\"anchor\" href=\"#使用汇编实现点灯\">#</a> 使用汇编实现点灯</h2>\n<p>分析和了解了这么多，总得实战一下，其实本质上是一个 读 - 改 - 存 的过程<br />\n一般来说，当出现清零，或者亦或之类的运算在 改 这个步骤上会多一些<br />\n<strong> <code>;</code>  不是注释，这里的注释符号和 C 语言一致</strong></p>\n<pre><code>.text\n.global  _start\n\n_start: \t\n\n    /* 1. 使能GPIO */\n\n    /* 使能 RCC */\n    ldr r0, =(0x50000000 + 0x894)\n    ldr r1, [r0]\n    orr r1, r1, #(1&lt;&lt;0)\n    str r1, [r0]\n \nNotReady:\n    ldr R1, [R0]\n    tst r1, #(1 &lt;&lt; 1)\n    beq NotReady   /* 不为0则等待 */\n\n   /* 使能 GPIOA 模块 */\n    ldr r0, =(0x50000000 + 0xA28)\n    ldr r1, [r0]\n    orr r1, r1, #(1&lt;&lt;0)\n    str r1, [r0]\n\n    /* 配置GPIO引脚 */\n\n    /* 设置GPIO10为输出模式 */\n    ldr r0, = (0x50002000 + 0x00)\n    ldr r1, [r0]\n    mov r2, #(3&lt;&lt;20)      /* 用于生成清除位 */\n    bic r1, r1, r2        /* r1 = r1&amp;~(R2) */\n    orr r1, r1, #(1&lt;&lt;20)  /* 配置为 输出 */\n    str r1, [r0]\n\n    /* r0 指向 (GPIOA_ODR) */\n    ldr r2, = (0x50002000 + 0x14)\n\nLoop:\n\n    /* 设置引脚高电平 */\n    ldr r1, [r2]\n    orr r1, r1, #(1&lt;&lt;10)\n    str r1, [r2]\n    \n    ldr r0, =1000000\n    bl Delay\n\n    /* 设置引脚低电平 */\n    ldr r1, [r2]\n    bic r1, r1, #(1&lt;&lt;10)\n    str r1, [r2]\n    \n    ldr r0, =1000000\n    bl Delay\n    \n    b Loop\n\n\nDelay:\n    subs r0, r0, #1\n    bne Delay\n    mov pc, lr\n</code></pre>\n<p>能明显的感觉到，咱们的代码要比反汇编的短，会更加高效一些<br />\n这是因为编译器会在保证稳妥的情况下再选择高效的指令</p>\n<p>当然，还会有更加高效的算法，但这是我能力内目前能想到的一个方案<br />\n如果有更好的方法，望各位大佬斧正</p>\n<h2 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h2>\n<p>[1] ARM ArchitectureReference Manual ARMv7-A and ARMv7-R edition<br />\n[2] DDI0403E_B_armv7m_arm<br />\n[3] PM0056<br />\n [4] ATPCS (ATM-Thumb 指令调用标准)</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "ARM",
                "ARM"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Education/E333/6-23/",
            "url": "https://to-ywz.github.io/Education/E333/6-23/",
            "title": "E333抽背",
            "date_published": "2023-06-23T05:27:27.000Z",
            "content_html": "<h2 id=\"秦汉教育\"><a class=\"anchor\" href=\"#秦汉教育\">#</a> 秦汉教育</h2>\n<h3 id=\"名词解释\"><a class=\"anchor\" href=\"#名词解释\">#</a> 名词解释</h3>\n<h4 id=\"太学\"><a class=\"anchor\" href=\"#太学\">#</a> 太学</h4>\n<ol>\n<li class=\"quiz fill\">\n<p>简介<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>太学是汉武帝时期在董仲舒的建议下，为推行 “独尊儒术” 的文教政策而创立的中央官学.<br />\n 五经博士置弟子标志着太学正式成立<br />\n标志着以经学教育为基本内容的中国封建教育制度正式确立</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>特点:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>太学以为国家培养 “经明行修” 的官吏作为教育宗旨；</p>\n<p>在教学内容上，制定统一的教材主要学习 “五经”;</p>\n<p>太学中有个别、小组教学、“大都授” 集体上课以及次第相传的教学形式；</p>\n<p>太学以 “设科射策” 的形式进行考试；太学把教师称作博士，把学生称作 “博士弟子” 或 “太学生”</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>评价:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>太学是我国第一所有完备规划、史实详尽可考的学校太学最早利用学校教育来强化官方意识形态；</p>\n<p>太学掀开了反抗宦官政治的中国学生运动史上的第一页。</p>\n<p>但由于太学在教学中存在排除异己学说、空谈义理的现象，严重束缚了教育思想和学术研究的发展</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"简答题\"><a class=\"anchor\" href=\"#简答题\">#</a> 简答题</h3>\n<h4 id=\"简述汉武帝董-汉代独术三大文教政策\"><a class=\"anchor\" href=\"#简述汉武帝董-汉代独术三大文教政策\">#</a> 简述 (汉武帝 / 董 / 汉代)“独术”(三大) 文教政策</h4>\n<ol>\n<li class=\"quiz fill\">\n<p>简介:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>汉武在董仲舒的建议下，实行 “独术” 的文教政策。</p>\n<p>董仲舒提出的 “独尊儒术” 等三大建议，称为汉代三大文教政策</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>含义:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>国家政策和文化教育皆以儒术为本，儒学成为统一的指导思想，</p>\n<p>以儒家经典为教育内容，</p>\n<p>用严格的师法代替自由讲学书本知识在教学中占主要地位，</p>\n<p>长句古训代替了对现实问题的探讨</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>三大文教政策:<span class=\"gap\">“推明孔氏，抑黜百家”</span>、<span class=\"gap\">兴太学以养士</span>、<span class=\"gap\">重视选举，任贤使能</span>。</p>\n<blockquote>\n<p>“推明孔氏，抑黜百家”。</p>\n<p>这是文教政策的总纲领。</p>\n<p>董仲舒论证了儒学在封建统治中独一无二的地位，汉代虽主张其他各家学说也可以发展，但其他学说处于从属地位，不可取代儒学的官方地位</p>\n<p>兴太学以养士。</p>\n<p>为了保证封建国家在统治思想上的高度统一，也为了改变统治人才短缺的局面，董仲舒提出 “兴太学以养士” 的建议。</p>\n<p>实际上，通过兴办太学，政府直接操纵教育大权，决定人才的培养目标.</p>\n<p>这是落实 “独尊儒术” 教育政策的重要手段之一。</p>\n<p>重视选举，任贤使能。</p>\n<p>针对汉初人才选拔和使用中的弊病，董仲舒提出加强选举合理任用人才的主他提出 “量材而授官录德而定位” 的用人思想。</p>\n<p>这些主张对促进儒学取得独尊地位有重要作用。</p>\n</blockquote>\n</li>\n<li class=\"quiz fill\">\n<p>评价:<span class=\"gap\">✔</span>。</p>\n<blockquote>\n<p>总的来看 “独术” 使学在社会政治和社会生活中的地位空前提高，</p>\n<p>使学在教育观念和教育实施方面都处于主导和支配地位，基本上符合儒家构建的模式并以此全方位地影响着社会政治文化的发展走向，作用极为深远</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "教育学",
                "E333",
                "E333"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8FSTM32MP157/",
            "url": "https://to-ywz.github.io/Embedded/STM32/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8FSTM32MP157/",
            "title": "第一个程序STM32MP157",
            "date_published": "2023-06-18T16:33:52.000Z",
            "content_html": "<h1 id=\"第一个程序\"><a class=\"anchor\" href=\"#第一个程序\">#</a> 第一个程序</h1>\n<p>与 hello world 类似，嵌入式第一个程序为点亮 LED, 在 STM 32MP157 上点亮 LED.</p>\n<h2 id=\"如何点亮一个-led\"><a class=\"anchor\" href=\"#如何点亮一个-led\">#</a> 如何点亮一个 LED</h2>\n<ol>\n<li>看原理图，找到相关引脚</li>\n<li>看主芯片的数据手册，如何配置控制引脚</li>\n<li>写程序</li>\n</ol>\n<h3 id=\"看原理图\"><a class=\"anchor\" href=\"#看原理图\">#</a> 看原理图</h3>\n<p>对于 百问网 的这块板子来说，LED 部分的原理图如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3q216km4y1s0.jpg\" alt=\"image\" /><br />\n 以 LED2 为例子，从图中可以看出 这个 LED 正极接入了 3.3V, 负极接到了 主控的 PA10 上.<br />\n 由初中物理可知，电路的导通是因为电子的定向移动，电子的定向移动是因为存在电势差<br />\n所以要想点亮 LED, 就要形成电势差，而 LED 的正极接入的 3.3v 的电源，所以只能通过 改变 PA10 输出的电压来形成电势差<br />\n显然，PA10 输出高电平时 电势差为 0, LED 熄灭；PA10 输出低电平时 电势差为 3.3v, LED 点亮</p>\n<h4 id=\"驱动能力不足的情况\"><a class=\"anchor\" href=\"#驱动能力不足的情况\">#</a> 驱动能力不足的情况</h4>\n<p>对于 MP1 来说，IO 能输出 3.3v 的电压所以采用当前的电路<br />\n有有些 驱动能力较弱的 主控 可能只能输出 1.2v 那么他们的原理图电路可能如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.mtzsdl9cu5s.jpg\" alt=\"image\" /></p>\n<p>当 电路设计如上时，<br />\nGPIO 输出 1.2v 时，三极管导通，3.3v 和 GND 形成通路 LED 被点亮<br />\n GPIO 输出 0v 时，三极管截至，无法形成通路，LED 熄灭</p>\n<p>也有可能如下设计<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.e7tyxd3a41c.jpg\" alt=\"image\" /><br />\n 当 电路设计如上时，<br />\nGPIO 输出 1.2v 时，第一个三极管导通，三极管集电极处电压几乎为 0, 第二个三极管不导通，LED 熄灭<br />\n GPIO 输出 0 v 时，第一个三极管截至，集电极处存在电压，第二个三极管导通，LED 点亮</p>\n<p><strong>PS: 其实无论，输出的电压是多少，如果外围电路没有错误，对我们编程来说，只有 0 或者 1, 输出的只有高低电平</strong></p>\n<h3 id=\"操作相关引脚逻辑性推导\"><a class=\"anchor\" href=\"#操作相关引脚逻辑性推导\">#</a> 操作相关引脚 (逻辑性推导)</h3>\n<p>GPIO: General-purpose input/output</p>\n<p>回顾上面，需要 GPIO 输出电平，我们就需要操作 GPIO, 可是  GPIO 输出高电平有很多可能<br />\n例如 通用输入输出，ADC, DAC, UART .... 这就涉及到了 GPIO 的多路复用，GPIO_MUX 多路选择器部分，通过这个选择器来选择 GPIO 的工作模式<br />\n这一部分比 STM32 上 体现为 GPIO 的模式选择，NXP 的 RT 系列的单片机就有一个专门的用于控制 IOMUXC 寄存器，用于选择 复用</p>\n<p>所有 ARM 架构的芯片为了省电 默认所有的 模块都是 被关闭 的需要手动打开，GPIO 也是如此，在使用之前需要 ENABLE 相应的时钟</p>\n<p>咱们 控制 LED 亮灭就是简单的 GPIO 基本输入输出，不用复用成其他模块<br />\n GPIO 有 I 也有 O, 就会存在一个方向控制器<br />\n上面分析的就是 LED 操作就是 GPIO 电平输出，所以 咱需要 把 GPIO 的方向配置成输出<br />\n刚刚分析 MP1 的 LED 电路 为低电平点亮，所以将 输出寄存器 配置为高电平</p>\n<p>PS: 操作寄存器时，不要影响其他位，先读出寄存器原本的值，再写入寄存器中.(大部分芯片都采用这种协议 (set and clear protocol))</p>\n<p>小结一下:</p>\n<ol>\n<li>有多组 GPIO, 每组有多个 GPIO</li>\n<li>使能：电源 / 时钟</li>\n<li>模式 (Mode): 引脚可用于 GPIO 或其他功能</li>\n<li>方向：引脚 Mode 设置为 GPIO 时，可以继续设置它是输出引脚，还是输入引脚</li>\n<li>数值：对于输出引脚，可以设置寄存器让它输出高、低电平<br />\n对于输入引脚，可以读取寄存器得到引脚的当前电平</li>\n</ol>\n<h3 id=\"stm32mp157-操作-点亮-led-的寄存器\"><a class=\"anchor\" href=\"#stm32mp157-操作-点亮-led-的寄存器\">#</a> STM32MP157 操作 点亮 LED 的寄存器</h3>\n<h4 id=\"时钟配置\"><a class=\"anchor\" href=\"#时钟配置\">#</a> 时钟配置</h4>\n<p>上面咱们说过 点亮 LED 需要，先使能 对应的 电源总线进行使能，<br />\n 这一部分就需要查看数据手册对应的寄存器操作，这里涉及到 RCC 模块，RCC 是管理复位 和 时钟控制的模块<br />\n在手册的 10.2 章节中找到看见一张 RCC 模块的功能框图，这里直观的表示出了 RCC 个中功能<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5zihk7u9e2w0.jpg\" alt=\"image\" /><br />\n 在图的下面，可以看见 PLLx 的功能，咱们的要使用的 PLL4 右侧很明显有  <code>per_clk</code> , GPIO 是一种最基本的外设，所以咱们找对 PLL 了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4fm6fxyf0480.jpg\" alt=\"image\" /><br />\n 让咱们继续向下找一找，在数据手册的 522 页，RCC 的 10.4 章节，功能描述部分，有着这么一段话</p>\n<blockquote>\n<p>The RCC provides up to 4 PLLs, each of them can be configured with integer or fractional<br />\nratios.<br />\n• The PLL1 is dedicated to the MPU clocking<br />\n• The PLL2 provides:<br />\n– The clocks for the AXI-SS (including APB4, APB5, AHB5 and AHB6 bridges)<br />\n– The clocks for the DDR interface<br />\n– The clocks for the GPU<br />\n• The PLL3 provides:<br />\n– The clocks for the MCU, and its bus matrix (including the APB1, APB2, APB3,<br />\nAHB1, AHB2, AHB3 and AHB4)<br />\n– The kernel clocks for peripherals<br />\n• The PLL4 is dedicated to the generation of the kernel clocks for various peripherals</p>\n</blockquote>\n<p>可以看到，原文中表示 PLL4 是专门用于 生成各种外设时钟的内核时钟，还用了  <code>dedicated to</code>  来表示专门，说明肯定没找错 PLL<br />\n 再往下也能看到更详细的关于 RCC 模块的框图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4669sb2k6uy.jpg\" alt=\"image\" /></p>\n<p>这时候就该去找 RCC 的寄存器啦，当然和 PLL4 相关的手册肯定会有很多，这时候当然是找 类似于 CR 寄存器，而且大概率是 RCC_CR<br />\n 至于为什么，CR 是  <code>Control Register</code>  的缩写，而 PLL4 归属于 RCC 那么一定要先在 RCC 中使能，使能是一种中控制操作，那必然就是 CR 寄存器啦<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3mcbh2qugls0.jpg\" alt=\"image\" /><br />\n 很显然，猜错名字了，差了个 PLL4, 不过大差不差.<br />\n 从下面的文字中可以看出 0 bit 位是使能位，只要把这一位置 1 即可使能 PLL4<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4pj7jg02kpw0.jpg\" alt=\"image\" /></p>\n<p>由寄存器表可知 RCC_PLL4CR, 为控制 外设的时钟线，使能只需要拉高第一位，在不影响其他位的情况下<br />\n咱们可以这么写  <code>RCC_PLL4CR |= (1 &lt;&lt; 0)</code> <br />\n PLL4 的使能并不是瞬间的，所以在操作之前需要等待，PLL4 准备好，即等待 RCC_PLL4CR 的  <code>PLL4REDY</code>  位复位，才算启动成功<br />\n这里咱可以这样写  <code>RCC_PLL4CR &amp; (1 &lt;&lt; 1)</code>  来检测 PLL4 是否使能</p>\n<p>对于 ARM 架构的芯片来说，大部分外设都是关闭的，所以要配置一个外设之前必须要做的事情是，使能对应的外设时钟<br />\n一般来说，外设时钟的使能都是  <code>AxBx_ENSETR</code> , 但是这里有一个很大的问题，如何确定这些外设到底归属于哪些总线管理？<br />\n 其实在文档中有一章节叫做  <code>Memory and bus architecture</code>  这里介绍了内存分布和总线架构<br />\n在 2.1.2 Memory Map Organization 中有一节 Peripherals clusters 的内容，第一段就涉及到了 GPIO 外设</p>\n<blockquote>\n<p>AHB4/APB3<br />\nThis cluster groups important system functions as clock and power control, system<br />\nconfiguration, most GPIOs control, plus some additional timers and low-speed<br />\ncommunication interfaces</p>\n</blockquote>\n<p>这里大致意思就是 AHB3 和 AHB4, 管理系统配置、电源、时钟和 GPIO 以及一部分定时器和低速通信接口<br />\n那这就很明确了，直接去寻找 AHB3 和 AHB4 相关的寄存器，直接查找会好一些<br />\n这里可以需要注意一下因为用的 A7 内核，所以要找 Enable for MPU 的<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.71ao3rrjvn80.png\" alt=\"image\" /></p>\n<h4 id=\"gpio-配置\"><a class=\"anchor\" href=\"#gpio-配置\">#</a> gpio 配置</h4>\n<p>和一般的 A 系列 或 M 系列 的 ARM 不同，157 的引脚被 和功能被不同的模块复用，有些 M4 专用，有些 A7 专用，还有些二者复用<br />\n但是不管是 A 系列还是 M 系列，引脚配置的思路应该大差不差，具体的配置方式参考 文档的第 13 章的 Table 81, 以及 13.3.10 小结<br />\n这部分对 GPIO 的配置有专门的讲解<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5w9pjj2uj8o0.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6v92b3xqers0.jpg\" alt=\"image\" /></p>\n<p>这里我就直接通过寄存器表来查看相关配置啦</p>\n<p>首先配置 GPIO 的工作模式，文章开始说过，现在的 GPIO 都是身兼数职，所以需要先指定它工作在哪个职责上<br />\n这个就涉及 GPIO_MODER 寄存器<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1uns4ldco4o0.jpg\" alt=\"image\" /><br />\n 从图中可以看到 GPIO 输出模式需要将对应的位配置为 01<br />\n 伪代码可以这样实现  <code>GPIOA_MODER &amp;= ~(3 &lt;&lt; 20); GPIOA_MODER |= (1 &lt;&lt; 20)</code> ;</p>\n<p>接下去就先不配置上下拉，输出速度之类的，只先看一下输出类型默认方式，是推挽 还是开漏的模式了 (因为默认推挽)<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2l4tbhj1qie0.jpg\" alt=\"image\" /><br />\n 直接快进到 输出<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.59rxw8n915c0.jpg\" alt=\"image\" /><br />\n 从图中可知，要想输出对应电平只需要，将电平写入对应位即可，即  <code>GPIOA_ODR |= (1 &lt;&lt; 10); GPIOA_ODR &amp;= (1 &lt;&lt; 10);</code></p>\n<p>到此，整个逻辑层就捋出来了<br />\n至于代码实现就就按着这个逻辑即可，这里贴一份我的代码</p>\n<h5 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">USE_A7</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> ntime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ntime<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_reg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 使能 PLL4 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x894</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 等待时钟稳定</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/* 使能 GPIOA */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">USE_A7</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xA28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">USE_M4</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50000000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xAA8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/* 设置 GPIO10 为输出模式 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50002000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 指向 (GPIOA_ODR)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p_reg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x50002000</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 执行任务 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/* 设置 LED 电平变化 */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token operator\">*</span>p_reg <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动文件</p>\n<pre><code class=\"language-ASM\">.text\n.global  _start\n_start: \t\t\t\n\n\t/* 设置sp */\n\tldr sp, =0xc0000000 + 0x100000\n\n\t/* 调用main函数 */\n\tbl main\n</code></pre>\n<p>makefile</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PREFIX<span class=\"token operator\">=</span>arm-linux-gnueabihf-</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CC<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>gcc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LD<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>ld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>AR<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>ar</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>OBJCOPY<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>objcopy</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>OBJDUMP<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>PREFIX<span class=\"token punctuation\">)</span>objdump</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token target symbol\">led.img</span> <span class=\"token punctuation\">:</span> start.S main.c</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -nostdlib -g -c -o start.o start.S</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> -nostdlib -g -c -o main.o main.c</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>LD<span class=\"token punctuation\">)</span> -T stm32mp157.lds -g start.o main.o -o led.elf </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJCOPY<span class=\"token punctuation\">)</span> -O binary -S led.elf  led.bin</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJDUMP<span class=\"token punctuation\">)</span> -D -m arm  led.elf  > led.dis</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tmkimage -A arm -T firmware -C none -O u-boot -a 0xC0100000 -e 0 -d led.bin led.img </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmkimage -T stm32image -a 0xC0100000 -e 0xC0100000 -d led.bin led.stm32 </pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token target symbol\">clean</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\trm -f led.dis  led.bin led.elf led.img *.o *.log</pre></td></tr></table></figure><h2 id=\"其它注意\"><a class=\"anchor\" href=\"#其它注意\">#</a> 其它注意</h2>\n<p>烧录的话目前我没有研究明白，暂时跟着韦东山老师的课程来，走 USB 下载，烧入到 RAM 中<br />\n要注意的是，需要修改一下  <code>led.stm32</code>  的地址<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5hub87mcflc0.jpg\" alt=\"image\" /></p>\n<h2 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h2>\n<p>[1] Linux 完全开发手册。韦东山<br />\n [2] STM32MP157 数据手册<br />\n [3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTAwYXNrLm5ldC9wL3RfcGMvY291cnNlX3BjX2RldGFpbC9jb2x1bW4vcF81Zjg1NzkxZWU0YjA2YWZmMWEwM2Q2MTQ/Y29udGVudF9hcHBfaWQ9\">https://www.100ask.net/p/t_pc/course_pc_detail/column/p_5f85791ee4b06aff1a03d614?content_app_id=</span></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "STM32"
            ]
        },
        {
            "id": "https://to-ywz.github.io/blog/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://to-ywz.github.io/blog/hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "hexo博客使用问题记录",
            "date_published": "2023-06-17T10:38:47.000Z",
            "content_html": "<h1 id=\"hexo-blog-使用bug问题记录\"><a class=\"anchor\" href=\"#hexo-blog-使用bug问题记录\">#</a> hexo blog 使用 bug 问题记录</h1>\n<h2 id=\"hexo-d-出现warning-lf\"><a class=\"anchor\" href=\"#hexo-d-出现warning-lf\">#</a> hexo d 出现 &quot;warning: LF&quot;</h2>\n<p>先说结论，出现如下的警告，其实是可以直接忽视的，不会影响编译后的结果<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6krjwmiaz080.webp\" alt=\"image\" /><br />\n 网上能 Google 到一大堆解决方案都是千篇一律的，将  <code>core.autocrlf</code>  设置为  <code>false</code> .<br />\n 这样可以直接解决警告提示，但是很显然，全局化的处理必然会带来更多的隐性问题<br />\n所以，还是很有必要去弄清楚为什么，然后再找出合理的方案解决这个问题</p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>这和个问题的本质源头和  <code>git add</code>  出现 &quot;LF&quot; 警告是一致的<br />\n在 Windows 中使用 CRLF ( <code>\\r\\n</code> ) 做作为行尾符，而在 Linux 系统中则使用 LF ( <code>\\n</code> )<br />\n CRLF 即 Carriage-Return Line-Feed 的缩写<br />\n Git 不修改文件内容，但默认会将入库的文件的行尾符设置为 LF, 会将检出的文件的行尾符设置为 CRLF, 在执行时出现上面的警告<br />\n工作目录中的文件的行尾是 LF, 但是这里在即将入 Git 库之前会将 LF 转换为 CRLF, 所以给出  <code>LF will be replaced by CRLF in &lt;file-name&gt;</code>  的警告<br />\n其实其目的是在告诉我们，源文件不会被修改，但是在 git 仓库中的文件 LF 会被设置为 CRLF.<br />\n 因此在  <code>&quot;LF will be replaced by CRLF in &lt;file-name&gt;</code>  警告后面往往会有一句  <code>&quot;The file will have its original line endings in your working directory.&quot;</code> <br />\n 所以  <code>core.autocrlf</code>  的配置是用于检测跨平台的，如果将其设置为  <code>false</code>  则可能出现一些很难发现的 bug<br />\n 例如，我在做 ftp 开发时，ftp server 是运行在 linux 上的，而从机 MCU 开发是在 windows 上实现的，在新建文件夹命令中多出了一个空格，使用 windows 的 ftp 客户端去查看时跟本无法辨别，而在 linux 上会显示出一个  <code>\\ </code> 的空格，这个 bug 查了半天</p>\n<p>而现将  <code>core.autocrlf</code>  的检测关闭，最直接会导致:</p>\n<ol>\n<li>pull linux 文件到自己的 windows 环境下用记事本看的话会出现黑点</li>\n<li>Windows 里的文件在 Mac 下打开的话，在每行的结尾可能会多出一个 ^M 符号 (未验证，穷鬼没有 Mac, 据说 Mac 投奔了 Unix)</li>\n</ol>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h3>\n<p>由上面可知，暴力的全局更改为不检测并不可取，那么有没有什么合理的方法呢？<br />\n 很遗憾，当必须跨平台处理协作的时候就不能关闭<br />\n一般来说 git 的 Windows 客户端会默认设置  <code>core.autocrlf=true</code>  (可通过  <code>git config core.autocrlf</code>  命令查询是否默认 true. 如不是 true, 通过  <code>config --global core.autocrlf true</code>  命令设置该属性为 true)<br />\n 而  <code>core.autocrlf=true</code>  有以下 3 个功能来避免我们出现我们前面分析时所述的问题:</p>\n<ol>\n<li>在把  <code>modified</code>  修改过的文件  <code>git add</code>  到暂存区 stage” 时，Git 自动把 LF 转换成 CRLF, 并给出那条警告 &quot;LF will be replaced by CRLF&quot;</li>\n<li>在把  <code>modified</code>  修改过的文件由暂存区 (stage) 提交 (commit) 到版本库 / 仓库 (repository) 时，Git 自动把 CRLF 转换成 LF</li>\n<li>在用  <code>check/git checkout</code>  切换到指定分支 或  <code>git clone</code>  克隆远程版本库” 来加载代码时，Git 自动把 LF 转换成 CRLF<br />\n 我们博客属于第一种</li>\n</ol>\n<p>不过对于我们只写博客不进行跨平台处理的情况的话，还是有一个建议可以在使用编辑器的时候，将编辑器的换行标识符进行默认设置<br />\n这里介绍 vscode 的解决方法</p>\n<ol>\n<li>vsocode 的的右下角设置为 CRLF<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6y86xuenw300.webp\" alt=\"image\" /></li>\n<li>每次都手动设置就非常的不合理，所以可以去工作区的设置中设置默认的文件换行方法，这样就可以避免出现需要警告了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2mnd2tv5ls00.webp\" alt=\"image\" /></li>\n<li>当让也可以在  <code>.vscode</code>  文件夹中的  <code>setting.json</code>  文件中添加  <code>&quot;files.eol&quot;:&quot;\\r\\n&quot;</code></li>\n</ol>\n<h3 id=\"知识大爆炸\"><a class=\"anchor\" href=\"#知识大爆炸\">#</a> 知识大爆炸</h3>\n<h4 id=\"cr-lf-和-lf-区别\"><a class=\"anchor\" href=\"#cr-lf-和-lf-区别\">#</a> CR-LF 和 LF 区别</h4>\n<p>LF: Line Feed 换行<br />\n CRLF: Carriage Return Line Feed 回车换行</p>\n<p>早期的机械打字机上个名为 **「字车」<strong>(Typewriter carriage) 的部件，类似于现在的光标，打一个字符，字车前进一格.<br />\n 而打完一行后，则需要让字车回到起始位置，这就是</strong> Carriage Return** 键最早的作用，因而被直接翻译为 **「回车」**<br />\n 虽然回车键的功能已经不止 &quot;倒回字车&quot; 了 (例如，泄愤的大回车键，狗头), 但这个译名保留了下来</p>\n<h4 id=\"r与n的起源\"><a class=\"anchor\" href=\"#r与n的起源\">#</a> '\\r' 与 '\\n' 的起源</h4>\n<p>这最早起源于电传打字机，这是一种远距离信息传送器械，通常由键盘、收发报器和印字机构等组发报时，按下某一字符键，就能将该字符的电码信号自动发送到信道；收报时，能自动接收来自信道的电码信号，并打印出相应的字符.<br />\n 大概是这个样子，经常出现在二战时期为背景的电影中的打字机是他的祖先辈份<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1py4lg46v8w0.webp\" alt=\"image\" /><br />\n 这种打字机有一个打印头和滚轮，滚轮用于调整纸的纵向移动。每当打印头打印完当前行后需要将打印头移到最左边，滚轮需要把纸向下移动一行。由于这两个操作需要的时间远大于电信号传输的时间，可能会导致在操作过程中电信号的丢失。而解决这个问题的方案是物理补偿，要求每行都加上  <code>\\r\\n</code>  这两个字符，用于补偿物理设备操作的时间<br />\n <code>\\r</code>  代表打印头左移对应 CR, 而  <code>\\n</code>  滚轮滚动操作对应 LF.</p>\n<h4 id=\"那么为什么要分成两个字符\"><a class=\"anchor\" href=\"#那么为什么要分成两个字符\">#</a> 那么为什么要分成两个字符？</h4>\n<p>其实理由很简单，因为测试出来的结果是一个字符输入后，CRLF 的操作并没有完成，进而导致移动到一半的时候打印出错位的文字。所以干错设计为两个字符来避免这个问题.<br />\n 虽然这个理由很无厘头，但这就是最节省成本的解决方式</p>\n<h4 id=\"为什么不是-nr呢\"><a class=\"anchor\" href=\"#为什么不是-nr呢\">#</a> 为什么不是  <code>\\n\\r</code>  呢？</h4>\n<p>因为  <code>\\r</code>  所消耗的时间会更长，保证在两个字符输入完成前实现 CR-LF 的操作，要不然也会出现一个字符设计版本的问题</p>\n<h2 id=\"nodejs-14-accessing-non-existent-property问题\"><a class=\"anchor\" href=\"#nodejs-14-accessing-non-existent-property问题\">#</a> Node.js 14 Accessing non-existent property 问题</h2>\n<p>-------------------20230617---------------------------</p>\n<p>今天早更新主题一不小心把  <code>_config.yml</code>  文件覆盖了，/(ㄒ o ㄒ)/~~</p>\n<p>之前环境配置也存在一些问题，所以干脆重新搭建一遍环境</p>\n<p>结果在编译的时候出现了这个警告，本着不放过任何一个警告的精神，我去 google 了一下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4gexhvdisp00.webp\" alt=\"image\" /></p>\n<p>结果，但部分都说是无关紧要的警告，是因为 Node Js 的版本过高，可以忽略或者强制降低警告优先级</p>\n<p>目前暂时没有找到更好的解决方案，而且还有一大堆 bug 没修，所以暂时搁置一下</p>\n<h4 id=\"本文参考来源\"><a class=\"anchor\" href=\"#本文参考来源\">#</a> 本文参考来源</h4>\n<p><strong>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yYm9uZTExL2FydGljbGUvZGV0YWlscy8xMDQwNTIxMzc=\">https://blog.csdn.net/mrbone11/article/details/104052137</span></strong><br />\n<strong>[2] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZmluY2xpcC5jb20vbmV3cy9mLzExNjc4Lmh0bWw=\">https://www.finclip.com/news/f/11678.html</span></strong><br />\n<strong>[3] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmV3bGluZQ==\">https://en.wikipedia.org/wiki/Newline</span></strong></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "blog",
                "blog"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/ARM%E6%9E%B6%E6%9E%84/",
            "url": "https://to-ywz.github.io/Embedded/STM32/ARM%E6%9E%B6%E6%9E%84/",
            "title": "ARM架构",
            "date_published": "2023-06-16T14:20:07.000Z",
            "content_html": "<h1 id=\"arm-架构\"><a class=\"anchor\" href=\"#arm-架构\">#</a> ARM 架构</h1>\n<p>随着对 STM 的逐步了解，就会发现一些特别的地方，例如，为什么 ARM 可以像访问内存一样访问外设？</p>\n<h2 id=\"为什么arm可以像访问内存一样访问外设\"><a class=\"anchor\" href=\"#为什么arm可以像访问内存一样访问外设\">#</a> 为什么 ARM 可以像访问内存一样访问外设？</h2>\n<p>不要觉得这是理所当然的<br />\n在 x86 上驱动程序需要有对应的驱动文件，驱动文件需要通过库函数或是内联汇编才能实现<br />\n虽然 ST 也需要驱动文件，但是底层的实现就很有意思，但 ST 系列的单片机可以使用 C 语言像访问内存一样来访问外设</p>\n<p>从汇编的层面来看 ARM 架构下的处理器可以通过 <code>ldr</code>  来操作任意的内存和外设，而  <code>x86</code>  不同<br />\n他是通过 <code>IN</code>  指令和 <code>MOV</code>  指令分别实现对外设和内存的操作</p>\n<p>其实本质是架构不同，形成的指令集不同，对于 ARM 架构来说，地址和内存统一编址，而 x86 则是将外设分别进行编址<br />\n CPU 依靠地址总线来访问对应的地址，32 位的单片机有 32 根地址线，有 4G 的寻址空间，ROM、RAM 和外设分布在 0~4G 的寻址空间之内<br />\n ARM 架构的内存分布大致如下图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.28ed6cywyu68.jpg\" alt=\"image\" /></p>\n<p>只要是在 0~4G 之外的地址，CPU 想要访问就会和 x86 类似的方式来实现访问<br />\n例如，要访问 EEPROM, 那么对于处理器啊来说，会检查访问 eeprom 的驱动，然后再按 eeprom 的内部地址</p>\n<h2 id=\"risc-cisc\"><a class=\"anchor\" href=\"#risc-cisc\">#</a> RISC &amp; CISC</h2>\n<p>既然说到了架构，那就不得不说一下 两种指令集 CISC 和 RISC<br />\n 由于个人能力有限，所以可能会出现错误和纰漏，就大致介绍一下两大指令集</p>\n<ol>\n<li>CISC<br />\nComplex Instruction Set Computing, 其所用指令较为复杂，而复杂的指令采用 &quot;微程序&quot; 实现<br />\n &quot;微程序&quot; 不代表会高效，该执行的步骤一部都不少，<br />\n 例如: call 和 ret 指令用于实现函数调用和返回，其事实上也是在调用的之前将 pc 或标签地址存入 LR 寄存器，然后在执行到 RET 语句时读取出来<br />\n尽管逻辑一致</li>\n<li>RISC<br />\nReduced Instruction Set Computing, 其所用指令较为简单，特点如下:</li>\n<li>对内存只有读、写指令</li>\n<li>对于数据的运算是在 CPU 内部实现</li>\n<li>使用 RISC 指令的 CPU 复杂度小一点，，易于设计</li>\n</ol>\n<h3 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h3>\n<ol>\n<li>CISC 的指令能力强，但多数指令使用率低却增加了 CPU 的复杂度，指令是可变长格式</li>\n<li>RISC 的指令大部分为单周期指令，指令长度固定，操作寄存器，对于内存只有 Load/Store 操作</li>\n<li>CISC 支持多种寻址方式；RISC 支持的寻址方式</li>\n<li>CISC 通过微程序控制技术实现；</li>\n<li>RISC 增加了通用寄存器，硬布线逻辑控制为主，采用流水线</li>\n<li>CISC 的研制周期长</li>\n<li>RISC 优化编译，有效支持高级语言</li>\n</ol>\n<h2 id=\"arm的cpu内部寄存器\"><a class=\"anchor\" href=\"#arm的cpu内部寄存器\">#</a> ARM 的 CPU 内部寄存器</h2>\n<p>解决了一个问题，又出现了新的问题～～(我那该死的探索欲啊)~~<br />\nARM 架构的 CPU 的内部寄存器有哪些，具体代表什么作用</p>\n<p>ARM 内部有 17 个寄存器，R0~R15 和一个 PSR 寄存器，大致如下图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.dtnj6p5voaw.jpg\" alt=\"image\" /><br />\n 其中 R0~R12 是通用寄存器<br />\n R13 是 SP 寄存器，SP 寄存器又分为 <code>sp_process</code>  和 <code>sp_main</code> , 分别用于 <code>main</code>  的主栈和子函数的 <code>sp_process</code>  过程栈，启动文件中设置的 <code>sp</code>  就是这个文件<br />\n这里的两个寄存器在 keil 是可见的<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.31psuz72bc00.jpg\" alt=\"image\" /><br />\nR14 是 LR 寄存器，用来保存返回地址，函数调用，例如，在使用 BL 之前需要将地址存入到 LR 中<br />\n R15 是 PC 寄存器，程序寄存器，表示当前执行指令的下一条指令。例如，当前执行到 0x12 地址上的  <code>mov R0, #8</code> , 那么 PC 的值则为 0x1A<br />\nPSR 寄存器的情况又有些不同，要分为 cortex-M3/M4 内核和 A7 核</p>\n<h3 id=\"m核\"><a class=\"anchor\" href=\"#m核\">#</a> M 核</h3>\n<p>PSR 实际上是 xPSR<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3jtxfp5tvs20.jpg\" alt=\"image\" /><br />\nxPSR 等价于三个寄存器</p>\n<ul>\n<li>IPSR: 中断 PSR</li>\n<li>EPSR: 执行 PSR</li>\n<li>APSR: 应用 PSR</li>\n</ul>\n<p>这三个寄存器可以一起访问也可以分开访问</p>\n<pre><code class=\"language-ASM\">MRS R0, APSR  ; 读取APSR\nMSR APSR, R0  ; 写入APSR\nMRS R0, PSR   ;写入组合程序状态\nMSR PSR, R0   ;写组合程序状态\n</code></pre>\n<h4 id=\"xpsr各个寄存器控制的位\"><a class=\"anchor\" href=\"#xpsr各个寄存器控制的位\">#</a> xPSR 各个寄存器控制的位</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4n144w85e3o0.jpg\" alt=\"image\" /><br />\n 其在 keil 中视图如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2z4k0x924600.jpg\" alt=\"image\" /></p>\n<p>APSR 各个位的含义<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.63sl0usm6y80.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4zx9vd9o3c40.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5380s8s84qc0.jpg\" alt=\"image\" /></p>\n<h3 id=\"a核\"><a class=\"anchor\" href=\"#a核\">#</a> A 核</h3>\n<p>PSR 实际上是 CPSR,Current Program Status Register<br />\nA7 充分的利用了每一位，每一位的 bit 都有自己的含义<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3ak1ce85wgu0.jpg\" alt=\"image\" /><br />\nA7 内部还有更多寄存器类型，例如 FIQ、IRQ、ABT 之类的， 更多的可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb2N1bWVudGF0aW9uL2RkaTA0MDYvbGF0ZXN0Lw==\">官方文档</span> B1-1145<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.36pautl6uz80.jpg\" alt=\"image\" /></p>\n<h3 id=\"一些想法\"><a class=\"anchor\" href=\"#一些想法\">#</a> 一些想法</h3>\n<p>CPU 的内部的寄存器只有这些，而像 IIC, GPIO 等一系列的外设属于外设的寄存器，仅仅是因为他们在 CPU 的寻址范围内，所以可以实现像内存一样的控制</p>\n<p>其实只有汇编层面上的寄存器才和 CPU 相关，C 语言层面的寄存器更多的是一个内存地址，转化到汇编就是将地址存入十二个寄存器之后进行操作而已</p>\n<h2 id=\"arm的汇编到底是啥\"><a class=\"anchor\" href=\"#arm的汇编到底是啥\">#</a> ARM 的汇编到底是啥</h2>\n<p>说起这个问题，汇编的名字是  <code>ASM</code> , 但是很有意思，会发现  <code>ATT</code>  和  <code>Intel</code>  的汇编都是 ASM, 但是差距还是很大的<br />\n前面也说了，RISC 和 CISC 的指令集不一样，而且 ARM 官方给出了推出了几次指令集，ARM、Thumb、Thumb2， 以及 UAL.</p>\n<p>最开始的时候 ARM 公司只推出了 Thumb 和 ARM 两种汇编语言，两种指令都可以在 MCU 中执行，例如 STM32F103 系列<br />\n Thumb 是 16 位的指令集合，节省空间；而 ARM 是 32 位的指令集合，高效但浪费空间</p>\n<h3 id=\"如何区别两种指令集\"><a class=\"anchor\" href=\"#如何区别两种指令集\">#</a> 如何区别两种指令集</h3>\n<p>ARM 公司给出了两个两个关键字 <code>CODE16</code>  和  <code>CODE32</code> <br />\n 当用 CODE16, 表示下面的代码工作于 Thumb 指令集<br />\n用 CODE32, 表示下面的代码工作于 ARM 指令集</p>\n<p>指令集会影响到 CPU 的取指译码一连串的操作，所以 CPU 也必须实时的知道<br />\n所以在 PSR 寄存器中设有一个 T 标志位，用于区分当前处于哪一个指令集<br />\n为 0 的时候是 ARM 指令集，为 1 时时 Thumb 指令集</p>\n<h3 id=\"cpu如何调用函数\"><a class=\"anchor\" href=\"#cpu如何调用函数\">#</a> CPU 如何调用函数</h3>\n<p>试想一个问题，函数 A 使用 Thumb 指令写的，函数 B 是使用 ARM 指令集编写，如何调用 A/B</p>\n<p>事实上，可以直接将 A/B 的地址写入 PC 寄存器，来实现这个功能</p>\n<p>但是再细想一下，如何让 CPU 运行再 Thumb 模式下运行 A, 而再运行 B 的时候处于 ARM 模式<br />\n做个手脚:<br />\n 调用函数 A 时，让 PC 寄存器的 BITO 等于 1，即: PC = 函数 A 地址 +(1&lt;&lt;0);<br />\n 调用函数 B 时，让 PC 寄存器的 BITO 等于 0:，即：PC = 函数 B 地址</p>\n<p>再进一步，如何再执行 A 时调用 ARM 指令的函数 B, 在执行完毕后回到 Thumb 指令函数 A</p>\n<pre><code class=\"language-asm\">Bx B_Addr\nBx A_Addr +1(+1之后会使能Bit0位)\n</code></pre>\n<p>但是这样子还是存在问题。例如，同一个程序中，有些地方需要高效的 ARM 指令集，而有些则需要 Thumb 低空间<br />\n为了解决这麻烦的问题，ARM 公司推出了 Thumb2 指令集，支持 CODE16 和 CODE32 混合编程</p>\n<p>ARM, Thumb, Thumb2, 每一种汇编都有自己的语言风格，尽管相似，但是会有不同的特性，这样子就增加了程序员的学习成本<br />\n因此 ARM 公司就推出了统一的汇编语言 UAL, UAL 支持 CODE32,CODE16,Thumb 三种风格的语言，这样 ARM 的汇编语言的发展就算是基本成型了</p>\n<h2 id=\"基本的ual汇编语法\"><a class=\"anchor\" href=\"#基本的ual汇编语法\">#</a> 基本的 UAL 汇编语法</h2>\n<p>汇编语言本身大差不差，大致会分为，内存操作指令，输出处理指令 以及 转跳指令三大类</p>\n<h3 id=\"内存操作指令\"><a class=\"anchor\" href=\"#内存操作指令\">#</a> 内存操作指令</h3>\n<h4 id=\"单寄存器操作\"><a class=\"anchor\" href=\"#单寄存器操作\">#</a> 单寄存器操作</h4>\n<p>内存操作指令大致分为两大类：涉及内存读取和不涉及内存读取</p>\n<p>所谓的涉不涉及内存，其实就是只涉及立即数和寄存器的操作，可以是寄存器到寄存器，也可以是立即数到寄存器<br />\n不过有一点需要注意，立即数是有一定限制的.<br />\n 立即数必须满足，可以通过对一个 8 位数字进行向右旋转的操作得到一个在 32 位字中可以用作立即数的值<br />\n例如， <code>mov r0, #10</code>  是可以的但是 <code>mov r0, #10086</code>  就不行</p>\n<pre><code class=\"language-ASM\">MOV\t\tR0, #0x20000\nMOV\t\tR1, #0x10\nMOV\t\tR2, #0x12\n</code></pre>\n<p>涉及内存的操作，也需要经过寄存器，通过 <code>STR</code>  和 <code>LDR</code>  来实现这个功能<br />\n例如，读取 0x20000 的数据到 R1 中，读取 0x40000 中的数据到 R3 中</p>\n<pre><code class=\"language-ASM\">mov r0, #0x20000  ; 0x20000 地址放入r0\nstr r0, [r2]        ; 将数据放入r1的地址\nmov r0, #0x40000  ; 将地址写入r0\nldr r3, [r0]        ; 将地址中的数据读入r3\n</code></pre>\n<p>除了这些基本的操作，还有一些更复杂的操作</p>\n<pre><code class=\"language-ASM\">STR\t\tR2, [R0]              ; R2的值存到R0所示地址\nSTR\t\tR2, [R0, #4]          ; R2的值存到R0+4所示地址\nSTR\t\tR2, [R0, #8]!         ; R2的值存到R0+8所示地址, R0=R0+8\nSTR\t\tR2, [R0, R1]          ; R2的值存到R0+R1所示地址\nSTR\t\tR2, [R0, R1, LSL #4]  ; R2的值存到R0+(R1&lt;&lt;4)所示地址\nSTR\t\tR2, [R0], #0X20       ; R2的值存到R0所示地址, R0=R0+0x20\nMOV\t\tR2, #0x34\nSTR\t\tR2, [R0]              ; R2的值存到R0所示地址\nLDR\t\tR3, [R0], +R1, LSL #1 ; R3的值等于R0+(R1&lt;&lt;1)所示地址上的值\n</code></pre>\n<h4 id=\"多寄存器操作\"><a class=\"anchor\" href=\"#多寄存器操作\">#</a> 多寄存器操作</h4>\n<p>当然除了读取单个寄存器还可以实现读个寄存器的读取<br />\n基本语法如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.bbr7un23kmw.jpg\" alt=\"image\" /></p>\n<p>对于多寄存器的操作来说，会有 LDM 和 STM 指令的 RegList 列表寄存器存储如何对应的问题<br />\n就记住一句话：低标号 Reg 对应低地址减法也如此<br />\n下面是一些 <code>STMA</code>  操作，LDM 也类似<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6rhvfh8cv1o0.jpg\" alt=\"image\" /></p>\n<h4 id=\"实现栈操作\"><a class=\"anchor\" href=\"#实现栈操作\">#</a> 实现栈操作</h4>\n<p>到这里，就会发现，这个操作非常的像栈，这里来模拟一下进出栈的操作</p>\n<p>这里使用满减栈:</p>\n<ol>\n<li>压栈，先减后存，STMFD</li>\n<li>出栈，先出后减，LDMFD</li>\n</ol>\n<p>前面说过栈指针是 SP, 咱们将 R1~R3 的数值存入压入栈中，然后，更改 R1~R3 的值之后存，再出栈，如果数据还原则表示入栈成功</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.34cfbkaaw6w0.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2bgcm06wvesk.jpg\" alt=\"image\" /></p>\n<h3 id=\"数据处理指令\"><a class=\"anchor\" href=\"#数据处理指令\">#</a> 数据处理指令</h3>\n<p>相较于 读取指令，数据操作的指令就更加多了，加减乘除，移位，清零等等<br />\n这里只介绍加减和为位操作以及简单的比较指令</p>\n<h4 id=\"加法指令add\"><a class=\"anchor\" href=\"#加法指令add\">#</a> 加法指令：ADD</h4>\n<p>语法:  <code>add 目的寄存器, 加数1, 加数2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #2\n\t\tadd\t\tr1, r1, r0\n</code></pre>\n<h4 id=\"减法指令sub\"><a class=\"anchor\" href=\"#减法指令sub\">#</a> 减法指令：SUB</h4>\n<p>语法:  <code>sub 目的寄存器, 被减数数1, 减数2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #2\n\t\tmov\t\tr1, #1\n\t\tsub\t\tr1, r1, r0\n</code></pre>\n<h4 id=\"位操作\"><a class=\"anchor\" href=\"#位操作\">#</a> 位操作</h4>\n<h5 id=\"and\"><a class=\"anchor\" href=\"#and\">#</a> AND</h5>\n<p>语法:  <code>and 目的寄存器, 数值1, 数值2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #2\n\t\tmov\t\tr1, #1\n\t\tand\t\tr1, r1, r0 ; r1变成0\n</code></pre>\n<h5 id=\"bic\"><a class=\"anchor\" href=\"#bic\">#</a> BIC</h5>\n<p>语法:  <code>bic 目的寄存器, 数值1, 数值2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #3\n\t\tbic\t\tr1, r1, r0 ; r1 变成2\n</code></pre>\n<h5 id=\"orr\"><a class=\"anchor\" href=\"#orr\">#</a> ORR</h5>\n<p>语法:  <code>orr 目的寄存器, 数值1, 数值2</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #2\n\t\torr\t\tr1, r1, r0 ;r1变成3\n</code></pre>\n<h4 id=\"比较\"><a class=\"anchor\" href=\"#比较\">#</a> 比较</h4>\n<h5 id=\"比较指令-cmp\"><a class=\"anchor\" href=\"#比较指令-cmp\">#</a> 比较指令 CMP</h5>\n<p>语法:  <code>cmp r1, r2</code> <br />\ncmp 指令执行后会影响 psr 的 C 位，根据比较结果实现置位和<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5sumnuksm000.jpg\" alt=\"image\" /></p>\n<h5 id=\"测试tst\"><a class=\"anchor\" href=\"#测试tst\">#</a> 测试 TST</h5>\n<p>不修改数据结果来进行 <code>and</code>  操作，来测试数据</p>\n<p>语法:  <code>tst 寄存器1, 寄存器</code></p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #1\n\t\tmov\t\tr1, #2\n\t\ttst\t\tr1, r0\n</code></pre>\n<h3 id=\"转跳指令\"><a class=\"anchor\" href=\"#转跳指令\">#</a> 转跳指令</h3>\n<p>转跳指令其实不止这两个，但是这两个是函数调用的接口</p>\n<p>B: Branch 转跳<br />\n BL:Branch with Link, 转跳前将返回地址存入 LR<br />\nBX: Branch and exechange, 根据转跳地址的 BIT0, 自动切换 ARM 指令集和 Thumb 指令集<br />\n BXL: 同上，但是转跳前保存返回地址</p>\n<p>语法如图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4bzwss3uvj80.jpg\" alt=\"image\" /></p>\n<p>由于模拟器不能模拟 BX 系列指令，这里只有 B 指令的例子</p>\n<pre><code class=\"language-ASM\">\t\tmov\t\tr0, #10\n\t\tBL\t\tDelay\n\t\t\n\t\tmov\t\tr2, #0x1\n\t\t\n\t\t\nDelay\n\t\tSUBS\tr0, r0, #1\t;等价于下面两句话\n\t\t;SUB\t\tr0, r0, #1\n\t\t;CMP\t\tr0, #0\n\t\tBNE\t\tDelay\n\t\tmov\t\tPC, LR\t\n\t\t; BL 的返回地址在LR中, 要通过mov来实现\n\t\t; 没有类似x86的 ret 指令\n</code></pre>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<p>由于个人知识储备有限，文章可能有些虎头蛇尾，后期等查阅完毕相关的文档后在更新和修正<br />\n文章如有不恰当之处，望诸位大佬斧正</p>\n<h2 id=\"参考文献\"><a class=\"anchor\" href=\"#参考文献\">#</a> 参考文献</h2>\n<p><strong>[1] <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMTAwYXNrLm5ldC9wL3RfcGMvY291cnNlX3BjX2RldGFpbC9jb2x1bW4vcF81Zjg1Njc3YmU0YjA2YWZmMWEwM2NlY2I/Y29udGVudF9hcHBfaWQ9\">https://www.100ask.net/p/t_pc/course_pc_detail/column/p_5f85677be4b06aff1a03cecb?content_app_id=</span></strong><br />\n<strong>[2] STM32MP157 裸机开发完全手册</strong><br />\n<strong> [3] DM00327659</strong><br />\n<strong> [4] ARM Cortex-M3 与 Cortex-M4 权威指南</strong><br />\n<strong> [5] DDI0406C_d_armv7ar_arm</strong></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "ARM",
                "ARM"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%8B%BE%E9%81%97/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E6%8B%BE%E9%81%97/",
            "title": "C语言拾遗",
            "date_published": "2023-06-15T22:18:38.000Z",
            "content_html": "<h1 id=\"c语言语法\"><a class=\"anchor\" href=\"#c语言语法\">#</a> C 语言语法</h1>\n<h2 id=\"static-用法\"><a class=\"anchor\" href=\"#static-用法\">#</a> static 用法</h2>\n<p>限制作用域，存储方式变为静态存储</p>\n<ol>\n<li>修饰全局变量，限制作用域。在链接过程中，多文件中的重名变量不会冲突.</li>\n<li>修饰局部变量，延长生命周期，存储方式变为静态存储只进行一次初始化.</li>\n<li>修饰函数，限制函数作用域，局限在文件内部。在连接过程中避免和多文件中同名函数冲突</li>\n</ol>\n<h2 id=\"define-和-const-的区别\"><a class=\"anchor\" href=\"#define-和-const-的区别\">#</a>  <code>#define</code>  和  <code>const</code>  的区别</h2>\n<ol>\n<li><code>const</code>  定义的常量在程序运行过程中只有一份拷贝 (因为它是全局的只读变量，存放在静态区), 而  <code>#define</code>  定义的宏常量在内存中有若干个拷贝 (没有存空间)</li>\n<li><code>#define</code>  宏是在预编译阶段进行替换，而  <code>const</code>  修饰的只读变量是在编译的时候确定其值</li>\n<li><code>#define</code>  宏没有类型，而  <code>const</code>  修饰的只读变量具有特定的类型</li>\n<li><code>#define</code>  不能被调试， <code>const</code>  可以被调试</li>\n</ol>\n<h2 id=\"undef-宏\"><a class=\"anchor\" href=\"#undef-宏\">#</a>  <code>#undef</code>  宏</h2>\n<ul>\n<li>作用:  <code>#undef</code>  用于取消前面的定义的宏标识符</li>\n<li>常见用法:</li>\n</ul>\n<ol>\n<li>防止宏定义冲突</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX</span> <span class=\"token expression\"><span class=\"token number\">200</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX = %d\\n\"</span><span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">MAX</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> MAX <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX = %d\\n\"</span><span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>用于限制宏的作用范围</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TEST_A</span> <span class=\"token expression\"><span class=\"token number\">1</span> </span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TEST_CLASS_A</span> <span class=\"token expression\">clase T1 </span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"TEST.h\"</span> </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">TEST_A </span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">TEST_CLASS_A</span></span></pre></td></tr></table></figure><p>这段代码表示  <code>TEST_A 1</code>  和  <code>TEST_CLASS_A clase T1</code>  在出  <code>TEST.h</code>  文件后无效<br />\n可以有效的减少宏的冲突</p>\n<h2 id=\"枚举转字符\"><a class=\"anchor\" href=\"#枚举转字符\">#</a> 枚举转字符</h2>\n<p>相对于 宏定义来说，枚举变量更为利于调试，但是大量的枚举变量，很难让人记住，并且对于枚举值来说，使用  <code>switch case</code>  来实现打印出枚举变量，实在是有些费时费力.<br />\n 作为一个程序员我们追求的就是高效与简洁的艺术 (就是偷懒), 所以我们要找到一种更高效的方法，宏编程</p>\n<p>在这之前需要知道 <strong> <code>#k</code>  会把  <code>k</code>  变为字符串</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MACROSTR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> #k</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义枚举成员</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">X_NUMBERS</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kZero <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kOne <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kTwo <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>    </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kThree <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>  </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kFour <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>   </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token expression\"><span class=\"token function\">X</span><span class=\"token punctuation\">(</span>kMax <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 定义枚举类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">X</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span> Enum<span class=\"token punctuation\">,</span></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  X_NUMBERS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">X</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> kConst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 定义枚举类型所对应的字符串</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>kConstStr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">X</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> <span class=\"token function\">MACROSTR</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    X_NUMBERS</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">X</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出结果如下:</p>\n<pre><code>Hello World!\n\nkZero = 10\nkOne = 20\nkTwo = 30\nkThree = 40\nkFour = 50\nkMax = 60\n\n</code></pre>\n<p>看结果只能知道 枚举类型被转成了字符，所以需要 使用  <code>gcc -E -o main.c main.i</code> <br />\n 看一下预编译后的结果<br />\n如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"enumToStr.c\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"&lt;built-in>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"&lt;command-line>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># <span class=\"token number\">1</span> <span class=\"token string\">\"enumToStr.c\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre># <span class=\"token number\">11</span> <span class=\"token string\">\"enumToStr.c\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  kZero <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> kOne <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> kTwo <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> kThree <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> kFour <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> kMax <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> kConst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>kConstStr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">\"kZero = 10\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kOne = 20\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kTwo = 30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kThree = 40\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kFour = 50\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kMax = 60\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>很明显的看到 枚举被转换成了字符串，但是仍然存在一些问题字符串打印会带上数字，数值不一定的枚举，无法直接作为索引来查找字符串进行打印</p>\n<h2 id=\"union\"><a class=\"anchor\" href=\"#union\">#</a> union</h2>\n<p>union 最大的作用是用于节省空间，例如</p>\n<p>而现在配合上结构体和 C99 的位字段，则可以进一步放大优势，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> net_work <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1-OneNET 接入成功\t\t0-OneNET 接入失败</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> err_count <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误计数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> heart_beat <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 心跳</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> get_ip <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 获取到最优登录 IP</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> lbs <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 1 - 已获取到了位置坐标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> lbs_count <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取计数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> connect_ip <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接了 IP</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> err_check <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误检测</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> reverse <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> bit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> all<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> OneNet_Statue_t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>假设我们 一个变量  <code>OneNet_Statue_t oneNet_SR;</code>  我们可以这样子对变量进行赋值  <code>oneNet_SR.all=0x0010;</code></p>\n<p>当我们要检测变量的某一个位的时候，就可以使用  <code>network = oneNet_SR.net_work</code>  来获取状态</p>\n<h1 id=\"memmove-和-memcpy-的区别\"><a class=\"anchor\" href=\"#memmove-和-memcpy-的区别\">#</a>  <code>memmove</code>  和  <code>memcpy</code>  的区别</h1>\n<p>首先  <code>memcpy</code>  和  <code>memmove</code>  都是 c 语言库函数，位于  <code>string.h</code>  中的函数.<br />\n 其函数原型分别为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作用都是拷贝一段内存的内容，到目的地址。区别在于，<strong>在内存重叠时， <code>memmove</code>  可以保证数据的正确复制，而  <code>memcpy</code>  不可以</strong><br />\n情况如图<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/memove.png\" alt=\"memmove\" /><br />\n 对于第一种情况  <code>memcpy</code>  可以完美解决，但是对于后面这两种  <code>memcpy</code>  就无法保证复制结果.<br />\n 所以  <code>memcpy</code>  实现方法因该如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对 其进行分类讨论则可得到  <code>memmove</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">my_memmove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tmp_s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp_d <span class=\"token operator\">></span> tmp_s <span class=\"token operator\">&amp;&amp;</span> tmp_s<span class=\"token operator\">+</span>n <span class=\"token operator\">></span> tmp_d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 内存重叠</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      tmp_d <span class=\"token operator\">=</span> tmp_d<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      tmp_s <span class=\"token operator\">=</span> tmp_s<span class=\"token operator\">+</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 先将回被重叠的地方存入目的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">--</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token operator\">*</span>tmp_d<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>tmp_s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> dst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"柔性数组0-长数组\"><a class=\"anchor\" href=\"#柔性数组0-长数组\">#</a> 柔性数组 (0 长数组)</h2>\n<p>这道题是我唯一不确定的题目，应为用到的太少了 (个人)<br />\n 题目大致如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Data_t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">short</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Flex_Array_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Flex_Array_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Flex_Array_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Flex_Array_t <span class=\"token operator\">*</span>Array <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.value = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.temp = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.len = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.arr[0] = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array.arr[1] = %x\\n\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token operator\">-></span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里考了两个知识点，一个是字节对齐，另一个是柔性数组.<br />\n 在 32 位机的条件下，4 字节对齐，所以大小是 1+4+2 +(3+2)= 12 字节，0 长数组不占空间，<br />\n0 长数组，在 ISO 标准里是不支持的，但是 gcc 在 c99 中预先提供了支持。相关文档再此:&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy9aZXJvLUxlbmd0aC5odG1s\">Arrays of Length Zero</span>.&quot;<br />\n 我感觉 0 长数组的结构体其实就和  <code>extern int arr[]</code>  极其类似 (不过没有跨文件作用域的效果), 在没有定义变量之前都不会产生存储， <code>sizeof</code>   的结果下他们并不占用空间。对于  <code>Flex_Array_t</code>  也是同一个道理.<br />\n 其实，严格意义上来说，0 长就类似数组首地址，而数组的首地址仅仅是一个标签，不占用空间，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其汇编代码如下<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/%E6%9C%AA%E8%B6%8A%E7%95%8C%E6%95%B0%E7%BB%84.png\" alt=\"ASM_Array\" /><br />\narr 存储在 为一个内存标签，和 main 标签作用类似 (.comm 是声明未初始化的内存段空间)<br />\n<strong> PS: 这也是指针和数组首地址的最大不同</strong></p>\n<p>回到题目，这道题目在弄清楚这两个问题和就变简单了， <code>buf</code>  的大小为 14, 那么  <code>buf</code>  被 赋给  <code>Array</code>  的时候，就是从  <code>arr[0]</code>  开始赋值到  <code>arr[13]</code>  为止</p>\n<p>那么就可以先得出  <code>Array.arr[0]</code>  和  <code>Array.arr[1]</code>  分别为  <code>0x0a</code>  和  <code>0x0b</code> , 因为结构体的数组不占空间，多出的那  <code>len</code>  必然是给  <code>arr[0]</code>  的.<br />\n 余下的就很好推断了  <code>Array.value = 0</code> , 补齐 3 字节， <code>Array.temp = 0x07060504</code> ,  <code>int</code>  本为 4 字节不用补齐.  <code>Array.len = 0x0908</code> ,  <code>short</code>  类型补齐 2 字节.<br />\n 嗯？！到这里就有一个大问题了既然补齐了  <code>short</code>  两个字节，那么为什么  <code>arr</code>  数值不是未知数呢？</p>\n<p>前面说过 柔性数组 大小为 0, 我们开辟的空间大小为 结构体大小大再多上 2 字节.<br />\n 我们使用  <code>malloc</code>  函数开辟出的空间是连续的所以对于 柔性数组来说，不管前面补没补齐，都从上一个数据类型结束初开始计算，算是一个 c99 的特性吧.<br />\n 具体原因我以后在琢磨琢磨.</p>\n<h2 id=\"dowhile0宏定义中的作用\"><a class=\"anchor\" href=\"#dowhile0宏定义中的作用\">#</a>  <code>do&#123;..&#125;while(0)</code>  宏定义中的作用</h2>\n<p>------------20230615----------------</p>\n<p>曾经见到过这样的宏</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__set_task_state</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">,</span> state_value<span class=\"token punctuation\">)</span>      </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>一度不知道为什么要用 <code>do&#123;&#125;while(0)</code>  这种结构，在我看来它也可以这样实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__set_task_state</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">,</span> state_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>tsk<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr></table></figure><p>但是今天再找文献的时候发现一篇有意思的文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGl4ZWxzdGVjaC5uZXQvYXJ0aWNsZS8xMzkwNDgyOTUwLWRvLSU3Yi0lN2Qtd2hpbGUtKDApLWluLW1hY3Jvcw==\">原文链接</span>刷新的我对这个写法的认知</p>\n<p>来自 Google 的一位 linux 内核开发工程师是这么说的</p>\n<p>do{...}while(0) is the only construct in C that lets you define macros that always work the same way</p>\n<p>大致意思是 do {...} while (0) 是 C 中唯一允许您定义始终以相同方式工作的宏的构造</p>\n<p>来看个例子，如果有这么个宏</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">foo</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这样使用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这会被转译为:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>能够正常执行，但是这种情况</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将会被解释为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>很显然，这是不符合我们的逻辑的，它没有办法和 do {} while (0) 一样正常工作</p>\n<p>如果我们把这个宏重用 do {...} while (0), 重新定义</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">foo</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>该语句功能上等价于前者，do 能确保大括号里的逻辑能被执行，而 while (0) 能确保该逻辑只被执行一次，即与没有循环时一样<br />\n语句被解释为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Semantically<span class=\"token punctuation\">,</span> it's the same as<span class=\"token operator\">:</span></pre></td></tr></table></figure><p>从本质上的效果来说，上面等价于下面这段代码的逻辑</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么为啥不用 <code>&#123;&#125;</code>  直接括起来呢</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">foo</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><p>这对于上面举的 if 语句的确能被正确扩展，但是针对下面这段代码就会出错</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>feral<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">bin</span><span class=\"token punctuation\">(</span>wolf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对应拓展为</p>\n<pre><code class=\"language-C\">if (!feral) \n&#123;\n    bar(wolf);\n    baz(wolf);\n&#125;;\nelse\n    bin(wolf);\n</code></pre>\n<p>很显然，存在语法错误.<br />\n 至于循环的问题，其实不用担心，一般来说，while 都会被编译器优化</p>\n<h3 id=\"一些思考\"><a class=\"anchor\" href=\"#一些思考\">#</a> 一些思考</h3>\n<p>其实认真一想，如果我只有一条语句也给 <code>if</code>  或者 <code>while</code>  加上括号<br />\n那么，对于 <code>#define foo(x)  &#123; bar(x); baz(x); &#125;</code>  这个宏<br />\n在下面这段代码也是正常运行的</p>\n<pre><code class=\"language-C\">```C\nif (!feral) \n&#123;\n    &#123;\n        bar(wolf);\n        baz(wolf);\n    &#125;   ;\n&#125;\nelse\n&#123; \n    bin(wolf);\n&#125;\n</code></pre>\n<p>是不是突然在想这个东西的意义是啥了 (狗头), 其实认真想一想，咱们写代码除了自己用，还会给别人使用<br />\n你永远不知道你的队友使用哪种风的编码方式，这也是 Google 那位大佬想要表示的本意:<br />\n 无论你怎么调用这种风格的宏它都不会出现语法错误</p>\n<h1 id=\"编译器特性\"><a class=\"anchor\" href=\"#编译器特性\">#</a> 编译器特性</h1>\n<h2 id=\"条件分支和循环分支可能传谣\"><a class=\"anchor\" href=\"#条件分支和循环分支可能传谣\">#</a> 条件分支和循环分支 (可能传谣)</h2>\n<p>工作的时候听到前辈说: while 不加括号只有分号会导致重起，if 语句也是<br />\n就类似这样的代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* while 部分 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* if 部分 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我去追问了一下，但是他们说没办法复现，是之前遇到的问题，上 google 和 Bing 逛了一圈没发现相对应的 bug<br />\n 不过还是先记录下来，毕竟公司用的 ADS 1.2, 可能是编译器的问题，一切检测还是村寻 ANSI C<br />\n 自己再 Keil 的 ARMCCV5 和 ARMCLANGV6 中都暂时未发现对应的问题，等后面如果遇到，那就用对应的编译器生成汇编看看</p>\n<p>------------20230615----------------</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "声明,学习笔记"
            ]
        },
        {
            "id": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/",
            "url": "https://to-ywz.github.io/work/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/",
            "title": "面试小结",
            "date_published": "2023-03-14T03:23:33.000Z",
            "content_html": "<p>今天面试了一个很有趣的企业，HR 超级友善，虽然技术有一些问题没有回答上来，（挠头）</p>\n<p>例如，舵机的控制脉宽，和脉宽周期 还有 modbus rtu 协议的开始和结束的条件，以及位置 PID（本质是一样的嘛）</p>\n<p>趁这次机会回顾一下这些内容</p>\n<h1 id=\"舵机脉宽\"><a class=\"anchor\" href=\"#舵机脉宽\">#</a> 舵机脉宽</h1>\n<h2 id=\"舵机控制信号\"><a class=\"anchor\" href=\"#舵机控制信号\">#</a> 舵机控制信号</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6hyx804jeqc0.jpg\" alt=\"image\" /></p>\n<h1 id=\"uart\"><a class=\"anchor\" href=\"#uart\">#</a> UART</h1>\n<h2 id=\"疑惑\"><a class=\"anchor\" href=\"#疑惑\">#</a> 疑惑</h2>\n<h3 id=\"uart是不是协议\"><a class=\"anchor\" href=\"#uart是不是协议\">#</a> UART 是不是协议</h3>\n<p>技术面说 UART 不是协议，当时没反应过来就顺着说 UART 是外设。</p>\n<p>但是等缓过来思考 UART 的确是一个协议，因为他是被设计出来用于将并行数据转化为并行数据的，有开始信号，有结束信号，还可以有校验位，严格意义上来说串口是物理层通信协议。</p>\n<p>与 IIC 和 SPI 实在同一层的，只不过 IIC 和 SPI 还涉及数据链路层 更偏向于 LLC 子层</p>\n<p>而 Modbus-RTU 虽然是在物理层和数据链路层实现的协议，但是在实际的工业控制中会被列为应用层，需要具体问题具体分析</p>\n<h3 id=\"uart与串口的关系\"><a class=\"anchor\" href=\"#uart与串口的关系\">#</a> UART 与串口的关系</h3>\n<p>UART 是一种串行通信接口，它定义了数据传输的格式和机制</p>\n<p>而串口通常指的是连接计算机与外部设备的串行通信接口，它也是一种串行通信接口</p>\n<p>在计算机中，串口通常是指 RS-232 串口，它是一种标准的串行通信接口</p>\n<p>RS-232 串口支持异步通信方式，并且使用了 UART 协议来进行数据传输</p>\n<p>在 RS-232 串口中，每个字节都由起始位、数据位、校验位和停止位组成，构成了 UART 协议定义的数据帧结构</p>\n<p>所以 UART 和串口之间的关系是，UART 定义了数据传输的格式和机制，而串口（如 RS-232 串口）则是一种支持 UART 协议的物理接口</p>\n<h2 id=\"协议\"><a class=\"anchor\" href=\"#协议\">#</a> 协议</h2>\n<h3 id=\"波特率\"><a class=\"anchor\" href=\"#波特率\">#</a> 波特率</h3>\n<p>波特率是 UART 协议，或者说所有异步串行协议，非常重要的一个概念，即单位时间内（1 秒）可表示的 bit 位个数，或者也可以表述为 bit 位宽的倒数</p>\n<p>例如一个波特率为 115200 的 UART 波形表示 1 秒可容纳 115200 个 bit 位，也就是说每一位 bit 数据占大约 8.68uS 的时长，即 8.68bit/s<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.29t68ob44aqs.jpg\" alt=\"image\" /></p>\n<h3 id=\"时序\"><a class=\"anchor\" href=\"#时序\">#</a> 时序</h3>\n<h4 id=\"空闲信号\"><a class=\"anchor\" href=\"#空闲信号\">#</a> 空闲信号</h4>\n<p>设备之间不传输数据时以持续的高电平表示空闲</p>\n<p>空闲位持续时间越长，两个数据帧间隔也越长，单位时间传输的数据就越少</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6d7lfqh2aac0.jpg\" alt=\"image\" /></p>\n<h4 id=\"起始位\"><a class=\"anchor\" href=\"#起始位\">#</a> 起始位</h4>\n<p>UART 接收端会一直检测信号线上的电平变化</p>\n<p>开始传输数据时，发送端将信号线从高电平拉到低电平结束空闲状态，并保持一个 bit 位的时长</p>\n<p>接收器检测到高低电平转换时，开始接收信号</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6d7lfqh2aac0.jpg\" alt=\"image\" /></p>\n<h4 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h4>\n<p>数据位包含传输的实际数据，如果使用了奇偶校验，那么数据位长为 5~8 bits<br />\n 如果没有使用奇偶校验，则位长为 5~9 bits<br />\n 在一般情况下，数据位为 8 bits，数据首先从最低有效位开始发送，高位在后</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.hftmmwctz1s.jpg\" alt=\"image\" /></p>\n<h4 id=\"校验位\"><a class=\"anchor\" href=\"#校验位\">#</a> 校验位</h4>\n<p>校验位可以用来提高传输的可靠性。如果信号在传输过程中因为干扰而导致某些位置的电平产生错误，通过计算接收的数据和校验位是否匹配即可判断数据是否有传输错误，从而给应用层提供有效信息来决定接受 / 丢弃对应的数据。</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.52o4r1mqv6c0.jpg\" alt=\"image\" /></p>\n<h4 id=\"停止位\"><a class=\"anchor\" href=\"#停止位\">#</a> 停止位</h4>\n<p>停止位表示一帧数据的结束，实际是一段时间的高电平</p>\n<p>停止位的时间长短可以设置为 1、1.5 或者 2bits 的停止位</p>\n<p>大部分情况使用 1bit 的停止位。</p>\n<p>UART 是一个异步协议，每一帧的开头可以用跳变沿来同步</p>\n<p>但是停止位只能通过波特率来计算相对位置，如果在停止位的位置识别到一个低电平，则会产生帧错误</p>\n<p>所以在通讯过程中，为了减少波特率的误差导致的问题，可以设置不同的停止位长度来适配</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1jkb9cvxp7b4.jpg\" alt=\"image\" /></p>\n<h3 id=\"数据帧\"><a class=\"anchor\" href=\"#数据帧\">#</a> 数据帧</h3>\n<p>UART 的协议帧由 1 位起始位，数据为 5-8 位，校验位 1 位 (可选) 和一位的停止位</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6qksemj3abc0.jpg\" alt=\"image\" /></p>\n<p>以字符 D 为例子，使用 8 位数据为，0 位校验位，形成的波形理论如下</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1lez0vxuwr0g.jpg\" alt=\"image\" /></p>\n<p>以字符  <code>D</code>  为例，其波形在示波器中实际为下图</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6qmgnzg9p040.webp\" alt=\"image\" /></p>\n<h1 id=\"modbus\"><a class=\"anchor\" href=\"#modbus\">#</a> MODBUS</h1>\n<p>modbus 分为三种，常用的是 modbus-RTU, 少部分是 Modbus-ASCII</p>\n<p>总体来说，MODBUS-RTU 比 MODBUS-ASCII 具有更高的传输效率，MODBUS-RTU 的传输速率通常可以达到 9600bps 或更高，而 MODBUS-ASCII 的传输速率一般在 1200bps 左右</p>\n<h2 id=\"modbus-rtu\"><a class=\"anchor\" href=\"#modbus-rtu\">#</a> Modbus RTU</h2>\n<p>ModBus RTU（Remote Terminal Unit）是 ModBus 协议最常见的实现方式，采用二进制数据传输，具有较高的传输效率和稳定性。它使用串行通信，支持 RS232 和 RS485 两种接口。在 RTU 模式下，每个字节可以传输两位十六进制字符。比如 0xAB 会直接以十六进制 0xAB（二进制 10101011）进行发送。其消息帧格式由以下部分组成：</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1lc0olvrbnr4.jpg\" alt=\"image\" /></p>\n<p>RTU 模式采用 16 位 CRC 校验，后续的命令 / 数据带有循环冗余校验的校验和。RTU 模式比较常用，而 ASCII 一般很少用</p>\n<h3 id=\"介质管理\"><a class=\"anchor\" href=\"#介质管理\">#</a> 介质管理</h3>\n<p>对于 ModBus-RTU 来说，对帧的时间管理，就是对介质的冲突管理</p>\n<p>ModBus-RTU 对于介质管理规定了 2 个重要的时间参数，以实现成帧、冲突管理等。参考下图</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1678957117951.68d47yw77t80.jpg\" alt=\"1678957117951\" /></p>\n<p>这个图可以用于断帧，也就时判断是否接收到一个完整的帧，因此只需要使用一个定时器在每次收到一个字节后，就重启一个 3.5 字节定时器，如果这个 3.5 字节定时器中断了，就证明收到了一个 Modbus 报文，至于这个报文是不是正确的报文，可以在进一步根据帧格式进行校验</p>\n<p>除此之外还规定了，当报文需要连续发送，字节间隔不得超过 1.5 字节时间<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6hrmwwuzn5s0.jpg\" alt=\"image\" /></p>\n<h3 id=\"modbus-ascii\"><a class=\"anchor\" href=\"#modbus-ascii\">#</a> Modbus ASCII</h3>\n<p>ModBus ASCII 采用 ASCII 码传输文本信息，每个 8Bit 字节都作为两个 ASCII 字符发送。相对 ModBus RTU 而言，它的传输效率较低，但具有更好的可读性。ModBus ASCII 也使用串行通信，并支持 RS232 和 RS485 两种接口，适用于短距离通信。在 ASCII 模式下，每个 8 位的字节拆分为两个 ASCII 字符进行发送，消息帧以英文冒号 “：” 开始，以回车和换行（CRLF）符号结束。例如十六进制数 0xAB，会被分解成 ASCII 字符 “A” 和 “B” 进行发送</p>\n<h1 id=\"pid\"><a class=\"anchor\" href=\"#pid\">#</a> PID</h1>\n<p>技术面说 位置式 PID 和 增量式 PID 没有区别</p>\n<p>虽然我觉得哪里不太对，但是没敢反驳，毕竟我对 PID 的理解还是有限的，所以我先来整理一下</p>\n<h2 id=\"普通pid\"><a class=\"anchor\" href=\"#普通pid\">#</a> 普通 PID</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5eos6j11aog0.jpg\" alt=\"image\" /></p>\n<p>正儿八经的 PID 公式如上， 离散化之后，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>d</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 都与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">K_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 以及采样时间  <code>T</code>  相关</p>\n<h2 id=\"位置式pid\"><a class=\"anchor\" href=\"#位置式pid\">#</a> 位置式 PID</h2>\n<p>在不考虑 PI 的情况下</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6iofatrs17g0.jpg\" alt=\"image\" /></p>\n<p>从公式中可以看出，比例部分只与当前的误差量有关，而积分部分则是系统过去偏差的累积</p>\n<p>所以很显然的可以看到位置式 PI 需要进行一个计算的累加从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">e_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>~<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>当 k 值较大时，消耗大量的空间</p>\n<p>但是，在实际实现中我们只会保留每一次积分的累计和，根本不需要大量的内存空间</p>\n<p>另外由于输出有可能超过允许值，因此需要对输出进行限幅， *** 而当输出限幅的时候，积分累加部分也应同时进行限幅 ***，以防输出不变而积分项继续累加，也即所谓的积分饱和过深</p>\n<h2 id=\"增量式pid\"><a class=\"anchor\" href=\"#增量式pid\">#</a> 增量式 PID</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6t49fpp59zk0.jpg\" alt=\"image\" /></p>\n<p>由于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">u(0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>，在具体编程操作中，对每一拍的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>u</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Δu(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">u</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> 进行累积，即为 PI 调节器的输出</p>\n<p>同样地，为了避免超过允许值， ** 仅需对输出限幅即可 **</p>\n<h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<p>可以理解为无论用增量叠加的方式来计算位置式 PI，还是直接计算，结果都是相同的</p>\n<p><strong>唯一的区别：位置式 PI 需要同时设置积分限幅和输出限幅，而增量式 PI 只需输出限幅</strong></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "求职",
                "面试"
            ]
        },
        {
            "id": "https://to-ywz.github.io/win11/Question/win11%E5%85%B3%E9%97%AD%E8%87%AA%E5%B8%A6%E7%9A%84%E7%B9%81%E4%BD%93%E5%88%87%E6%8D%A2/",
            "url": "https://to-ywz.github.io/win11/Question/win11%E5%85%B3%E9%97%AD%E8%87%AA%E5%B8%A6%E7%9A%84%E7%B9%81%E4%BD%93%E5%88%87%E6%8D%A2/",
            "title": "win11关闭自带的繁体切换",
            "date_published": "2023-01-22T10:01:15.000Z",
            "content_html": "<p>最近在使用，CCS 的时候总是会出现输入法变成繁体的问题，都是手动设置回去，一直没管它。新年新气象，这个问题年初一就要解决.</p>\n<p>去看了一下 win11 的快捷键映射。好家伙，简体繁体切换的快捷键和源码格式化的快捷键冲突了，这就忍不了</p>\n<p>繁体我压根用不到，所以这个给快捷键等于浪费，难怪有些时候格式化源码不好使，所以我决定关闭这个没用的快捷键</p>\n<h1 id=\"第一步-打开语言设置\"><a class=\"anchor\" href=\"#第一步-打开语言设置\">#</a> 第一步：打开语言设置</h1>\n<h2 id=\"方案一-wins-搜索语言设置\"><a class=\"anchor\" href=\"#方案一-wins-搜索语言设置\">#</a> 方案一:  <code>WIN+S</code>  搜索语言设置</h2>\n<p><code>win+s</code>  键，输入<strong>语言设置</strong></p>\n<p>说实话这是我最喜欢的方案，大部分系统设置我都是直接  <code>win+s</code>  然后搜索的，搜索到直接回车就能进入界面，方便快捷<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.50zve2dt86w0.jpg\" alt=\"image\" /></p>\n<h2 id=\"方案二-右键输入法图标\"><a class=\"anchor\" href=\"#方案二-右键输入法图标\">#</a> 方案二：右键输入法图标</h2>\n<p>右键中文的中字，选择设置 (<strong>用这种方法进入的可以直接转跳到 第四步</strong>)</p>\n<p>这个是在我不熟悉  <code>win+s</code>  按键常用的定位方法，也很快捷，不需要输入，毕竟可能处于这个问题时，输入法都是繁体，字都不一定认得全<br />\n而且这个方法还可以配置一些简单的 输入法设置，不需要打开新页面，之前我就是在这手动配置回简体的</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3p7erwis5we0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第二步-进入-语言与区域-界面\"><a class=\"anchor\" href=\"#第二步-进入-语言与区域-界面\">#</a> 第二步：进入 语言与区域 界面</h1>\n<p>先进入这个界面<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.46fqesz4laa0.jpg\" alt=\"image\" /></p>\n<p>进入界面后先点击 <strong>中文 (简体，中国)</strong> 最右侧的三个点，然后选择 <strong>语言选项</strong></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2zvxg5ln1yk0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第三步-进入-微软拼音-界面\"><a class=\"anchor\" href=\"#第三步-进入-微软拼音-界面\">#</a> 第三步：进入 微软拼音 界面</h1>\n<p>找到 <strong>微软</strong> 拼音选项点击三个点，然后选择<strong>键盘选项</strong></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4ilwcer93jw0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第四步-进入-按键-界面\"><a class=\"anchor\" href=\"#第四步-进入-按键-界面\">#</a> 第四步：进入 按键 界面</h1>\n<p>点击按键选项，转跳到按键界面<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5uq2s32lhkg0.jpg\" alt=\"image\" /></p>\n<h1 id=\"第五步-关闭热键\"><a class=\"anchor\" href=\"#第五步-关闭热键\">#</a> 第五步：关闭热键</h1>\n<p>找到热键，选择关闭即可，如果有需要可以自行设置热键</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4hedl2see1i0.jpg\" alt=\"image\" /></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "win11",
                "Question"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0-%E6%97%B6%E9%92%9F/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0-%E6%97%B6%E9%92%9F/",
            "title": "TMS320F28379D学习-时钟",
            "date_published": "2023-01-15T12:47:39.000Z",
            "content_html": "<p>虽然 28379D 有两个核，但工作时钟的配置方法还是一致的，所以可以从单核的角度来学习时钟配置的方法</p>\n<h1 id=\"时钟框图\"><a class=\"anchor\" href=\"#时钟框图\">#</a> 时钟框图</h1>\n<p>无论什么外设都离不开功能框图，所以还是先从功能框图入手分析时钟配置的基本信息</p>\n<p><img data-src=\"https://i.loli.net/2021/10/26/4zBDCj3R5gtWqw2.png\" alt=\"complete\" /></p>\n<h2 id=\"时钟源部分\"><a class=\"anchor\" href=\"#时钟源部分\">#</a> 时钟源部分</h2>\n<p><img data-src=\"https://i.loli.net/2021/10/26/QA5NatRko9GxDWF.png\" alt=\"Timer_source\" /></p>\n<p>TMS320F28379D 有三个时钟源，两个内部时钟源和一个内部时钟源，通过 CLKSRCCTL1 来选择时钟源</p>\n<p><code>INTOSC2</code>  是默认的 10M 内部晶振，但是容差太差，如果要使用 USB 或者 CAN 外设则需要使用外部晶振</p>\n<p><code>INTOSC1</code>  是备用的 10M 内部晶振，但是只能用于 DCM 和看门狗。</p>\n<p><code>XTAL</code>  是外部晶振接口，提供稳定的时钟频率</p>\n<h2 id=\"振荡器倍频\"><a class=\"anchor\" href=\"#振荡器倍频\">#</a> 振荡器 + 倍频</h2>\n<p><img data-src=\"https://i.loli.net/2021/10/26/Pd9olFHmZ2R4hvu.png\" alt=\"Oscillator\" /></p>\n<p>时钟产生震荡稳定后，通过  <code>SYSPLLCTL1</code>  来选择 是通过 PLL 对  <code>OSCCLK</code>  进行倍频后输出，或是直接输出  <code>OSCCLK</code></p>\n<h2 id=\"分频\"><a class=\"anchor\" href=\"#分频\">#</a> 分频</h2>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5ozsmhngvng0.jpg\" alt=\"image\" /></p>\n<p>输出的时钟要经过分频器将主频降低到想要的频率，然后分别传输给 CPU 和 外设</p>\n<h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<p>时钟的内容在第三章的第 7 节，但寄存器内容在第三章的末尾<br />\n这一张涉及的功能配置比较多，所以寄存器章节的内容也比较杂<br />\n我这里只调用到的寄存器来讲<br />\n PS: 说实话，TI 在时钟寄存器上常常 标志位和控制位 混在一块，看的头大</p>\n<h2 id=\"clksrcctl1\"><a class=\"anchor\" href=\"#clksrcctl1\">#</a> CLKSRCCTL1</h2>\n<p>用于选择和开启时钟源，以及 CPU1 看门狗的工作状态</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>OSCCLKSRCSEL</code></td>\n<td>选择  <code>OSCCLK</code>  的时钟源</td>\n<td>00: INTOSC2&lt;br /&gt;01: XTAL&lt;br /&gt;10: INTOSC1</td>\n</tr>\n<tr>\n<td><code>INTOSC2OFF</code></td>\n<td>控制 <code>INTOSC2</code>  是否开启</td>\n<td>0: 开启 &lt;br /&gt;1: 关闭</td>\n</tr>\n<tr>\n<td><code>XTALOFF</code></td>\n<td>控制  <code>XTAL</code>  是否开启</td>\n<td>0: 开启 &lt;br /&gt;1: 关闭</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"syspllctl1\"><a class=\"anchor\" href=\"#syspllctl1\">#</a> SYSPLLCTL1</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PLLEN</code></td>\n<td>控制 PLL 是否开启</td>\n<td>0: 开启 &lt;br /&gt;1: 关闭 &lt;br /&gt; 默认为 0</td>\n</tr>\n<tr>\n<td><code>PLLCLKEN</code></td>\n<td>控制是否经过 <code>PLL</code></td>\n<td>0: PLL 倍频输出 &lt;br /&gt; 1: PLL 旁路</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"syspllmult\"><a class=\"anchor\" href=\"#syspllmult\">#</a> SYSPLLMULT</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>IMULT</code></td>\n<td><code>PLL</code>  倍频参数的整数部分</td>\n<td>1~127</td>\n</tr>\n<tr>\n<td><code>FMULT</code></td>\n<td><code>PLL</code>  倍频参数的小鼠部分</td>\n<td>00: 0&lt;br /&gt;01: 0.25&lt;br /&gt;10: 0.5&lt;br /&gt;11: 0.75&lt;br /&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>PS: 倍频参数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>I</mi><mrow><mi>M</mi><mi>U</mi><mi>L</mi><mi>T</mi></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>M</mi><mi>U</mi><mi>L</mi><mi>T</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(I_{MULT}+F_{MULT})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"sysclkdivsel\"><a class=\"anchor\" href=\"#sysclkdivsel\">#</a> SYSCLKDIVSEL</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n<th>注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LLSYSCLKDIV</code></td>\n<td><code>PLL</code>  分频参数的整数部分</td>\n<td>2 的倍数，从  <code>/1</code>  到  <code>/126</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"pll工作模式\"><a class=\"anchor\" href=\"#pll工作模式\">#</a> PLL 工作模式</h1>\n<p>进行实例说明之前先科普一下 PLL 的三种工作模式：关闭、旁路、使能</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>说明</th>\n<th>配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关闭</td>\n<td>时钟直接传入  <code>OSCCLK</code>  可以减少系统噪声和功耗.</td>\n<td><code>SYSPLLCTL1.PLLEN = 0;</code></td>\n</tr>\n<tr>\n<td>旁路</td>\n<td>上电复位或复位后， <code>PLL</code>  会进入该模式.&lt;br /&gt; 时钟信号不经过  <code>PLL</code>  而是从  <code>PLL</code>  边上绕开，但  <code>PLL</code>  处于工作状态</td>\n<td><code>SYSPLLCTL1.PLLEN = 1;</code> &lt;br /&gt; <code>SYSPLLCTL. PLLCLKEN = 0;</code></td>\n</tr>\n<tr>\n<td>使能</td>\n<td><code>PLL</code>  处于使能状态，时钟信号倍频后输入到  <code>OSCCLK</code>  中</td>\n<td><code>SYSPLLCTL1.PLLEN = 1;</code>   <code>SYSPLLCTL. PLLCLKEN = 1;</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"时钟配置\"><a class=\"anchor\" href=\"#时钟配置\">#</a> 时钟配置</h1>\n<h2 id=\"文档配置方法\"><a class=\"anchor\" href=\"#文档配置方法\">#</a> 文档配置方法</h2>\n<p>在文档 3.7.6.2 处可知，具体的时钟配置方法，大致意思如下</p>\n<ol>\n<li>选择时钟源，将对应值写入  <code>CLKSRCCTL1.OSCCLKSRCSEL</code></li>\n<li>清除  <code>SYSPLLCTL1.PLLCLKEN</code> , 将时钟源切换为旁路</li>\n<li>通过清除  <code>SYSCLKDIVSEL[ PLLSYSCLKDIV]</code>  的值，将 时钟分频设置为  <code>\\1</code>  , 保证 PLL 最快的被配置</li>\n<li>同时将积分乘法器和分数乘法器写入 SYSPLLMULT, 就可以自动使能 PLL (倍频后，需要保障主频在额定工作范围内)</li>\n<li>至少锁定 PLL 五次，次数越多成功概率越高，当然最好放一个看门狗，防止一直尝试</li>\n<li>将分频器的分频数值 配置为 比目标值大一档，便于 PLL 模块快速打到目标值</li>\n<li>保证  <code>SCRS.WDOVERRIDE</code>  在 PLL 锁定之后清除</li>\n<li><code>SYSDBGCTL.BIT_0</code>  置位，这里可以检测到 PLL 启动的错误</li>\n<li>通过置位  <code>SYSPLLCTL1.PLLCLKEN</code> , 将 PLL 作为系统时钟</li>\n<li>清除  <code>SYSDBGCTL.BIT_0</code></li>\n<li>将分配器中的数值，修改为目标数值</li>\n<li>重新为应用配置对应的 看门狗</li>\n</ol>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>PS: 这里以 使用 10M 的外部晶振生成 100M 的系统时钟为例</p>\n<p>从文档中可以看出 时钟配置的核心步骤为:</p>\n<ol>\n<li>选择时钟源</li>\n<li>选择 PLL 工作模式</li>\n<li>设定 PLL 参数</li>\n<li>设定 分频器 参数</li>\n</ol>\n<p>那么从寄存器表中可知会涉及到以下寄存器的操作</p>\n<ol>\n<li><code>ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 0x1;  // 外部晶振</code></li>\n<li><code>ClkCfgRegs.SYSCLKDIVSEL.bit.PLLEN = 0x00;// 开启PLL</code> <br />\n <code>ClkCfgRegs.SYSCLKDIVSEL.bit.PLLCLKEN = 0x00;// PLL 使能模式</code></li>\n<li><code>ClkCfgRegs.SYSPLLMULT.bit.IMULT = 0x0A;         // 10倍频</code> <br />\n <code>ClkCfgRegs.SYSPLLMULT.bit.FMULT = 0x00;         // 不使用小数</code></li>\n<li><code>ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = 0x00;// 不分频</code></li>\n</ol>\n<p>按照思路来实现代码，对应的寄存器在第三章的最后一节中可以查找<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.71qbphuqbdk0.jpg\" alt=\"image\" /></p>\n<p>这里用电平翻转来实现 和 计数 100 次来作为衡量时间的标准<br />\n虽然有些不靠谱，但是由于没有学 ePWM 的配置只能先将就一下，等以后学完之后再来更新</p>\n<p>函数库版本的 时钟初始化函数有两个，分为不同的库文件，可以按需选择<br />\n <code>SysCtl_setClock(DEVICE_SETCLOCK_CFG);</code> <br />\n <code>InitSysPll(XTAL_OSC,IMULT_40,FMULT_0,PLLCLK_BY_2);</code> <br />\n 第一个函数需要 <code>driverlib</code>  库的支持<br />\n第二个函数需要 <code>device_support</code>  库的支持<br />\n第一个参数，将所有工作模式设置了一个位，函数 对应掩码按位 &amp; 来确定是否需要开启当前模式<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6u69ov30ojg0.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2q8cn5h0u9g0.jpg\" alt=\"image\" /><br />\n 相对而言第二个函数的参数要更加容易理解一些，第一个参数使用的时钟源，第二个 <code>PLL</code>  的倍频参数，第三个分频器的 分频参数</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<h3 id=\"寄存器实现\"><a class=\"anchor\" href=\"#寄存器实现\">#</a> 寄存器实现</h3>\n<p>100M 主频</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"F28x_Project.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * @b GPIO 初始化 25pin 输出</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    GpioDataRegs<span class=\"token punctuation\">.</span>GPASET<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * @b 随机延时测试函数</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    Uint32 i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * @b 时钟初始化</pre></td></tr><tr><td data-num=\"52\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 10M * 10 / 1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>CLKSRCCTL1<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>OSCCLKSRCSEL <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 外部晶振</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>SYSPLLMULT<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>IMULT <span class=\"token operator\">=</span> <span class=\"token number\">0x0a</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 10 倍频</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>SYSPLLMULT<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>FMULT <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 不使用小数</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    ClkCfgRegs<span class=\"token punctuation\">.</span>SYSCLKDIVSEL<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>PLLSYSCLKDIV <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 不分频</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3v27ziqdrpk0.jpg\" alt=\"image\" /></p>\n<h3 id=\"函数库实现\"><a class=\"anchor\" href=\"#函数库实现\">#</a> 函数库实现</h3>\n<p>再生成一个 200M 的系统时钟</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"F28x_Project.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sysclk_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 二选一即可，第一个参数比较不容易理解，第二参数容易理解</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">SysCtl_setClock</span><span class=\"token punctuation\">(</span>DEVICE_SETCLOCK_CFG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//    InitSysPll(XTAL_OSC,IMULT_40,FMULT_0,PLLCLK_BY_2);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @b GPIO 初始化 25pin 输出</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpio_cfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    GpioDataRegs<span class=\"token punctuation\">.</span>GPASET<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO25 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * @b 随机延时测试函数</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Uint32 i <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试效果如图</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1674374649290.66111iy769s0.jpg\" alt=\"1674374649290\" /></p>\n<p>-------2023 年 1 月 23 日 -------</p>\n<h1 id=\"使用lunchpad的注意事项\"><a class=\"anchor\" href=\"#使用lunchpad的注意事项\">#</a> 使用 LunchPad 的注意事项</h1>\n<p>最开始的时候不知道为什么 C2000Ware 的例子运行在 LunchPad 上 频率总感觉不对， 好像是是一半的感觉。 后来进到  <code>Device_init()</code>  和  <code>InitSysCtrl()</code>  两个函数 默认使用外部晶振，而且程序默认外部晶振是  <code>20MHz</code>  的，所以导致频率为原本的一半。</p>\n<p>两个函数的函数的时钟配置是在  <code>SysCtl_setClock()</code>  和  <code>InitSysPll()</code></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2kkj3spidpk0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.21rvwcj4excw.jpg\" alt=\"image\" /></p>\n<p>图中可以看到，需要定义一个  <code>_LAUNCH_F28379D</code>  的宏，所以需要在  <code>properties</code>  中去配置，进去后在  <code>C2000 Compiler &gt;&gt; Build &gt;&gt; predefined symbols</code>  中添加宏定义</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5u8cqeg1sxs0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.684cqoftduk0.jpg\" alt=\"image\" /></p>\n<p>最开始的时候不知道为什么 C2000Ware 的例子运行在 LunchPad 上 频率总感觉不对， 好像是是一半的感觉。 后来进到  <code>Device_init()</code>  和  <code>InitSysCtrl()</code>  两个函数 默认使用外部晶振，而且程序默认外部晶振是  <code>20MHz</code>  的，所以导致频率为原本的一半。</p>\n<p>两个函数的函数的时钟配置是在  <code>SysCtl_setClock()</code>  和  <code>InitSysPll()</code></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.2kkj3spidpk0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.21rvwcj4excw.jpg\" alt=\"image\" /></p>\n<p>图中可以看到，需要定义一个  <code>_LAUNCH_F28379D</code>  的宏，所以需要在  <code>properties</code>  中去配置，进去后在  <code>C2000 Compiler &gt;&gt; Build &gt;&gt; predefined symbols</code>  中添加宏定义</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5u8cqeg1sxs0.jpg\" alt=\"image\" /></p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1674299279513.6pgt966tdtc0.jpg\" alt=\"1674299279513\" /></p>\n<p>目前只学最简单的时钟配置，对应的的异常处理，以及外设时钟，定时器，ePWM 配置还未来得急涉足<br />\n等以后学完在来完善这篇文章</p>\n<p>如有错误之处，望大佬斧正</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO%E8%BE%93%E5%85%A5/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO%E8%BE%93%E5%85%A5/",
            "title": "TMS320F28379D学习之旅-GPIO输入",
            "date_published": "2023-01-08T12:47:39.000Z",
            "content_html": "<h3 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h3>\n<p>本文硬件基于<em> LaunchXL-F28379D</em> 和 逻辑分析仪，软件基于 CCS 10.4 版本， 帮助文档为 C2000 的例程和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL2xpdC91Zy9zcHJ1aG04aS9zcHJ1aG04aS5wZGY/dHM9MTY3Mjk3MzMwMzA0NSZhbXA7cmVmX3VybD1odHRwcyUyNTNBJTI1MkYlMjUyRnd3dy50aS5jb20lMjUyRnByb2R1Y3QlMjUyRlRNUzMyMEYyODM3OUQ=\">官方文档</span><br />\n因为 GPIO 输入详细的说明了如何找寄存器和分析文档，所以这里就简单的对寄存和一些与 MCU 不同的地方进行简单分析，不再长篇大论的做思路分析</p>\n<h1 id=\"逻辑框图\"><a class=\"anchor\" href=\"#逻辑框图\">#</a> 逻辑框图</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.zih14yh8l6o.webp\" alt=\"image\" /></p>\n<p>老样子，先搞上原理，相较于 GPIO 输出模式，输入模式就更为复杂一些.</p>\n<p>从原理图中可以得到，输入需要配置 GPyPUD、GPyINV、GPyCTRL 和 GPyQSELn 寄存器，当然还有之前 输出模式所提及到到的寄存器。</p>\n<h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<p>所有相关的寄存器还是从文档的寄存器表以及 GPIO 章节的输入配置的的说明中分析得来</p>\n<table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>功能</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPyINV</td>\n<td>是否将输入反向</td>\n<td>置 1：配置非门</td>\n</tr>\n<tr>\n<td>GPyQSELn</td>\n<td>选择输入模式</td>\n<td>2bit&lt;br /&gt;00：同步模式 &lt; br /&gt;01：3 次采样 &lt; br /&gt;10：6 次采样 &lt; br /&gt;11：异步模式</td>\n</tr>\n<tr>\n<td>GPyCTRL</td>\n<td>配置采样周期</td>\n<td>2bit&lt;br /&gt;PPLSCLK 多少分频 &lt; br /&gt; 具体情况参照手册 970 页</td>\n</tr>\n<tr>\n<td>GPyPUD</td>\n<td>设置引脚初始电平</td>\n<td>1bit&lt;br /&gt; 置 0：开启上拉模式 &lt; br /&gt; 默认为 1</td>\n</tr>\n</tbody>\n</table>\n<p>所以，如果要将 引脚 24 配置为 上拉输出模式，就需要将一下几步</p>\n<ol>\n<li>GPAMUXn 配置为 0,</li>\n<li>GPADIR 配置为 0</li>\n<li>GPAPUD 配置为 0</li>\n<li>GPyINV 配置为 0</li>\n<li>GPyQSELn 配置为 00</li>\n</ol>\n<p>不过这里需要注意一个问题</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.oet2sv5zoxs.jpg\" alt=\"image\" /></p>\n<p>在文档中对 pin 的 GPIO 输入模式 进行了特别的说明。当 引脚 工作在 GPIO 模式时，异步配置无效，会自动转换为 同步配置</p>\n<p>我在学习的过程中，参考了一些博客，但是他们都设置为异步输入模式。现在可以明确，虽然他们实现了真正的效果，但在原理层面上是错误的</p>\n<h1 id=\"实验设计\"><a class=\"anchor\" href=\"#实验设计\">#</a> 实验设计</h1>\n<h2 id=\"目的\"><a class=\"anchor\" href=\"#目的\">#</a> 目的</h2>\n<p>当 GPIO24 为低电平时，GPIO25 输出低电平；为高电平时输出 5 个方波</p>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>将 GPIO24 配置为输入模式，将 GPIO25 配置为输出模式</p>\n<p>编写函数，参数为输出次数</p>\n<p>主函数检测  <code>GpioDataReg.GPADAT.bit.GPIO24</code>  电平状态，当为低电平时，GPIO25 输出低电平</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpioInputCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 初始外设</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Device_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 初始化 引脚</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">gpioInputCfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">GPIO_readPin</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 引脚检测</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 消抖（暴力）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">GPIO_readPin</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 确认引脚检测</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">GPIO_writePin</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出低电平</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 维持 1ms</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">GPIO_togglePin</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转电平</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">DEVICE_DELAY_US</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * 配置 GPIO24 为</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">gpioInputCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 配置为 GPIO 模式</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">GPIO_setQualificationMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_QUAL_SYNC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 配置为同步采样</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_DIR_MODE_IN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 配置为输入模式</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 配置为上拉模式</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 配置为输出模式</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"现象\"><a class=\"anchor\" href=\"#现象\">#</a> 现象</h3>\n<h4 id=\"gpio24-高电平\"><a class=\"anchor\" href=\"#gpio24-高电平\">#</a> GPIO24 高电平</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.e4vmh4tzxps.jpg\" alt=\"image\" /></p>\n<h4 id=\"gpio24低电平\"><a class=\"anchor\" href=\"#gpio24低电平\">#</a> GPIO24 低电平</h4>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.o5csaybwsi8.jpg\" alt=\"image\" /></p>\n<h1 id=\"工程\"><a class=\"anchor\" href=\"#工程\">#</a> 工程</h1>\n<p>driverlib 的工程链接<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvLXl3ei9EU1AyMzc5RA==\">🐱</span>(⬅️点我)</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO/",
            "url": "https://to-ywz.github.io/Embedded/DSP/TMS320F28379D%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-GPIO/",
            "title": "TMS320F28379D学习之旅-GPIO输出",
            "date_published": "2023-01-07T12:47:39.000Z",
            "content_html": "<p>离大谱，没 commit 就回滚了，居然得重写<br />\n原本，没有怎么啰嗦的，没想到，第三次写，就越写越啰嗦了，诸位见谅</p>\n<h3 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h3>\n<p>本文硬件基于<em> LaunchXL-F28379D</em> 和 逻辑分析仪，软件基于 CCS 10.4 版本， 帮助文档为 C2000 的例程和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL2xpdC91Zy9zcHJ1aG04aS9zcHJ1aG04aS5wZGY/dHM9MTY3Mjk3MzMwMzA0NSZhbXA7cmVmX3VybD1odHRwcyUyNTNBJTI1MkYlMjUyRnd3dy50aS5jb20lMjUyRnByb2R1Y3QlMjUyRlRNUzMyMEYyODM3OUQ=\">官方文档</span></p>\n<p>在此说明，这一系列的文章主要是记录我学习思考的过程，可能会啰里啰唆</p>\n<p>个人观点，授人以鱼不如授人以渔，最后会给出完整的代码和工程的链接</p>\n<h1 id=\"逻辑框图\"><a class=\"anchor\" href=\"#逻辑框图\">#</a> 逻辑框图</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.zih14yh8l6o.webp\" alt=\"image\" /></p>\n<p>一般来说，一个处理器要配置引脚都会有两种方式：<strong>寄存器和库函数</strong>。</p>\n<p>但无论哪一种都需要去理解硬件的架构，虽然这幅框图有些复杂，但是大致的可以看出，下半部分是用于配置输出模式的。从寄存器的名称 也可以看出一些寄存器是用于控制输出值的。例如， <code>GPySET</code> 、 <code>GPyDAT</code>  等。</p>\n<p>但是要知道如何配置，还是需要去阅读文档的寄存器部分和其他部分的讲解的注意事项</p>\n<p>对应文档地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGkuY29tL2xpdC91Zy9zcHJ1aG04aS9zcHJ1aG04aS5wZGY/dHM9MTY3Mjk3MzMwMzA0NSZhbXA7cmVmX3VybD1odHRwcyUyNTNBJTI1MkYlMjUyRnd3dy50aS5jb20lMjUyRnByb2R1Y3QlMjUyRlRNUzMyMEYyODM3OUQ=\">链接</span>，可惜转跳不到对应章节</p>\n<h1 id=\"第一步-gpio-工作模式配置\"><a class=\"anchor\" href=\"#第一步-gpio-工作模式配置\">#</a> 第一步: GPIO 工作模式配置</h1>\n<p>在文档的 8.2 节中可以找到 GPIO 各种模式配置的概要和说明<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.kk2l7qxy8dc.jpg\" alt=\"image\" /></p>\n<p>从文档中可以得知，要将 引脚设置为 通用输入输出模式，需要配置  <code>GPyMUXn</code>  和  <code>GPyGMUXn</code> .</p>\n<p>但这里并没有给出 个寄存器 需要如何配置。不过文档最后一句给出了，默认情况下，引脚处于 通用输入输出模式</p>\n<p>翻阅文档后，找到了 复用表</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.661f7xwuu840.jpg\" alt=\"image\" /></p>\n<p>可以看出 当  <code>GPyMUXn</code>  为 0 时， <code>GPyGMUXn</code>  的值与模式配置无关.</p>\n<p>所以我们得到了第一步，将  <code>GPyMUXn</code>  设置为 0</p>\n<p>但，表格中  <code>GPyMUXn</code>  的  <code>y</code>  和  <code>n</code>  分别代表什么呢，还是得去查找一下寄存器表</p>\n<p>在找寄存器表的时候，发现 GPIO 的寄存器分为两大类， <code>GpioCtrlReg</code>  和  <code>GpioDataReg</code> , 分别用于配置 GPIO 和 控制引脚输出值</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1v85vjrekhts.jpg\" alt=\"image\" /></p>\n<p>很显然  <code>GPyMUXn</code>  属于控制寄存器，所以很轻松的就找到了 对应的寄存器</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1id6odtaqvi8.jpg\" alt=\"image\" /></p>\n<p>从图中我们可以知道， <code>GPyMUXn</code>  的  <code>y</code>  代表 GPIO 的分组，不同的芯片引脚数不同，具体多少个分组得看芯片</p>\n<p><code>n</code>  则是 1 或 2, 看地址差值为 2 , 然后从之前的复用表中得到一个引脚占 2 个数据位，而 TMS320 是地址总线和数据总线的位宽为 16, 所以得 2*16/2 = 16, 一个  <code>GPxMUXn</code>  控制 16 个引脚。这只是写文章的时候突然想到的，事实上我们可以直接看后面的说明，GPAMUX1 控制 0~15, 一看就知道是 16 个 (捂脸)</p>\n<p>事实上知道这些就可以去配置 GPIO 的工作模式了，但是问了预防万一，还是去看一眼寄存器表为好</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3laiawhj2jc0.jpg\" alt=\"image\" /></p>\n<p>事实上，也没有什么要注意的.</p>\n<p>至此，我们就得到了 GPIO 配置的第一步：将  <code>GpioCtrlReg.GPyMUxn</code>  的对应引脚设置为 0.</p>\n<h1 id=\"第二步gpio-输入输出配置\"><a class=\"anchor\" href=\"#第二步gpio-输入输出配置\">#</a> 第二步：GPIO 输入输出配置</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.7825mzefgek.jpg\" alt=\"image\" /></p>\n<p>继续阅读文档，会发现 2, 3 步基本没什么用 (对输出模式而言), ODR 寄存器是在输入模式时配置的，且默认是关闭的，所以直接到第 4 步，也是 8.2 节最后有用的地方了，配置 引脚 的输入输出方向</p>\n<p>从文档中可以知道，默认情况下 GPIO 的引脚 是输入的。并且在改变 引脚 为输出模式时，建议先写入要输出的值到 数据寄存器中，输出模式下默认输出的电平都为低电平.</p>\n<p>个人觉得官方，让我们先设置输出值是为了防止，配置为输出模式时默认的低电平导致，外部设备出现奇怪的反应。咱们现在是空载所以输出啥电平没啥区别.</p>\n<p>然后又到了翻看寄存器的时候了，还是去之前的  <code>GpioCtrReg</code>  寄存器表中查找</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6tcfn7knrnk0.jpg\" alt=\"image\" /></p>\n<p>不得不说 TI 的 Go 和 返回总表 做的是真的让人舒心</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.ota5d4p3wu8.jpg\" alt=\"image\" /></p>\n<p>从寄存器数码中可以得知 当 GPyDIR 为 1 时，引脚为输出模式</p>\n<p>至此，我们得到了第二步:  <code>GpioCtrlReg.GPADIR</code>  对应的引脚置位为 1</p>\n<h1 id=\"第三步-输出模式配置\"><a class=\"anchor\" href=\"#第三步-输出模式配置\">#</a> 第三步：输出模式配置</h1>\n<p>到了这里，8.2 节没有继续说明和单纯的输出模式相关的信息了，但是根据我们之前的配置经验可以知道 还有输出模式需要配置</p>\n<p>输出模式分为开漏和推挽输出，问题是这个寄存器叫啥呢，这就需要从框图中查看了，从框图中可以看出 这是一个名为  <code>GPyODR</code>  的寄存器。这就要再次开始翻找  <code>GpioCtrlReg</code>  的寄存器列表</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1673011610331.6xpojcdwxkc0.jpg\" alt=\"1673011610331\" /></p>\n<p>由于 TI 的人性化设计，还是很快就能找到的，从文档中可知 当 GPyODR 为 0 的时候，为正常输出.</p>\n<p>至此我们就得到了配置引脚为输出的第三步：将  <code>GpioCtrlReg.GPyODR</code>  对应的 引脚位复位</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.23fcwdjw08qo.jpg\" alt=\"image\" /></p>\n<h1 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h1>\n<p>到此我们就知道了，引脚配置为输出模式所需要的步骤:</p>\n<ol>\n<li>配置引脚为 通用输入输出模式</li>\n<li>设置引脚输出值</li>\n<li>配置引脚为 输出模式</li>\n<li>配置引脚为 推挽输出</li>\n</ol>\n<p>接下来用两种方式来实现 GPIO 配置<br />\n<strong>这里假设 我们要将 GPIO24 配置为输出模式并输出 5 个方波</strong><br />\n不过需要注意的是导入的空文件工程需要不同可能会导致 库函数不同，直接操作寄存的方式也不同<br />\n从  <code>C2000Ware_4_01_00_00\\driverlib</code>  路径下导入的工程，寄存器操作会麻烦很多，但是库函数资料多<br />\n而从  <code>C2000Ware_4_01_00_00\\device_support</code>  路径下导入则是寄存器操作更加贴近手册、便于操作，库函数体系自成一家<br />\n简单查看一下源文件就看可以知道两个工程的风格相差甚远 (说实话，两种库的底层构建都给我极大的启发)<br />\n 下面我会用两个库分别实现寄存器版本和库函数版本的操作</p>\n<h2 id=\"device_support\"><a class=\"anchor\" href=\"#device_support\">#</a> device_support</h2>\n<h3 id=\"寄存器版本\"><a class=\"anchor\" href=\"#寄存器版本\">#</a> 寄存器版本</h3>\n<p>这个当初我是直接翻看，源码看明白的，大致讲一下思路</p>\n<p>文档中给出了两个寄存器的名称，然后我直接输进去然后出现自动补全，然后就没有然后了</p>\n<p>不过，在输入寄存器名称的时候，我跳转到源码查看了一下</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1guu00zddyrk.jpg\" alt=\"image\" /></p>\n<p>找到了对应的结构体，翻阅了一下成员，发现与文档相符然后就直接操作了， <code>GpioDataReg</code>  也是同样的道理<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3ck7lv300vc0.jpg\" alt=\"image\" /></p>\n<p>根据上面的小结我们可以得到一下代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 寄存器配制引脚</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    GpioDataRegs<span class=\"token punctuation\">.</span>GPADAT<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>      \t<span class=\"token comment\">// 预设 pin 输出电平</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置 pin 为通用输入输出模式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置 pin 为输出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置 pin 为推挽输出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>EALLOW</code>  是用于解除写保护， <code>EDIS</code>  是用于恢复写保护的，这个在寄存器表中可以得到</p>\n<p>接下去我们要实 IO24 输出 5 个高电平，这个就比较简单啦，无非就是写个随机延时 + 上 for 循环，用  <code>GPADAT</code>  或者  <code>GPASET</code>  和  <code>GPACLEAR</code>  以及  <code>GPATOGGLE</code>  来操作</p>\n<p>这里，我选择用  <code>GPATOGGLE</code>  直接操作，能少些好多行代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 测试函数：产生 5 个方波</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转电平</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 随机延时</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"库函数版本\"><a class=\"anchor\" href=\"#库函数版本\">#</a> 库函数版本</h3>\n<p>由于没找到相关的文档，就只能直接读源码了<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.412jp8t6tg40.jpg\" alt=\"image\" /><br />\n 直接翻阅  <code>Gpio.c</code>  文件，就可以看到和 GPIO 配置相关的代码了<br />\n一顿翻看函数注释后就可以知道  <code>GPIO_SetupPinMux</code>  和  <code>GPIO_SetupPinOptions</code>  可以完成对 引脚的配置<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.jaz44znv1l4.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5nrdyny0q3c0.jpg\" alt=\"image\" /><br />\n <code>GPIO_SetupPinMux</code>  是用于 将 引脚设置位 通用 I/O 模式， <code>GPIO_SetupPinOptions</code>  则是用于选择 输入输出和输出模式</p>\n<p>由此可以得到最终代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 函数配置 引脚</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinMux</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_MUX_CPU1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 31 脚配置为 GPIO</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinOptions</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_OUTPUT<span class=\"token punctuation\">,</span> GPIO_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 31 脚配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"driverlib\"><a class=\"anchor\" href=\"#driverlib\">#</a> driverlib</h2>\n<p>由于这个的寄存器版本，会涉及到阅读库函数，所以先讲库函数</p>\n<h3 id=\"库函数版本-2\"><a class=\"anchor\" href=\"#库函数版本-2\">#</a> 库函数版本</h3>\n<p>翻阅文档在 8.9.4 小结可以看到对应的 操作函数</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.nplmsp3sjww.jpg\" alt=\"image\" /></p>\n<p>当然也可以去官网下载  <code> F2837xD_DriverLib_Users_Guide.pdf</code>  , 这个文档 分模块的介绍了各个 API 和该模块对应的结构体</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.579gb2gfqxc0.jpg\" alt=\"image\" /></p>\n<p>或者直接查看  <code>device.h</code>  头文件中包含的  <code>gpio.h</code>  文件，里面对各个函数的用途及其参数进行了详细的说明<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.qpbjffv9s1s.jpg\" alt=\"image\" /></p>\n<p>途径很多，就我的习惯而言，会先从文档中获取相关函数，然后再去代码注解中去配置函数如何使用，等实现效果后再回头分析 这个函数的底层的实现<br />\n所以，这我也按这种方式介绍.</p>\n<p>首先，第一步需要操作  <code>GPyMUXn</code> , 从文档的 8.9.4 节可知，需要查看  <code>GPIO_setPinConfig</code> ,<br />\n 查看源码得到，这个函数只需要 将要配置的引脚 的引脚号传入即可  <code>GPIO_setPinConfig(24);</code> <br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/1673098106423.lzgxaucs174.jpg\" alt=\"1673098106423\" /></p>\n<p>第二步，需要操作设置 引脚要输出 的值，我想输出 低电平，默认就是低电平，所以不需要配置<br />\n不过需要一开始输出高电平则，从文档中可知 可以使用  <code>GPIO_writePin</code>  和  <code>GPIO_setPortPins</code>  来将电平拉高<br />\n查看源码注释可知配置为高电平的方式  <code>GPIO_writePin(24, 1)</code>  或  <code>GPIO_setPortPins(GPIO_PORT_A, (uint32_t)1 &lt;&lt; 24)</code></p>\n<p>第三步，将 引脚 配置为输出模式，从文档得 需要操作  <code>GPIO_setDirectionMode</code> <br />\n 查看源码可知，函数需要配置两个参数：引脚号和输出模式。从注释中看可以知道，输出模式有宏定义，所以可以直接套用宏定义<br />\n得到源码  <code>GPIO_setDirectionMode(24, GPIO_DIR_MODE_OUT);</code> <br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.i3ct7366c28.jpg\" alt=\"image\" /></p>\n<p>最后一步，配置引脚的输出模式，从文档中可知，需要操作  <code>GPIO_setPadConfig</code> <br />\n 查看源码后返现，这个函数需要两个参数：引脚号和输入 | 输出模式引脚状态<br />\n有意思的是，这个函数 可以进行 输出模式的推挽开漏配置 和 输入模式的上拉和下拉配置.<br />\n 通过 宏来进行区分，当前引脚需要配置什么.(真就没有防护)<br />\n 得到代码  <code>GPIO_setPadConfig(24, GPIO_PIN_TYPE_STD);</code> <br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.53bkdzvvgqs0.jpg\" alt=\"image\" /></p>\n<p>最后得到对应的源码如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 配置为 通用输入输出模式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 配置为 输出模式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"寄存器版本-2\"><a class=\"anchor\" href=\"#寄存器版本-2\">#</a> 寄存器版本</h3>\n<p>这个库里的寄存器就没有特定的结构体了，有的是大量的枚举和强制转换，比较考验指针操作和对寄存器的熟悉程度<br />\n所以我们就需要去看一下库函数是如何实现的<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.50wivby5o4w0.jpg\" alt=\"image\" /></p>\n<p>从源码中可以看出，这的寄存器操作是通过 GPIO 的基地址强转为 指针，通过访问数组的方式来实现修改值<br />\n相关的宏 分布在  <code>gpio.h</code>  和  <code>hw_gpio.h</code>  以及  <code>hw_memmap.h</code>  中定义，具体情况自行查看</p>\n<p>这里就直接贴出源码，因为纯粹的翻看寄存器 和 算内存偏差实在是没什么可以说的了<br />\n注释里已经写的很清楚了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 其他 1 位寄存器掩码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> muxPinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// MUX 寄存器掩码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向 gpioCtrlReg 的 指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 定位 GPIOA 所有寄存器的首地址，GPIO_CTRL_REGS_STEP 是寄存器步长，一组 GPIO 寄存器的长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span> GPIOCTRL_BASE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> GPIO_CTRL_REGS_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 要被置位的引脚掩码计算</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 一个 MUX 管理 16 个引脚，所以 对 16 取余数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 乘 2 是因为一个引脚对应两个位，每过一个引脚要 移两位</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    muxPinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 设置为输出模式</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxDIR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 设置为推挽输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxODR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 设置位 通用输出模式</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 判断引脚属于 MUX1 还是 MUX2</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 为什么 + 1 而不是 +2 我也没弄懂，挠头，等弄懂再更新</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<h2 id=\"device_support-2\"><a class=\"anchor\" href=\"#device_support-2\">#</a> device_support</h2>\n<p>使用  <code>C2000Ware_4_01_00_00\\device_support</code>  空工程 导入 实现的源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"F28x_Project.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">InitSysCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 初始化系统配置，(例如配置时钟，关闭看门狗...)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">InitGpio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 初始化 GPIO 模块</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 关中断</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    DINT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">InitPieCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 初始化中断控制器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">InitPieVectTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化中断向量表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 开中断</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    EINT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 初始化 GPIO, 二选一即可</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//Fun_GpioCfg();</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @b 测试函数：产生 5 个方波</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        GpioDataRegs<span class=\"token punctuation\">.</span>GPATOGGLE<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> * @b 函数配置 引脚</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinMux</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_MUX_CPU1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 31 脚配置为 GPIO</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">GPIO_SetupPinOptions</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> GPIO_OUTPUT<span class=\"token punctuation\">,</span> GPIO_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 31 脚配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre> * @b 寄存器配制引脚</pre></td></tr><tr><td data-num=\"58\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_GpioCfg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAMUX2<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPADIR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    GpioCtrlRegs<span class=\"token punctuation\">.</span>GPAODR<span class=\"token punctuation\">.</span>bit<span class=\"token punctuation\">.</span>GPIO24 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"driverlib-2\"><a class=\"anchor\" href=\"#driverlib-2\">#</a> driverlib</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"driverlib.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"device.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Main</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 系统初始化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Device_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Reg_setupOutputPin(24);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 测试函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Fun_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">GPIO_setPinConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 配置为 通用输入输出模式</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">GPIO_setDirectionMode</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_DIR_MODE_OUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 配置为 输出模式</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">GPIO_setPadConfig</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> GPIO_PIN_TYPE_STD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 配置为 推挽输出</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * @b 初始化 pin 为输出模式</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reg_setupOutputPin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> pin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 其他 1 位寄存器掩码</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> muxPinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// MUX 寄存器掩码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向 gpioCtrlReg 的 指针</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 定位 GPIOA 所有寄存器的首地址，GPIO_CTRL_REGS_STEP 是寄存器步长，一组 GPIO 寄存器的长度</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    gpioCtrlReg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span> GPIOCTRL_BASE</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> GPIO_CTRL_REGS_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 要被置位的引脚掩码计算</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    pinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 一个 MUX 管理 16 个引脚，所以 对 16 取余数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 乘 2 是因为一个引脚对应两个位，每过一个引脚要 移两位</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    muxPinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    EALLOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 设置为输出模式</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxDIR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 设置为推挽输出</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxODR_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 设置位 通用输出模式</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">16</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 判断引脚属于 MUX1 还是 MUX2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 为什么 + 1 而不是 +2 我也没弄懂，挠头，等弄懂再更新</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        gpioCtrlReg<span class=\"token punctuation\">[</span>GPIO_GPxMUX_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>muxPinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    EDIS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre> * @b 测试函数：产生 6 个方波</pre></td></tr><tr><td data-num=\"74\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> pinMask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span>gpioDataRegs <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    gpioDataRegs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uintptr_t</span><span class=\"token punctuation\">)</span> GPIODATA_BASE <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    pinMask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1U</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">%</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        gpioDataRegs<span class=\"token punctuation\">[</span>GPIO_GPxTOGGLE_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> pinMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"现象\"><a class=\"anchor\" href=\"#现象\">#</a> 现象</h2>\n<p>产生 6 个方波</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.401bsws9ja00.jpg\" alt=\"image\" /></p>\n<h1 id=\"工程链接\"><a class=\"anchor\" href=\"#工程链接\">#</a> 工程链接</h1>\n<p>由于 device_support 移动后依赖有点难修复，所以工程文件中只有 driverlib 的工程链接<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RvLXl3ei9EU1AyMzc5RA==\">🐱</span>(⬅️点我)</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "DSP",
                "DSP"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95/",
            "url": "https://to-ywz.github.io/Embedded/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95/",
            "title": "树莓派默认密码无法登录",
            "date_published": "2022-12-04T14:58:49.000Z",
            "content_html": "<h2 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h2>\n<p>最近开始捣鼓树莓派，之前那它做了个旁路由，最后发现使用率太低，准备换成 Home Assistant</p>\n<p>结果在刷 Raspberry Pi OS 的时候，发现创建  <code>wpa_supplicant.conf</code>  和  <code>SSH</code>  文件的方式完全没有用了</p>\n<p>一开始我以为是 wifi 密码大小写问题，改了几次都不行，然后接入有线网络后登录 SSH 发现，默认的账号密码都不好使</p>\n<h2 id=\"结果\"><a class=\"anchor\" href=\"#结果\">#</a> 结果</h2>\n<p>到官网查阅了一下更新记录，发现</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.7bi1e1dof300.webp\" alt=\"image\" /></p>\n<p>大致意思就是，为了安全起见删除了默认账号</p>\n<h2 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<h3 id=\"方案一推荐\"><a class=\"anchor\" href=\"#方案一推荐\">#</a> 方案一 (推荐)</h3>\n<p>使用官方的烧录软件:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZHMucmFzcGJlcnJ5cGkub3JnL2ltYWdlci9pbWFnZXJfMS43LjMuZXhl\"> 地址</span></p>\n<p>有梯子的建议关掉哦，我挂梯子反而下的慢</p>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.4gbdvpyp1s40.webp\" alt=\"image\" /></p>\n<h3 id=\"方案二\"><a class=\"anchor\" href=\"#方案二\">#</a> 方案二</h3>\n<p>说实话，第一种方法最大的问题就是慢，磨磨唧唧的装个 64bit 版本简直的没话说（可以安心的出去吃个饭再回来看看）。</p>\n<p>所以为了解决这个问题，可以考虑通过在 SD 的启动分区中创建一个名为  <code>userconf</code>  或  <code>userconf.txt</code>  的文件，添加用户名和密码</p>\n<p>内容格式为  <code>username:encrypted-password</code> , 其中  <code>username</code>  是用户名， <code>encrypted-password</code>  是密码的加密代码 (通过 OpenSSL 生成)</p>\n<p>通过 OpenSSL 生成加密密码的指令</p>\n<pre><code>echo 'mypassword' | openssl passwd -6 -stdin\n</code></pre>\n<p>里面的  <code>'password'</code>  自行替换成自己的密码</p>\n<p>这里可以提供一个现成的</p>\n<pre><code>pi:$6$Q7yQqYO94B9fI9jn$trNI8/yvcZ8WYleaYKN5qlrzQ3AhZXLZtcNkYJlSH16xGloh2ZiM4KeAay8GSBoQ09LZI/wMOxM3qeou7uZXq.\n</code></pre>\n<p>对应的账号密码就是之前的默认账号密码  <code>pi:raspberry</code></p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "Linux",
                "Raspberry Pi",
                "树莓派"
            ]
        },
        {
            "id": "https://to-ywz.github.io/tool/HAL%E5%BA%93%E5%87%BA%E7%8E%B0HAL_StatusTypeDef%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB/",
            "url": "https://to-ywz.github.io/tool/HAL%E5%BA%93%E5%87%BA%E7%8E%B0HAL_StatusTypeDef%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB/",
            "title": "HAL库出现HAL_StatusTypeDef无法识别",
            "date_published": "2022-11-22T05:14:07.000Z",
            "content_html": "<h1 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h1>\n<p>今天重新写了一个 gpio 的抽象层，结果编译的时候出现了一个 bug: <code>HAL_StatusTypeDef</code>  无法识别<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.5wq5i5adpug0.jpg\" alt=\"image\" /><br />\n 一看这种问题，涉及库文件不是头文件引用错就是，无意中改动了宏.</p>\n<h1 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h1>\n<p>由于我的工程是直接从 CubeMX 中生成的所以不存在什么宏改错的问题<br />\n那就到了头文件的问题了，首先考虑自己编写的 <code>gpio</code>  文件<br />\n我的源码中只有一个头文件与 HAL 相关<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.6wfazdj3i5s0.jpg\" alt=\"image\" /><br />\n 很显然有一半的可能是  <code>stm32f4xx_hal_gpio.h</code>  惹的祸.<br />\n 所以我将  <code>stm32f4xx_hal_gpio.h</code>  替换为  <code>main.h</code> <br />\n 编译后  <code>0 error 0 wraning</code> , 果然是找个的问题.<br />\n 但出现了新的问题，为啥 <code>main.h</code>  可以 而 <code>stm32f4xx_hal_gpio.h</code>  不可以<br />\n经过多次转跳，在 <code>stm32f4xx_hal_conf</code>  中，看到了了这部分 宏<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.3vtw1rk50o80.jpg\" alt=\"image\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/2023/image.1vczkfxpj4v4.jpg\" alt=\"image\" /><br />\n 我严重怀疑，是不是因为宏开关的问题，限制了 <code>stm32f4xx_hal_gpio.h</code>  内部的一些定义<br />\n但是进入 <code>stm32f4xx_hal_gpio.h</code>  中查看找不到有宏的开关，所以我认为可能是单独的 <code>stm32f4xx_hal_gpio.h</code>  文件不足以构成完整的文件，缺少部分文件依赖而导致的.<br />\n 虽然可以这么解释但是，还是觉得怪怪的。等以后捋清楚了再回来继续更.<br />\n-------------------2023.2.8----------------------------</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "开发工具",
                "HAL库",
                "HAL库"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32%E8%A3%B8%E6%9C%BA%E7%A7%BB%E6%A4%8DSFUD/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32%E8%A3%B8%E6%9C%BA%E7%A7%BB%E6%A4%8DSFUD/",
            "title": "STM32裸机移植SFUD",
            "date_published": "2021-12-12T14:18:49.000Z",
            "content_html": "<p><strong>写在前面:</strong> 平台: STM32F407VGT6 + W25Q64FV 8MFLASH</p>\n<h1 id=\"为什么要移植sfud\"><a class=\"anchor\" href=\"#为什么要移植sfud\">#</a> 为什么要移植 SFUD</h1>\n<p>记得当初学标准库读写 FLASH 的时候，页写入代码可长可长了，而且不同的 flash 一套检测的宏不一样，改来改去特别麻烦.<br />\n 而 SFUD 驱动只需要 FLASH 支持 SFDP 协议即可移植 SFUD 后只需实现初始化和写操作就可以愉快的使用 FLASH. 膜拜 armlink 大佬.<br />\n 是 JEDEC (固态技术协会) 制定的串行 Flash 功能的参数表标准，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamVkZWMub3JnL3N0YW5kYXJkcy1kb2N1bWVudHMvZG9jcy9qZXNkMjE2Yg==\"> 最新标准</span>，目前新生产的 flash 都是支持的只有特别老旧的芯片才不支持.<br />\n 而且 SFUD 对于不支持 SFDP 的 FLASH, 可以手动在 <code>/sfud/inc/sfud_flash_def.h</code>  文件中的参数表里添加芯片参数.<br />\n 简直就是人间神奇</p>\n<h1 id=\"源码获取\"><a class=\"anchor\" href=\"#源码获取\">#</a> 源码获取</h1>\n<p>建议直接从 github 或 gitee 上拉取，能保证代码是最新的 (3 年就写了这个库，到现在都还在更新，人与人之间的差距啊...).<br />\n 如果不想用 git 拉去的话，可以直接点击下面的阿里云链接进行下载。百度网盘这里就先不放了 (<s>嫌弃</s>)<br />\nGithub<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FybWluay9TRlVE\"> 传送门</span><br />\n Gitee<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vQXJtaW5rL1NGVUQ=\"> 传送门</span><br />\n阿里云盘<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvRGQyTlBmWE1SR3o=\">传送门</span></p>\n<h1 id=\"文件结构\"><a class=\"anchor\" href=\"#文件结构\">#</a> 文件结构</h1>\n<p><img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216074525.png\" alt=\"根目录\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216074949.png\" alt=\"demo\" /><br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216074707.png\" alt=\"sfud\" /></p>\n<h1 id=\"移植\"><a class=\"anchor\" href=\"#移植\">#</a> 移植</h1>\n<p>主要是实现 <code>/sfud/port/sfud_port.c</code>  文件，其实我们只需要实现  <code>sfud_spi_port_init</code> ,  <code>spi_write_read</code> , 即可至于更多的需求，可以视 init 函数里的注释自行扩充<br />\n由于 sfud 有 debug 机制，所以需要各位自行实现 printf 的重载.</p>\n<h2 id=\"sfud_spi_port_init\"><a class=\"anchor\" href=\"#sfud_spi_port_init\">#</a> sfud_spi_port_init</h2>\n<p>其实要实现那些函数在注释中已经写的明明白白了.<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216080503.png\" alt=\"init函数实现\" /></p>\n<h3 id=\"抽个结构体出来\"><a class=\"anchor\" href=\"#抽个结构体出来\">#</a> 抽个结构体出来</h3>\n<p>为了方便处理这边用了一个结构体，用于保存用户的 SPI 信息。懒惰，我连个 Led 都想 抽象成结构体</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SPI_TypeDef <span class=\"token operator\">*</span>spix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    GPIO_TypeDef <span class=\"token operator\">*</span>cs_gpiox<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">uint16_t</span> cs_gpio_pin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> spi_user_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token class-name\">spi_user_data_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> spi_user_data spi1 <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>spix <span class=\"token operator\">=</span> SPI1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">.</span>cs_gpiox <span class=\"token operator\">=</span> GPIOB<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token punctuation\">.</span>cs_gpio_pin <span class=\"token operator\">=</span> GPIO_Pin_0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"初始化函数\"><a class=\"anchor\" href=\"#初始化函数\">#</a> 初始化函数</h3>\n<p>这里可以抽一层函数出来，写一个某个型号的 FLASH 初始化函数，然后放在 case 中调用<br />\n怎么感觉我总喜欢疯狂套娃</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_spi_port_init</span><span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flash<span class=\"token operator\">-></span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> SFUD_W25Q64FV_DEVICE_INDEX<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/* RCC 初始化 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">rcc_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/* GPIO 初始化 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">gpio_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/* SPI 外设初始化 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">spi_configuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/* 同步 Flash 移植所需的接口及数据 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>wr <span class=\"token operator\">=</span> spi_write_read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span> spi_lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>unlock <span class=\"token operator\">=</span> spi_unlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        flash<span class=\"token operator\">-></span>spi<span class=\"token punctuation\">.</span>user_data <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>spi1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* about 100 microsecond delay */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        flash<span class=\"token operator\">-></span>retry<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">=</span> retry_delay_100us<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/* adout 60 seconds timeout */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        flash<span class=\"token operator\">-></span>retry<span class=\"token punctuation\">.</span>times <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"硬件配置\"><a class=\"anchor\" href=\"#硬件配置\">#</a> 硬件配置</h3>\n<p>这里我用的 SPI1 软件片选，引脚走的 GPIOB3, GPIOB4, GPIOB5, GPIO0 (CS)<br />\n QSPI 在 407 上没有，所以我先不写了，等我有钱搞新板子了在考虑如何实现 (其实用 HAL 库才是趋势...).</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief       SPI 时钟使能</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rcc_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix <span class=\"token operator\">==</span> SPI1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        RCC<span class=\"token operator\">-></span>APB2ENR <span class=\"token operator\">|=</span> RCC_APB2ENR_SPI1EN<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// SPI  Clock Enable</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        RCC<span class=\"token operator\">-></span>AHB1ENR <span class=\"token operator\">|=</span> RCC_AHB1ENR_GPIOBEN<span class=\"token punctuation\">;</span> <span class=\"token comment\">// GPIO Clock Enable</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @brief       配置 SPI 的 GPIO</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">gpio_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix <span class=\"token operator\">==</span> SPI1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/* SCK:PB3  MISO:PB4  MOSI:PA5 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_5 <span class=\"token operator\">|</span> GPIO_Pin_4 <span class=\"token operator\">|</span> GPIO_Pin_3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_AF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_OType <span class=\"token operator\">=</span> GPIO_OType_PP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource3<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource4<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">GPIO_PinAFConfig</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_PinSource5<span class=\"token punctuation\">,</span> GPIO_AF_SPI1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/* CS: PB0 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_OUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">GPIO_SetBits</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_Pin_0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * @brief       配置 SPI 工作模式</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * @param spi   SPI 结构体</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_configuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span> spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    SPI_InitTypeDef SPI_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_Direction <span class=\"token operator\">=</span> SPI_Direction_2Lines_FullDuplex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// SPI 设置为双线双向全双工</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_Mode <span class=\"token operator\">=</span> SPI_Mode_Master<span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// 设置为主 SPI</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_DataSize <span class=\"token operator\">=</span> SPI_DataSize_8b<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// SPI 发送接收 8 位帧结构</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CPOL <span class=\"token operator\">=</span> SPI_CPOL_Low<span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 时钟悬空低</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CPHA <span class=\"token operator\">=</span> SPI_CPHA_1Edge<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 数据捕获于第一个时钟沿</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_NSS <span class=\"token operator\">=</span> SPI_NSS_Soft<span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 内部  NSS 信号由 SSI 位控制</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_BaudRatePrescaler <span class=\"token operator\">=</span> SPI_BaudRatePrescaler_2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 波特率预分频值为 2</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_FirstBit <span class=\"token operator\">=</span> SPI_FirstBit_MSB<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 数据传输从 MSB 位开始</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    SPI_InitStructure<span class=\"token punctuation\">.</span>SPI_CRCPolynomial <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// CRC 值计算的多项式，不使能 CRC 有效位配置啥都无所谓</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">SPI_I2S_DeInit</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">SPI_Init</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>SPI_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">SPI_CalculateCRC</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> DISABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">SPI_Cmd</span><span class=\"token punctuation\">(</span>spi<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我觉得，这份代码  <code>rcc_configuration</code>  和  <code>gpio_configuration</code>  可以再抽一层出来，在里面放置一个  <code>switch case</code>  调用 SPIx (x 由片上 SPI 数量决定) 的初始化.<br />\n 但是现在在做项目，也只可能有一个 FLASH, 只能先这样子了。等项目结束我再更新一下.</p>\n<h2 id=\"spi-锁\"><a class=\"anchor\" href=\"#spi-锁\">#</a> SPI 锁</h2>\n<p>这一个可以实现也可以不实现，主要看自己的需求，如果的写的数据很大我建议还是实现一下.<br />\n 其实就是关中断这种暴力的方法而已...</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">__disable_irq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spi_unlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">__enable_irq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"延时\"><a class=\"anchor\" href=\"#延时\">#</a> 延时</h2>\n<p>这个是注释里要求一定需要实现的，我这里走的是  <code>systick</code>  实现的 ys 级延时。反正 100us 左右即可，可以自行实现 (大不了 count--, 狗头).</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retry_delay_100us</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// uint32_t delay = 120;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// while (delay--)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     ;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">delayus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"spi_write_read\"><a class=\"anchor\" href=\"#spi_write_read\">#</a> spi_write_read</h2>\n<p>函数接口如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> sfud_err <span class=\"token function\">spi_write_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// sfud</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token class-name\">size_t</span> write_size<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>read_buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                <span class=\"token class-name\">size_t</span> read_size<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好多参数..., 其实实现起来和我们直接写自己实现 连续写 spi 没什么区别.<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/20211216084441.png\" alt=\"上面代码里的强转转的是这个结构体里的void 类型\" /><br />\n唯一要注意的只有这个地方，获取 sfud 的指向的 spi 设备，如上所示.<br />\n 其他的无非就，先写入有效数据，然后再写入无效数据作为数据读取。一共写入 read_size+write_size 字节的数据</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @brief               SPI 写入后读出数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param spi           SPI 结构体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param write_buf     要写入的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param write_size    写入数据大小</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param read_buf      要读出的数据的缓存</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @param read_size     要读出的数据大小</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return sfud_err     执行结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> sfud_err <span class=\"token function\">spi_write_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_spi <span class=\"token operator\">*</span>spi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>write_buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> write_size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>read_buf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                               <span class=\"token class-name\">size_t</span> read_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">uint8_t</span> send_data<span class=\"token punctuation\">,</span> read_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">spi_user_data_t</span> spi_dev <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">spi_user_data_t</span><span class=\"token punctuation\">)</span>spi<span class=\"token operator\">-></span>user_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">SFUD_ASSERT</span><span class=\"token punctuation\">(</span>write_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">SFUD_ASSERT</span><span class=\"token punctuation\">(</span>read_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">GPIO_ResetBits</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>cs_gpiox<span class=\"token punctuation\">,</span> spi_dev<span class=\"token operator\">-></span>cs_gpio_pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/* 开始读写数据 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> write_size <span class=\"token operator\">+</span> read_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/* 先写缓冲区中的数据到 SPI 总线，数据写完后，再写 dummy (0xFF) 到 SPI 总线 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            send_data <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>write_buf<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            send_data <span class=\"token operator\">=</span> SFUD_DUMMY_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/* 发送数据 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        retry_times <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SPI_I2S_GetFlagStatus</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> SPI_I2S_FLAG_TXE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">SFUD_RETRY_PROCESS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">goto</span> exit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">SPI_I2S_SendData</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> send_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/* 接收数据 */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        retry_times <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SPI_I2S_GetFlagStatus</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">,</span> SPI_I2S_FLAG_RXNE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RESET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">SFUD_RETRY_PROCESS</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> retry_times<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">goto</span> exit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        read_data <span class=\"token operator\">=</span> <span class=\"token function\">SPI_I2S_ReceiveData</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>spix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">/* 写缓冲区中的数据发完后，再读取 SPI 总线中的数据到读缓冲区 */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> write_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token operator\">*</span>read_buf<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> read_data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>exit<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">GPIO_SetBits</span><span class=\"token punctuation\">(</span>spi_dev<span class=\"token operator\">-></span>cs_gpiox<span class=\"token punctuation\">,</span> spi_dev<span class=\"token operator\">-></span>cs_gpio_pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>除了这些之外，还需要自行配置一下  <code>/sfud/inc/sfud_cfg.h</code>  文件<br />\n选择是否使用 SFDP 协议，是否使用 FLASH 信息表，和定义自己所用的 FLASH 对应的枚举变量以及结构体信息<br />\n我的配置如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// #define SFUD_DEBUG_MOD             // 不使用 SFUD debug 模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_USING_SFDP</span>               <span class=\"token comment\">// 使用 SFDP</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_USING_FLASH_INFO_TABLE</span>   <span class=\"token comment\">// 使用 FLASH 信息表</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// FLASH 芯片型号枚举</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SFUD_W25Q64FV_DEVICE_INDEX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// FLASH 相关信息和 驱动的硬件 SPI</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_FLASH_DEVICE_TABLE</span>                                                  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                                            </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token expression\"><span class=\"token punctuation\">[</span>SFUD_W25Q64FV_DEVICE_INDEX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> </span><span class=\"token string\">\"W25Q64FV\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> </span><span class=\"token string\">\"SPI1\"</span><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><h1 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h1>\n<h2 id=\"sfud_init\"><a class=\"anchor\" href=\"#sfud_init\">#</a> sfud_init</h2>\n<p>函数原型如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>初始化函数，这个放在主函数调用判断一下就好了，成功会返回  <code>SFUD_SUCCESS</code> <br />\n 如果开启了 DEBUG 的宏，会打印一些详细信息.<br />\n 这个初始化会初始化设备列表中的所有 flash 驱动，如果指向驱动一个 flash 设备，可以考虑使用  <code>sfud_device_init</code></p>\n<h2 id=\"sfud_read\"><a class=\"anchor\" href=\"#sfud_read\">#</a> sfud_read</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将数据从 FLASH 中读出，没啥好说，传个 flash 设备进去，给个地址，缓存空间，要读取的数据量没了</p>\n<h2 id=\"sfud_erase\"><a class=\"anchor\" href=\"#sfud_erase\">#</a> sfud_erase</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>擦除函数，用于将 FLASH 里的数据擦除为 dummy 的值</p>\n<h2 id=\"sfud_write\"><a class=\"anchor\" href=\"#sfud_write\">#</a> sfud_write</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>单纯的写函数，目前我也不知道有什么用，不擦除再写基本上很难保证数据的稳定性和准确性</p>\n<h2 id=\"sfud_erase_write\"><a class=\"anchor\" href=\"#sfud_erase_write\">#</a> sfud_erase_write</h2>\n<p>函数原型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数和 write 函数不同的地方在于，先写后擦，能实现数据写入 有效的写入 FLASH</p>\n<h2 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFUD_DEMO_TEST_BUFFER_SIZE</span> <span class=\"token expression\"><span class=\"token number\">2048</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">uint8_t</span> sfud_demo_test_buf<span class=\"token punctuation\">[</span>SFUD_DEMO_TEST_BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sfud_demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sfud_err result <span class=\"token operator\">=</span> SFUD_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 在操作之前需要获取 flash 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash <span class=\"token operator\">=</span> <span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 初始化 spi  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">sfud_demo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sfud_demo_test_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sfud_demo_test_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* 数据填充 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/* 擦除扇区 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase the %s flash data finish. Start from 0x%08X, size is %ld.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/* 写入数 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_write</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write the %s flash data finish. Start from 0x%08X, size is %ld.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 读出数据 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>flash<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> SFUD_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read the %s flash data success. Start from 0x%08X, size is %ld. The data is:\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08X] \"</span><span class=\"token punctuation\">,</span> addr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/* 数据校验 */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read and check write data has an error. Write the %s flash data failed.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The %s flash test is success.\\r\\n\"</span><span class=\"token punctuation\">,</span> flash<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h1>\n<p>目前我也就只知道这些了，等以后使用的时候出现什么 bug 再来琢磨琢磨</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "SFUD",
                "FLASH,SFUD"
            ]
        },
        {
            "id": "https://to-ywz.github.io/Embedded/STM32/STM32F4%E8%A3%B8%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/",
            "url": "https://to-ywz.github.io/Embedded/STM32/STM32F4%E8%A3%B8%E6%9C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/",
            "title": "STM32F4裸机 FatFs 移植",
            "date_published": "2021-12-07T23:05:01.000Z",
            "content_html": "<h1 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h1>\n<p><strong>写在前面:</strong> 这里目前只实现 SFUD+ff14b 基于标准库，板载 W25Q64FV 8M 的 FLASH.</p>\n<h2 id=\"维基百科介绍\"><a class=\"anchor\" href=\"#维基百科介绍\">#</a> 维基百科介绍</h2>\n<p>计算机的文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易，文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念，用户使用文件系统来保存数据不必关心数据实际保存在硬盘（或者光盘）的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。在写入新数据之前，用户不必关心硬盘上的那个块地址没有被使用，硬盘上的存储空间管理（分配和释放）功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中.</p>\n<p>其实这么长一段话的核心就在最前那里，文件系统其实就是一个抽象的数据类型。位于物理存储介质之上.<br />\n 与一般的 ADT 相比文件系统仅仅是更加庞大了，无非就是 一堆数据类型加上增删查改.<br />\n 话是这么说，我是写不出来这么庞大的 ADT, 狗头.</p>\n<h2 id=\"个人理解\"><a class=\"anchor\" href=\"#个人理解\">#</a> 个人理解</h2>\n<p>言归正传，当我们使用文件系统时，数据都以文件的形式存储.<br />\n 如果想要留下一块空间的话那么建议手动限制一下 flash 大小或者做一下首地址偏移.</p>\n<p>写入新文件时，先在目录中创建一个文件索引，它指示了文件存放的物理地址，再把数据存储到该地址中<br />\n需要读取数据时，可以从该目录中找到该文件的索引，进而在相应的地址中读取数据<br />\n文件系统的存在使我们在存储数据时，不再是简单的向某个物理地址直接读写，而是要遵循它的读写格式<br />\n一个完整的文件经过 逻辑转换 可能被分成 <strong>多段</strong> 并存储到<strong>不连续</strong>的物理地址，以及使用目录或链表的方式来获知下一段的位置</p>\n<p>简单来说，这个转换部分可以理解为，当我们需要写入一段数据时，由它来求解向什么物理地址写入数据、以什么格式写入，以及写入一些原始数据以外的信息 (如目录)<br />\n 类似于我们去寄快递，逻辑层就是快递站。你把东西给快递之后，你和收件人不需要知道快递是怎么到的，只需要知道目的地址就好.<br />\n 这个 &quot;快递站&quot; 的代码实现，我们习惯称之为文件系统</p>\n<h2 id=\"搭载文件系统的动机\"><a class=\"anchor\" href=\"#搭载文件系统的动机\">#</a> 搭载文件系统的动机</h2>\n<p>为了让单片机能够更好的和服务器进行交互，我打算移植一个文件系统到 STM32F4 上.<br />\n 板子上自带了一块 8M 的 FLASH, 我打算让文件系统彻底接管这块 FLASH, 如果以后有可能的话让 文件系统接管片上 FLASH.</p>\n<h2 id=\"为什么是fatfs\"><a class=\"anchor\" href=\"#为什么是fatfs\">#</a> 为什么是 Fatfs</h2>\n<p>嘿嘿，我只知道 FatFs, 所以我选了它，但是后面我找了一下还有不少的针对于 FLASH 的文件系统.<br />\n 例如，esayflash, jffs2, yaffs, Cramfs, SPIFFS... 但是这些都是针对于 FLASH 的文件系统，而 Fatfs 则是可以兼容各种设备的较为完善的文件系统，便于以后扩展.<br />\n(害，说那么多，其实主要还是只知道 Fatfs)</p>\n<h1 id=\"fatfs\"><a class=\"anchor\" href=\"#fatfs\">#</a> FatFS</h1>\n<p>FATFS 是面向小型嵌入式系统的一种通用的 FAT 文件系统，它由 <code>ANSI C</code>  语言编写且完全独立于底层的 I/O 介质，因此它可以很容易的不加修改的移植到其他处理器当中，就可以利用文件系统的各种函数，对已格式化的 SD 卡的文件进行读写</p>\n<h2 id=\"源码获取\"><a class=\"anchor\" href=\"#源码获取\">#</a> 源码获取</h2>\n<p>可以去 Fatfs 官网自行下载<span class=\"exturl\" data-url=\"aHR0cDovL2VsbS1jaGFuLm9yZy9mc3cvZmYvMDBpbmRleF9lLmh0bWw=\">传送门</span><br />\n也可以在这里走阿里云盘下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvUGdXbUJGMlVNbVE=\">传送门</span><br />\n个人建议是去官网下载，我这里只有 ff14b 版本的 fatfs, 以后可能会有新的，我不一定会同步到阿里云盘</p>\n<h2 id=\"文件分布\"><a class=\"anchor\" href=\"#文件分布\">#</a> 文件分布</h2>\n<p>document 文件<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/uHxdMZ3lXSs69h5.png\" alt=\"document\" /><br />\nsource 文件夹文件分布<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/oUdQ1Jl47jf98XD.png\" alt=\"FatFs_source\" /></p>\n<h2 id=\"接口函数\"><a class=\"anchor\" href=\"#接口函数\">#</a> 接口函数</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FRESULT <span class=\"token function\">f_open</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> BYTE mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">/* 打开或创建文件 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FRESULT <span class=\"token function\">f_close</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 关闭文件 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FRESULT <span class=\"token function\">f_read</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buff<span class=\"token punctuation\">,</span> UINT btr<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">/* 读取文件 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FRESULT <span class=\"token function\">f_write</span> <span class=\"token punctuation\">(</span>FIL<span class=\"token operator\">*</span> fp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buff<span class=\"token punctuation\">,</span> UINT btw<span class=\"token punctuation\">,</span> UINT<span class=\"token operator\">*</span> bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 写入文件 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FRESULT <span class=\"token function\">f_opendir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 打开文件夹 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>FRESULT <span class=\"token function\">f_closedir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 关闭文件夹 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>FRESULT <span class=\"token function\">f_readdir</span> <span class=\"token punctuation\">(</span>DIR<span class=\"token operator\">*</span> dp<span class=\"token punctuation\">,</span> FILINFO<span class=\"token operator\">*</span> fno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 读取文件夹 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FRESULT <span class=\"token function\">f_mkdir</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 创建文件夹 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>FRESULT <span class=\"token function\">f_unlink</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 删除存在的文件或文件夹 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FRESULT <span class=\"token function\">f_getfree</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> DWORD<span class=\"token operator\">*</span> nclst<span class=\"token punctuation\">,</span> FATFS<span class=\"token operator\">*</span><span class=\"token operator\">*</span> fatfs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 获取当前卷剩余空间 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>FRESULT <span class=\"token function\">f_rename</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path_old<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path_new<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">/* 重命名文件或文件夹 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>FRESULT <span class=\"token function\">f_chdir</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">/* 更改当前路径 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>FRESULT <span class=\"token function\">f_mount</span> <span class=\"token punctuation\">(</span>FATFS<span class=\"token operator\">*</span> fs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> BYTE opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">/* 挂载或卸载逻辑卷 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FRESULT <span class=\"token function\">f_mkfs</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TCHAR<span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> MKFS_PARM<span class=\"token operator\">*</span> opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> work<span class=\"token punctuation\">,</span> UINT len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 格式化 (创建) FAT 卷 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f_size</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>obj<span class=\"token punctuation\">.</span>objsize<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t\t\t</span><span class=\"token comment\">/* 获取当前文件大小 */</span></span></pre></td></tr></table></figure><h2 id=\"底层驱动\"><a class=\"anchor\" href=\"#底层驱动\">#</a> 底层驱动</h2>\n<p>一般来说，我们移植的时候只需要实现一下 iodisk 中的这些个函数即可，如果需要加时间戳，自行实现，这里我不用 rtc 所以不实现时间戳<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/9roNcgKR1qdPMGS.png\" alt=\"iodisk.h\" /></p>\n<h3 id=\"sfud\"><a class=\"anchor\" href=\"#sfud\">#</a> SFUD</h3>\n<p>这里使用了 一个万能的 FLASH 驱动组件 SFUD. 避免以后修改 FLASH 芯片的时候，还得到处去改也写入的相关方法.<br />\n<img data-src=\"https://s2.loli.net/2021/12/14/QgGcBTos6twlqIe.png\" alt=\"sfud\" /><br />\n 这里不详细说明 SFUD 的移植，只列出一下用到的函数<br />\n关于 sfud 的移植可以参考我另一篇博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly90by15d3oudG9wL0VtYmVkZGVkL1NUTTMyL1NUTTMyJUU4JUEzJUI4JUU2JTlDJUJBJUU3JUE3JUJCJUU2JUE0JThEU0ZVRC8=\">传送门</span> (其实直接去 github 上看人家的 readme 就可以了)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用于 disk_init</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sfud_err <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 用于获取 要写入的 flash 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sfud_flash <span class=\"token operator\">*</span><span class=\"token function\">sfud_get_device</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 用于 disk_read 函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sfud_err <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 用于 disk_write 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sfud_err <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sfud_flash <span class=\"token operator\">*</span>flash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> addr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"disk_initialize\"><a class=\"anchor\" href=\"#disk_initialize\">#</a> disk_initialize</h3>\n<p>对接了 SUFD 这一步还是很好实现的。直接 sfud_init 后判断 是否成功即可<br />\n这边为了兼容性和便欲拓展以及减少代码量，额外加了一层 本地函数函数，下面的所有接口实现基本都是这个逻辑<br />\n代码实现如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DSTATUS <span class=\"token function\">disk_initialize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tsfud_norflash0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_PARERR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @brief \t\t\tFLASH 初始化函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @return FRESULT \t初始化结果</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_INT_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_initialize ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_INT_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_write\"><a class=\"anchor\" href=\"#disk_write\">#</a> disk_write</h3>\n<p>这里需要注意几点</p>\n<ol>\n<li>在写 flash 之前需要先<strong>擦除</strong>，所以我们不使用  <code>sfud_write</code>  而是使用  <code>sfud_erase_write</code> , 这样子就不需要自行去实现先擦后写的逻辑了</li>\n<li>对于 文件系统 来说，操作以扇区为单位，而我们的 flash 的读写操作一般以 Byte 为单位，所以需要自行乘上扇区大小</li>\n</ol>\n<p>代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DRESULT <span class=\"token function\">disk_write</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Data to be written */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUINT count\t\t  <span class=\"token comment\">/* Number of sectors to write */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @brief \t\t\tFLASH 写函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param buff \t\t要写入的数组</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @param count \t要写入的扇区数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param sector \t要写入的扇区的起始地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @return FRESULT \t写操作结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 这里需要对扇区数量转为字节数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_write ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_read\"><a class=\"anchor\" href=\"#disk_read\">#</a> disk_read</h3>\n<p>写函数需要注意的地方和读函数一致，别最后读写了半天都只在读写一个字节</p>\n<p>代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DRESULT <span class=\"token function\">disk_read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tBYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Data buffer to store read data */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUINT count\t  <span class=\"token comment\">/* Number of sectors to read */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @brief \t\t\tFLASH 读函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * @param buff \t\t读出的数据</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @param count\t\t要读出的扇区数量</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @param sector\t数据所在地址</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @return FRESULT\t读取结果</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_read ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_ioctl\"><a class=\"anchor\" href=\"#disk_ioctl\">#</a> disk_ioctl</h3>\n<p>这里是 FatFs 获取 设备扇区大小，扇区数量和 块数量的的地方。对于 FLASH 的扇区其实手册里都有。不过其实我们可以自行划分<br />\n例如我的代码，8M 的 FLASH 分为 8 个块，一个块 2048 个扇区，一个扇区 512 字节，整个 FLASH 分为 2048*8 个扇区 一共 8M,<br />\n 也可以按 FLASH 手册上写的 一个 FLASH 1 个块，2048 个扇区，一个扇区 4096 字节.<br />\n 这里如果使用 超过 512 大小的扇区 自行去 ffconf.h 中修改 FF_SS_MAX 的宏<br />\n代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">/* 2048*4096/1024/1024=8(MB) */</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DRESULT <span class=\"token function\">disk_ioctl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Physical drive nmuber (0..) */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tBYTE cmd<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Control code */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff <span class=\"token comment\">/* Buffer to send/receive control data */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tDRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!disk_ioctl ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @brief \t\t\t获取 FLASH 扇区 块 数据</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * @param cmd \t\t获取指令</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> * @param buff \t\t对应数组</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * @return DRESULT \t指令执行结果</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">case</span> CTRL_SYNC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_COUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区数量 */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_COUNT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// W25Q64 有 2048 个大小为 4K 的扇区</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区大小 */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//spi flash 的扇区大小是 4096 Bytes</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_BLOCK_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">/* 块大小 */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_BLOCK_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"disk_status\"><a class=\"anchor\" href=\"#disk_status\">#</a> disk_status</h3>\n<p>这个就很简单了，想实现就实现，不想实现就直接  <code>return FR_OK;</code>  就好了<br />\n如果想实现 可以使用 sfud_read 读取一下 flash id, 判断一下作为返回值即可<br />\n代码实现如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DSTATUS <span class=\"token function\">disk_status</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEV_FLASH <span class=\"token operator\">==</span> pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回 OK 即可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"iodiskc-文件之外的东西\"><a class=\"anchor\" href=\"#iodiskc-文件之外的东西\">#</a> iodisk.c 文件之外的东西</h3>\n<p>fatfs 还有一个 ffconf.h 文件，这里会涉及到 扇区大小，读写功能，以及一些函数的禁用和启用</p>\n<p>这里只列出常用的，贴 code 太占空间</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_FS_READONLY</span>\t<span class=\"token expression\"><span class=\"token number\">0</span>       </span><span class=\"token comment\">// 只读标识符，如果你的文件系统只需要实现读功能就 改为 1, disk write 等函数就不会被编译</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_MKFS</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 使用格式化函数，我们 FLASH 就必须使用这个函数，因为我们只能通过 FatFs 来格式化 FLASH</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_LABEL</span>\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 是否使用卷标签，这个看个人习惯，FLASH 就一块，也无所谓也不用标签</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_STRFUNC</span>\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 使用 f_putc, f_getc 等函数，更详细的 子级宏定义，自行查看文件</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_CODE_PAGE</span>\t<span class=\"token expression\"><span class=\"token number\">932</span>     </span><span class=\"token comment\">// 文件名编码格式，默认万国码</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_USE_LFN</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 是否启用长文件名</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MAX_LFN</span>\t\t<span class=\"token expression\"><span class=\"token number\">255</span>     </span><span class=\"token comment\">// 文件名最大长度</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_VOLUMES</span>\t\t<span class=\"token expression\"><span class=\"token number\">1</span>       </span><span class=\"token comment\">// 文件系统 物理卷 的数据量，现在只有一个 FLASH 所以是 1</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MIN_SS</span>\t\t<span class=\"token expression\"><span class=\"token number\">512</span>     </span><span class=\"token comment\">// 扇区最小大小，这个一般不变动</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FF_MAX_SS</span>\t\t<span class=\"token expression\"><span class=\"token number\">4096</span>    </span><span class=\"token comment\">// 扇区最大大小，更具情况自行调整</span></span></pre></td></tr></table></figure><h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<p>整个  <code>iodisk.c</code>  文件如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* Low level disk I/O module SKELETON for FatFs     (C)ChaN, 2019        */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* If a working storage control module is available, it should be        */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* attached to the FatFs via a glue function rather than modifying it.   */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* This is an example of glue functions to attach various exsisting      */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* storage control modules to the FatFs module with a defined API.       */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ff.h\"</span>\t\t<span class=\"token comment\">/* Obtains integer types */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"diskio.h\"</span> <span class=\"token comment\">/* Declarations of disk functions */</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sfud.h\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* Definitions of physical drive number for each drive */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// #define DEV_RAM 0 /* Example: Map Ramdisk to physical drive 0 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEV_FLASH</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// #define DEV_MMC 1 /* Example: Map MMC/SD card to physical drive 1 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// #define DEV_USB 2 /* Example: Map USB MSD to physical drive 2 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// FLASH 划分扇区和块</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// FLASH 大小 = FLASH_SECTOR_SIZE * FLASH_SECTOR_COUNT</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_SECTOR_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLASH_BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// DBEUG 信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_DSTRING_FORMAT</span> <span class=\"token string\">\"[FATFS]: %s. \\r\\n\"</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEBUG_FSTRING_FORMAT</span> <span class=\"token string\">\"[FATFS]: %s. (Error Code: %d(%s))\\r\\n\"</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEBUG_LOG_F</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>DEBUG_FSTRING_FORMAT<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> FR_Table<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">DEBUG_LOG_D</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>DEBUG_DSTRING_FORMAT<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/* static gloal variable */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 错误状态码</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>FR_Table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token string\">\"FR_OK: Succeeded\"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (0) Succeeded */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token string\">\"FR_DISK_ERR: A hard error occurred in the low level disk I/O layer \"</span><span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">/* (1) A hard error occurred in the low level disk I/O layer */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INT_ERR: Assertion failed \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (2) Assertion failed */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_READY: The physical drive cannot work \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (3) The physical drive cannot work */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_FILE: Could not find the file \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (4) Could not find the file */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_PATH: Could not find the path \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (5) Could not find the path */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_NAME: The path name format is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t <span class=\"token comment\">/* (6) The path name format is invalid */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token string\">\"FR_DENIED: Access denied due to prohibited access or directory full \"</span><span class=\"token punctuation\">,</span>\t\t\t <span class=\"token comment\">/* (7) Access denied due to prohibited access or directory full */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token string\">\"FR_EXIST: Access denied due to prohibited access \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t <span class=\"token comment\">/* (8) Access denied due to prohibited access */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_OBJECT: The file/directory object is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t <span class=\"token comment\">/* (9) The file/directory object is invalid */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token string\">\"FR_WRITE_PROTECTED: The physical drive is write protected \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (10) The physical drive is write protected */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_DRIVE: The logical drive number is invalid \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t <span class=\"token comment\">/* (11) The logical drive number is invalid */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_ENABLED: The volume has no work area \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (12) The volume has no work area */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NO_FILESYSTEM: There is no valid FAT volume \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (13) There is no valid FAT volume */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"FR_MKFS_ABORTED: The f_mkfs() aborted due to any problem \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (14) The f_mkfs() aborted due to any parameter error */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token string\">\"FR_TIMEOUT: Could not get a grant to access the volume within defined period \"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/* (15) Could not get a grant to access the volume within defined period */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token string\">\"FR_LOCKED: The operation is rejected according to the file sharing policy \"</span><span class=\"token punctuation\">,</span>\t <span class=\"token comment\">/* (16) The operation is rejected according to the file sharing policy */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token string\">\"FR_NOT_ENOUGH_CORE: LFN working buffer could not be allocated \"</span><span class=\"token punctuation\">,</span>\t\t\t\t <span class=\"token comment\">/* (17) LFN working buffer could not be allocated */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token string\">\"FR_TOO_MANY_OPEN_FILES: Number of open files > FF_FS_LOCK \"</span><span class=\"token punctuation\">,</span>\t\t\t\t\t <span class=\"token comment\">/* (18) Number of open files > _FS_SHARE */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token string\">\"FR_INVALID_PARAMETER: Given parameter is invalid \"</span>\t\t\t\t\t\t\t\t <span class=\"token comment\">/* (19) Given parameter is invalid */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">//flash 设备实例</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">static</span> sfud_flash <span class=\"token operator\">*</span>sfud_norflash0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">/* Get Drive Status                                                      */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>DSTATUS <span class=\"token function\">disk_status</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEV_FLASH <span class=\"token operator\">==</span> pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回 OK 即可</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">/* Inidialize a Drive                                                    */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>DSTATUS <span class=\"token function\">disk_initialize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tBYTE pdrv <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\tsfud_norflash0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sfud_flash <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sfud_get_device_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_PARERR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"108\"></td><td><pre> * @brief \t\t\tFLASH 初始化函数</pre></td></tr><tr><td data-num=\"109\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"110\"></td><td><pre> * @return FRESULT \t初始化结果</pre></td></tr><tr><td data-num=\"111\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_disk_initialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> <span class=\"token function\">sfud_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_INT_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_initialize ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_INT_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">/* Read Sector(s)                                                        */</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>DRESULT <span class=\"token function\">disk_read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tBYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Data buffer to store read data */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tUINT count\t  <span class=\"token comment\">/* Number of sectors to read */</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"155\"></td><td><pre> * @brief \t\t\tFLASH 读函数</pre></td></tr><tr><td data-num=\"156\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"157\"></td><td><pre> * @param buff \t\t读出的数据</pre></td></tr><tr><td data-num=\"158\"></td><td><pre> * @param count\t\t要读出的扇区数量</pre></td></tr><tr><td data-num=\"159\"></td><td><pre> * @param sector\t数据所在地址</pre></td></tr><tr><td data-num=\"160\"></td><td><pre> * @return FRESULT\t读取结果</pre></td></tr><tr><td data-num=\"161\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_read</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_read</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_read ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token comment\">/* Write Sector(s)                                                       */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FF_FS_READONLY <span class=\"token operator\">==</span> <span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>DRESULT <span class=\"token function\">disk_write</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span>\t\t  <span class=\"token comment\">/* Physical drive nmuber to identify the drive */</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Data to be written */</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\tLBA_t sector<span class=\"token punctuation\">,</span>\t  <span class=\"token comment\">/* Start sector in LBA */</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\tUINT count\t\t  <span class=\"token comment\">/* Number of sectors to write */</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\tFRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> sector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!pdrv is not exit.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> RES_OK <span class=\"token operator\">:</span> RES_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"206\"></td><td><pre> * @brief \t\t\tFLASH 写函数</pre></td></tr><tr><td data-num=\"207\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"208\"></td><td><pre> * @param buff \t\t要写入的数组</pre></td></tr><tr><td data-num=\"209\"></td><td><pre> * @param count \t要写入的扇区数量</pre></td></tr><tr><td data-num=\"210\"></td><td><pre> * @param sector \t要写入的扇区的起始地址</pre></td></tr><tr><td data-num=\"211\"></td><td><pre> * @return FRESULT \t写操作结果</pre></td></tr><tr><td data-num=\"212\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token keyword\">static</span> FRESULT <span class=\"token function\">flash_write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> BYTE <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> UINT count<span class=\"token punctuation\">,</span> LBA_t sector<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\tsfud_err res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\tres <span class=\"token operator\">=</span> <span class=\"token function\">sfud_erase_write</span><span class=\"token punctuation\">(</span>sfud_norflash0<span class=\"token punctuation\">,</span> sector <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> count <span class=\"token operator\">*</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SFUD_SUCCESS <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FR_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">DEBUG_LOG_F</span><span class=\"token punctuation\">(</span>FR_DISK_ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"!!!disk_write ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token keyword\">return</span> FR_DISK_ERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre><span class=\"token comment\">/* Miscellaneous Functions                                               */</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token comment\">/*-----------------------------------------------------------------------*/</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>DWORD <span class=\"token function\">get_fattime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token comment\">// 暂不添加时间获取，需要的话就把 RTC 数据传入这里 */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token comment\">// DWORD time; /* 返回当前时间戳 */</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre></pre></td></tr><tr><td data-num=\"240\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>DRESULT <span class=\"token function\">disk_ioctl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\tBYTE pdrv<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* Physical drive nmuber (0..) */</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\tBYTE cmd<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Control code */</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff <span class=\"token comment\">/* Buffer to send/receive control data */</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\tDRESULT res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pdrv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t<span class=\"token keyword\">case</span> DEV_FLASH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t\tres <span class=\"token operator\">=</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>\t\t<span class=\"token function\">DEBUG_LOG_D</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!disk_ioctl ERR\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre></pre></td></tr><tr><td data-num=\"264\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"265\"></td><td><pre> * @brief \t\t\t获取 FLASH 扇区 块 数据</pre></td></tr><tr><td data-num=\"266\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"267\"></td><td><pre> * @param cmd \t\t获取指令</pre></td></tr><tr><td data-num=\"268\"></td><td><pre> * @param buff \t\t对应数组</pre></td></tr><tr><td data-num=\"269\"></td><td><pre> * @return DRESULT \t指令执行结果</pre></td></tr><tr><td data-num=\"270\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token keyword\">static</span> DRESULT <span class=\"token function\">flash_disk_ioctl</span><span class=\"token punctuation\">(</span>BYTE cmd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t<span class=\"token keyword\">case</span> CTRL_SYNC<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_COUNT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区数量 */</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_COUNT<span class=\"token punctuation\">;</span> <span class=\"token comment\">// W25Q64 有 2048 个大小为 4K 的扇区</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_SECTOR_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>\t\t<span class=\"token comment\">/* 扇区大小 */</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_SECTOR_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//spi flash 的扇区大小是 4096 Bytes</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>\t<span class=\"token keyword\">case</span> GET_BLOCK_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>\t\t<span class=\"token comment\">/* 块大小 */</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buff <span class=\"token operator\">=</span> FLASH_BLOCK_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_OK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> RES_PARERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试函数\"><a class=\"anchor\" href=\"#测试函数\">#</a> 测试函数</h2>\n<p>写的比较随意，因为一些特殊原因没有做判断处理，直接流水，自行修改</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FATFS fs<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Filesystem object */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FATFS <span class=\"token operator\">*</span>fsptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FIL fil<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">/* File object */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FRESULT res<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* API result code */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>UINT bw<span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* Bytes written */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>BYTE work<span class=\"token punctuation\">[</span>FF_MAX_SS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Work area (larger is better for processing time) */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>BYTE mm<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"This is file system test file from the STM32F407VGT6.\\r\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">flash_data_display</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> flash_add_start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08X] \"</span><span class=\"token punctuation\">,</span> flash_add_start <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">file_system_test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">char</span> fileName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0:6\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_mkfs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> work<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>work<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 格式化</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 挂载</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_getfree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>br<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 获取空余空间</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The free space: %dKB.\\r\\n\"</span><span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">// 打开文件准备写入，没有文件就创建，有文件就覆盖</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> FA_CREATE_ALWAYS <span class=\"token operator\">|</span> FA_WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//FATFS_LOG(res);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">//res = f_unlink(fileName);</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> mm<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrote %d bytes to %s file.\\r\\n\"</span><span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// 写入完毕，关闭文件</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">f_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// 打开文件准备读取</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> FA_READ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">// 读出</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  res <span class=\"token operator\">=</span> <span class=\"token function\">f_read</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">,</span> readBuf<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>mm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>br<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d bytes were read from %s.\\r\\n\"</span><span class=\"token punctuation\">,</span> br<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\r\\n\"</span><span class=\"token punctuation\">,</span> readBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">// 关闭文件</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token function\">f_close</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token function\">FATFS_LOG</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h1>\n<p>等有空我去琢磨琢磨 FatFs 的源码以及各个 API 的使用方法<br />\n至于标准库直接对接 FatFs, 我觉得还是没有必要了，HAL 都不必实现，直接套 SFUD 即可<br />\n找个时间我把 标准库 和 HAL 库 一致 SFUD 的教程写了</p>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "嵌入式",
                "STM32",
                "文件系统",
                "fatfs",
                "文件系统,fatfs"
            ]
        },
        {
            "id": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E5%A3%B0%E6%98%8E%E5%8F%8D%E6%80%9D/",
            "url": "https://to-ywz.github.io/computer-science/C/C%E8%AF%AD%E8%A8%80%E5%A3%B0%E6%98%8E%E5%8F%8D%E6%80%9D/",
            "title": "C语言声明反思",
            "date_published": "2021-10-26T12:45:01.000Z",
            "content_html": "<p>对于  <code>char * const *(*next)();</code>  这种数据类型分析起来特别麻烦，在这里先捋一下</p>\n<h1 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h1>\n<p>A. 声明先从名字开始读取，然后按照优先级顺序依次读取.<br />\nB. 优先级从高到低:</p>\n<ol>\n<li>声明中被括号括起来的部分</li>\n<li>后缀操作符:\n<ul>\n<li><code>fun()</code>  中的 <code>()</code>  代表是一个函数；</li>\n<li><code>arr[]</code>  的 <code>[]</code>  表示这是一个数组</li>\n</ul>\n</li>\n<li>前缀:  <code>*ptr</code>  表示 &quot;指向 xx 的指针&quot;</li>\n</ol>\n<p>C. 如果使用  <code>const</code>  或 <code>volatile</code> , 紧跟类型说明符，则作用于类型说明符号；其他情况下作用于左边紧邻的  <code>*</code>  号</p>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<p>举个例子  <code>char * const *(*next)();</code> <br />\n 适用规则:</p>\n<ol>\n<li>A: 变量名位  <code>next</code> , 且被 <code>()</code>  运算符包含</li>\n<li>B1: 变量名被  <code>()</code>  括号内部是  <code>(*arr)</code>  代表其是指针</li>\n<li>B: 在  <code>*</code>  和  <code>()</code>  之间决定</li>\n<li>B2: B2 规则告诉我们优先级较高的是 <code>()</code> , 所以 得出 <strong> <code>next</code>  和 <code>()</code>  先结合是一个指向函数的指针</strong>，所以得出 &quot;next 是一个函数指针，指向返回... 的函数&quot;</li>\n<li>B3: 处理  <code>*</code> , 得出指针内容</li>\n<li>C:  <code>char * const</code> ,  <code>const</code>  右边没有跟随类型符，所以解释为 &quot;指向字符串的常量指针&quot;, 指针不可改变</li>\n</ol>\n<p>综上，next 是 &quot;一个指针，指向一个函数，该函数的返回一个指针，返回的指针为一个指向 char 型数据类型的常量指针&quot;<br />\n 下图是 C 语言函数定义的规则图解<br />\n<img data-src=\"https://cdn.staticaly.com/gh/to-ywz/Image-Hosting@master/before2022/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211017124630.jpg\" alt=\"图示_源于C语言专家编程\" /></p>\n<h1 id=\"表格化\"><a class=\"anchor\" href=\"#表格化\">#</a> 表格化</h1>\n<p>上面的方式只能说是逻辑化，看上去还是不够清晰。我打算按着编译原理的角度结合上面图来列一个表格，按着上面的规则，就列一个表就可以推断出结果.</p>\n<table>\n<thead>\n<tr>\n<th>声明字符串</th>\n<th style=\"text-align:center\">采取的步骤</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char * const *(*<strong>next</strong>)();</td>\n<td style=\"text-align:center\">1</td>\n<td>表示  <code>next是...</code></td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">2,3</td>\n<td>不匹配，转到下一步。表示  <code>next是...</code></td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">4</td>\n<td>不匹配，转到下一步.</td>\n</tr>\n<tr>\n<td>char * const *(*        )();</td>\n<td style=\"text-align:center\">5</td>\n<td>与 * 号匹配。表示  <code>指向...的指针</code></td>\n</tr>\n<tr>\n<td>char * const *<strong>(     )</strong>();</td>\n<td style=\"text-align:center\">4</td>\n<td>&quot;(&quot; &quot;)&quot; 匹配，转到第 2 步</td>\n</tr>\n<tr>\n<td>char * const *        <strong>()</strong>;</td>\n<td style=\"text-align:center\">2</td>\n<td>不匹配，转到下一步</td>\n</tr>\n<tr>\n<td>char * const *        <strong>()</strong>;</td>\n<td style=\"text-align:center\">3</td>\n<td>表示  <code>返回...的函数</code></td>\n</tr>\n<tr>\n<td>char * const *              ;</td>\n<td style=\"text-align:center\">4</td>\n<td>不匹配，转到下一步</td>\n</tr>\n<tr>\n<td>char * const *              ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>指向..的指针</code></td>\n</tr>\n<tr>\n<td>char * <strong>const</strong>            ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>只读的...</code></td>\n</tr>\n<tr>\n<td>char *                      ;</td>\n<td style=\"text-align:center\">5</td>\n<td>表示 <code>指向...的指针</code></td>\n</tr>\n<tr>\n<td>char                        ;</td>\n<td style=\"text-align:center\">6</td>\n<td>表示 <code>char</code></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>大道五十，天衍四十九，人遁其一！</p>\n",
            "tags": [
                "计算机科学与技术",
                "C语言",
                "声明,学习笔记"
            ]
        }
    ]
}